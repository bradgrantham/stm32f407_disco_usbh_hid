
stm32f407_disco_usbh_hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  08008778  08008778  00018778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f84  08008f84  00018f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000588  20000000  08008f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020588  2**0
                  CONTENTS
  8 .bss          00000724  20000588  20000588  00020588  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000cac  20000cac  00020588  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020588  2**0
                  CONTENTS, READONLY
 11 .debug_line   00005382  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00012a19  00000000  00000000  0002593a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003036  00000000  00000000  00038353  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  0003b390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  0003be98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00006a1f  00000000  00000000  0003c848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003ed4  00000000  00000000  00043267  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  0004713b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002b00  00000000  00000000  000471bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000084  00000000  00000000  00049cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000117  00000000  00000000  00049d40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000588 	.word	0x20000588
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008760 	.word	0x08008760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000058c 	.word	0x2000058c
 80001cc:	08008760 	.word	0x08008760

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460e      	mov	r6, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9d08      	ldr	r5, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d150      	bne.n	8000c82 <__udivmoddi4+0xb2>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96c      	bls.n	8000cc0 <__udivmoddi4+0xf0>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0420 	rsb	r4, lr, #32
 8000bf4:	fa20 f404 	lsr.w	r4, r0, r4
 8000bf8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bfc:	ea44 0c06 	orr.w	ip, r4, r6
 8000c00:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c0c:	0c22      	lsrs	r2, r4, #16
 8000c0e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c12:	fa1f f887 	uxth.w	r8, r7
 8000c16:	fb09 c610 	mls	r6, r9, r0, ip
 8000c1a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c1e:	fb00 f308 	mul.w	r3, r0, r8
 8000c22:	42b3      	cmp	r3, r6
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x6a>
 8000c26:	19f6      	adds	r6, r6, r7
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 8122 	bcs.w	8000e74 <__udivmoddi4+0x2a4>
 8000c30:	42b3      	cmp	r3, r6
 8000c32:	f240 811f 	bls.w	8000e74 <__udivmoddi4+0x2a4>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443e      	add	r6, r7
 8000c3a:	1af6      	subs	r6, r6, r3
 8000c3c:	b2a2      	uxth	r2, r4
 8000c3e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c42:	fb09 6613 	mls	r6, r9, r3, r6
 8000c46:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c4a:	fb03 f808 	mul.w	r8, r3, r8
 8000c4e:	45a0      	cmp	r8, r4
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x96>
 8000c52:	19e4      	adds	r4, r4, r7
 8000c54:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c58:	f080 810a 	bcs.w	8000e70 <__udivmoddi4+0x2a0>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f240 8107 	bls.w	8000e70 <__udivmoddi4+0x2a0>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	443c      	add	r4, r7
 8000c66:	ebc8 0404 	rsb	r4, r8, r4
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d062      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c74:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c78:	2300      	movs	r3, #0
 8000c7a:	602c      	str	r4, [r5, #0]
 8000c7c:	606b      	str	r3, [r5, #4]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0xc6>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d055      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c90:	4608      	mov	r0, r1
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x1f0>
 8000ca0:	42b3      	cmp	r3, r6
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xda>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb66 0603 	sbc.w	r6, r6, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	46b4      	mov	ip, r6
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d040      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cb8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc0:	b912      	cbnz	r2, 8000cc8 <__udivmoddi4+0xf8>
 8000cc2:	2701      	movs	r7, #1
 8000cc4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cc8:	fab7 fe87 	clz	lr, r7
 8000ccc:	f1be 0f00 	cmp.w	lr, #0
 8000cd0:	d135      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd2:	1bf3      	subs	r3, r6, r7
 8000cd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb08 3610 	mls	r6, r8, r0, r3
 8000ce8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cec:	fb0c f300 	mul.w	r3, ip, r0
 8000cf0:	42b3      	cmp	r3, r6
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19f6      	adds	r6, r6, r7
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42b3      	cmp	r3, r6
 8000cfe:	f200 80ce 	bhi.w	8000e9e <__udivmoddi4+0x2ce>
 8000d02:	4610      	mov	r0, r2
 8000d04:	1af6      	subs	r6, r6, r3
 8000d06:	b2a2      	uxth	r2, r4
 8000d08:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d0c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d10:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d14:	fb0c fc03 	mul.w	ip, ip, r3
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b5 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	ebcc 0404 	rsb	r4, ip, r4
 8000d30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d34:	e79c      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d36:	4629      	mov	r1, r5
 8000d38:	4628      	mov	r0, r5
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0120 	rsb	r1, lr, #32
 8000d42:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d52:	40ce      	lsrs	r6, r1
 8000d54:	ea49 0903 	orr.w	r9, r9, r3
 8000d58:	fbb6 faf8 	udiv	sl, r6, r8
 8000d5c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000d60:	fb08 661a 	mls	r6, r8, sl, r6
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000d6c:	fb0a f20c 	mul.w	r2, sl, ip
 8000d70:	429a      	cmp	r2, r3
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1be>
 8000d78:	19db      	adds	r3, r3, r7
 8000d7a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000d7e:	f080 8087 	bcs.w	8000e90 <__udivmoddi4+0x2c0>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f240 8084 	bls.w	8000e90 <__udivmoddi4+0x2c0>
 8000d88:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	fa1f f989 	uxth.w	r9, r9
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000da0:	fb01 f60c 	mul.w	r6, r1, ip
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x1e8>
 8000da8:	19db      	adds	r3, r3, r7
 8000daa:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000db0:	429e      	cmp	r6, r3
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000db4:	3902      	subs	r1, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dbe:	e78e      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dc0:	f1c1 0e20 	rsb	lr, r1, #32
 8000dc4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4323      	orrs	r3, r4
 8000dcc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000dd0:	fa06 f401 	lsl.w	r4, r6, r1
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ddc:	433c      	orrs	r4, r7
 8000dde:	fbb6 f9fc 	udiv	r9, r6, ip
 8000de2:	0c27      	lsrs	r7, r4, #16
 8000de4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000de8:	fa1f f883 	uxth.w	r8, r3
 8000dec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000df0:	fb09 f708 	mul.w	r7, r9, r8
 8000df4:	42b7      	cmp	r7, r6
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x242>
 8000e00:	18f6      	adds	r6, r6, r3
 8000e02:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e06:	d241      	bcs.n	8000e8c <__udivmoddi4+0x2bc>
 8000e08:	42b7      	cmp	r7, r6
 8000e0a:	d93f      	bls.n	8000e8c <__udivmoddi4+0x2bc>
 8000e0c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e10:	441e      	add	r6, r3
 8000e12:	1bf6      	subs	r6, r6, r7
 8000e14:	b2a0      	uxth	r0, r4
 8000e16:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e1a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e1e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e22:	fb04 f808 	mul.w	r8, r4, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x26a>
 8000e2a:	18ff      	adds	r7, r7, r3
 8000e2c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e30:	d228      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d926      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000e36:	3c02      	subs	r4, #2
 8000e38:	441f      	add	r7, r3
 8000e3a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e3e:	ebc8 0707 	rsb	r7, r8, r7
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	4644      	mov	r4, r8
 8000e4a:	464e      	mov	r6, r9
 8000e4c:	d314      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4e:	d029      	beq.n	8000ea4 <__udivmoddi4+0x2d4>
 8000e50:	b365      	cbz	r5, 8000eac <__udivmoddi4+0x2dc>
 8000e52:	ebba 0304 	subs.w	r3, sl, r4
 8000e56:	eb67 0706 	sbc.w	r7, r7, r6
 8000e5a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	40cf      	lsrs	r7, r1
 8000e62:	ea4e 0303 	orr.w	r3, lr, r3
 8000e66:	e885 0088 	stmia.w	r5, {r3, r7}
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e70:	4613      	mov	r3, r2
 8000e72:	e6f8      	b.n	8000c66 <__udivmoddi4+0x96>
 8000e74:	4610      	mov	r0, r2
 8000e76:	e6e0      	b.n	8000c3a <__udivmoddi4+0x6a>
 8000e78:	ebb8 0402 	subs.w	r4, r8, r2
 8000e7c:	eb69 0603 	sbc.w	r6, r9, r3
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7e5      	b.n	8000e50 <__udivmoddi4+0x280>
 8000e84:	4604      	mov	r4, r0
 8000e86:	e7d8      	b.n	8000e3a <__udivmoddi4+0x26a>
 8000e88:	4611      	mov	r1, r2
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7c0      	b.n	8000e12 <__udivmoddi4+0x242>
 8000e90:	468a      	mov	sl, r1
 8000e92:	e77c      	b.n	8000d8e <__udivmoddi4+0x1be>
 8000e94:	3b02      	subs	r3, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e748      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	443e      	add	r6, r7
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x134>
 8000ea4:	45c2      	cmp	sl, r8
 8000ea6:	d3e7      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000ea8:	463e      	mov	r6, r7
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x280>
 8000eac:	4629      	mov	r1, r5
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ebe:	e003      	b.n	8000ec8 <LoopCopyDataInit>

08000ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ec6:	3104      	adds	r1, #4

08000ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ed0:	d3f6      	bcc.n	8000ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ed4:	e002      	b.n	8000edc <LoopFillZerobss>

08000ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ed8:	f842 3b04 	str.w	r3, [r2], #4

08000edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ee0:	d3f9      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ee2:	f000 f813 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f003 fecf 	bl	8004c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f003 fcef 	bl	80048cc <main>
  bx  lr    
 8000eee:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000ef4:	08008f94 	.word	0x08008f94
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000efc:	20000588 	.word	0x20000588
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000f00:	20000588 	.word	0x20000588
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f04:	20000cac 	.word	0x20000cac

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	490f      	ldr	r1, [pc, #60]	; (8000f4c <SystemInit+0x40>)
 8000f0e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000f12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <SystemInit+0x44>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f24:	2000      	movs	r0, #0
 8000f26:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000f2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f32:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <SystemInit+0x48>)
 8000f36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f3e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f40:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f46:	608b      	str	r3, [r1, #8]
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	40023800 	.word	0x40023800
 8000f54:	24003010 	.word	0x24003010

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <HAL_InitTick+0x24>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4807      	ldr	r0, [pc, #28]	; (8000f80 <HAL_InitTick+0x28>)
 8000f62:	fba0 3003 	umull	r3, r0, r0, r3
 8000f66:	0980      	lsrs	r0, r0, #6
 8000f68:	f000 f892 	bl	8001090 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4621      	mov	r1, r4
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 f84e 	bl	8001014 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000f78:	2000      	movs	r0, #0
 8000f7a:	bd10      	pop	{r4, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	10624dd3 	.word	0x10624dd3

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_Init+0x30>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f8e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f96:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f9e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f825 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff ffd6 	bl	8000f58 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f003 fcca 	bl	8004944 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	bd08      	pop	{r3, pc}
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000fb8:	4a02      	ldr	r2, [pc, #8]	; (8000fc4 <HAL_IncTick+0xc>)
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200005e0 	.word	0x200005e0

08000fc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fc8:	4b01      	ldr	r3, [pc, #4]	; (8000fd0 <HAL_GetTick+0x8>)
 8000fca:	6818      	ldr	r0, [r3, #0]
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200005e0 	.word	0x200005e0

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000fda:	f7ff fff5 	bl	8000fc8 <HAL_GetTick>
 8000fde:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000fe0:	f7ff fff2 	bl	8000fc8 <HAL_GetTick>
 8000fe4:	1b00      	subs	r0, r0, r4
 8000fe6:	9b01      	ldr	r3, [sp, #4]
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	d3f9      	bcc.n	8000fe0 <HAL_Delay+0xc>
  {
  }
}
 8000fec:	b002      	add	sp, #8
 8000fee:	bd10      	pop	{r4, pc}

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ff2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ff8:	041b      	lsls	r3, r3, #16
 8000ffa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ffc:	0200      	lsls	r0, r0, #8
 8000ffe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001002:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001004:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001008:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800100c:	60d0      	str	r0, [r2, #12]
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001014:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_NVIC_SetPriority+0x5c>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101e:	f1c3 0407 	rsb	r4, r3, #7
 8001022:	2c04      	cmp	r4, #4
 8001024:	bf28      	it	cs
 8001026:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001028:	1d1d      	adds	r5, r3, #4
 800102a:	2d06      	cmp	r5, #6
 800102c:	d901      	bls.n	8001032 <HAL_NVIC_SetPriority+0x1e>
 800102e:	1edd      	subs	r5, r3, #3
 8001030:	e000      	b.n	8001034 <HAL_NVIC_SetPriority+0x20>
 8001032:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	2301      	movs	r3, #1
 8001036:	fa03 f404 	lsl.w	r4, r3, r4
 800103a:	3c01      	subs	r4, #1
 800103c:	4021      	ands	r1, r4
 800103e:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	40ab      	lsls	r3, r5
 8001042:	3b01      	subs	r3, #1
 8001044:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001046:	430a      	orrs	r2, r1
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001048:	2800      	cmp	r0, #0
 800104a:	da06      	bge.n	800105a <HAL_NVIC_SetPriority+0x46>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	f000 000f 	and.w	r0, r0, #15
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <HAL_NVIC_SetPriority+0x60>)
 8001056:	541a      	strb	r2, [r3, r0]
 8001058:	e007      	b.n	800106a <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001062:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001066:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800106a:	bc30      	pop	{r4, r5}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	e000ed14 	.word	0xe000ed14

08001078 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001078:	0942      	lsrs	r2, r0, #5
 800107a:	f000 001f 	and.w	r0, r0, #31
 800107e:	2301      	movs	r3, #1
 8001080:	fa03 f000 	lsl.w	r0, r3, r0
 8001084:	4b01      	ldr	r3, [pc, #4]	; (800108c <HAL_NVIC_EnableIRQ+0x14>)
 8001086:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100

08001090 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	3801      	subs	r0, #1
 8001092:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001096:	d20a      	bcs.n	80010ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_SYSTICK_Config+0x24>)
 800109a:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	21f0      	movs	r1, #240	; 0xf0
 800109e:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_SYSTICK_Config+0x28>)
 80010a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	2000      	movs	r0, #0
 80010a6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010bc:	2804      	cmp	r0, #4
 80010be:	d105      	bne.n	80010cc <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80010c2:	6813      	ldr	r3, [r2, #0]
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	4770      	bx	lr
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010cc:	4a02      	ldr	r2, [pc, #8]	; (80010d8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	f023 0304 	bic.w	r3, r3, #4
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4770      	bx	lr
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010e0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010e2:	f7ff fffb 	bl	80010dc <HAL_SYSTICK_Callback>
 80010e6:	bd08      	pop	{r3, pc}

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ec:	2400      	movs	r4, #0
 80010ee:	e0cd      	b.n	800128c <HAL_GPIO_Init+0x1a4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80010f0:	2301      	movs	r3, #1
 80010f2:	40a3      	lsls	r3, r4
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f4:	680a      	ldr	r2, [r1, #0]
 80010f6:	ea03 0502 	and.w	r5, r3, r2

    if(iocurrent == ioposition)
 80010fa:	42ab      	cmp	r3, r5
 80010fc:	f040 80c5 	bne.w	800128a <HAL_GPIO_Init+0x1a2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001100:	684a      	ldr	r2, [r1, #4]
 8001102:	2a02      	cmp	r2, #2
 8001104:	d001      	beq.n	800110a <HAL_GPIO_Init+0x22>
 8001106:	2a12      	cmp	r2, #18
 8001108:	d110      	bne.n	800112c <HAL_GPIO_Init+0x44>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110a:	08e6      	lsrs	r6, r4, #3
 800110c:	3608      	adds	r6, #8
 800110e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001112:	f004 0207 	and.w	r2, r4, #7
 8001116:	0097      	lsls	r7, r2, #2
 8001118:	220f      	movs	r2, #15
 800111a:	40ba      	lsls	r2, r7
 800111c:	ea2c 0e02 	bic.w	lr, ip, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001120:	690a      	ldr	r2, [r1, #16]
 8001122:	40ba      	lsls	r2, r7
 8001124:	ea4e 0202 	orr.w	r2, lr, r2
        GPIOx->AFR[position >> 3U] = temp;
 8001128:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112e:	0067      	lsls	r7, r4, #1
 8001130:	2603      	movs	r6, #3
 8001132:	40be      	lsls	r6, r7
 8001134:	43f6      	mvns	r6, r6
 8001136:	ea02 0e06 	and.w	lr, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113a:	684a      	ldr	r2, [r1, #4]
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	40ba      	lsls	r2, r7
 8001142:	ea4e 0202 	orr.w	r2, lr, r2
      GPIOx->MODER = temp;
 8001146:	6002      	str	r2, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001148:	684a      	ldr	r2, [r1, #4]
 800114a:	f102 3eff 	add.w	lr, r2, #4294967295
 800114e:	f1be 0f01 	cmp.w	lr, #1
 8001152:	d903      	bls.n	800115c <HAL_GPIO_Init+0x74>
 8001154:	2a11      	cmp	r2, #17
 8001156:	d001      	beq.n	800115c <HAL_GPIO_Init+0x74>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001158:	2a12      	cmp	r2, #18
 800115a:	d110      	bne.n	800117e <HAL_GPIO_Init+0x96>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115c:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115e:	ea06 0e02 	and.w	lr, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	68ca      	ldr	r2, [r1, #12]
 8001164:	40ba      	lsls	r2, r7
 8001166:	ea4e 0202 	orr.w	r2, lr, r2
        GPIOx->OSPEEDR = temp;
 800116a:	6082      	str	r2, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116c:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116e:	ea22 0303 	bic.w	r3, r2, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001172:	684a      	ldr	r2, [r1, #4]
 8001174:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001178:	40a2      	lsls	r2, r4
 800117a:	431a      	orrs	r2, r3
        GPIOx->OTYPER = temp;
 800117c:	6042      	str	r2, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800117e:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001180:	401e      	ands	r6, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001182:	688b      	ldr	r3, [r1, #8]
 8001184:	40bb      	lsls	r3, r7
 8001186:	4333      	orrs	r3, r6
      GPIOx->PUPDR = temp;
 8001188:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118a:	684b      	ldr	r3, [r1, #4]
 800118c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001190:	d07b      	beq.n	800128a <HAL_GPIO_Init+0x1a2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	4b40      	ldr	r3, [pc, #256]	; (8001298 <HAL_GPIO_Init+0x1b0>)
 8001198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800119a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011aa:	08a6      	lsrs	r6, r4, #2
 80011ac:	1cb2      	adds	r2, r6, #2
 80011ae:	4b3b      	ldr	r3, [pc, #236]	; (800129c <HAL_GPIO_Init+0x1b4>)
 80011b0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80011b4:	f004 0303 	and.w	r3, r4, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	409a      	lsls	r2, r3
 80011be:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	4a37      	ldr	r2, [pc, #220]	; (80012a0 <HAL_GPIO_Init+0x1b8>)
 80011c4:	4290      	cmp	r0, r2
 80011c6:	d01d      	beq.n	8001204 <HAL_GPIO_Init+0x11c>
 80011c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011cc:	4290      	cmp	r0, r2
 80011ce:	d01b      	beq.n	8001208 <HAL_GPIO_Init+0x120>
 80011d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011d4:	4290      	cmp	r0, r2
 80011d6:	d019      	beq.n	800120c <HAL_GPIO_Init+0x124>
 80011d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011dc:	4290      	cmp	r0, r2
 80011de:	d017      	beq.n	8001210 <HAL_GPIO_Init+0x128>
 80011e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011e4:	4290      	cmp	r0, r2
 80011e6:	d015      	beq.n	8001214 <HAL_GPIO_Init+0x12c>
 80011e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ec:	4290      	cmp	r0, r2
 80011ee:	d013      	beq.n	8001218 <HAL_GPIO_Init+0x130>
 80011f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011f4:	4290      	cmp	r0, r2
 80011f6:	d011      	beq.n	800121c <HAL_GPIO_Init+0x134>
 80011f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011fc:	4290      	cmp	r0, r2
 80011fe:	d10f      	bne.n	8001220 <HAL_GPIO_Init+0x138>
 8001200:	2207      	movs	r2, #7
 8001202:	e00e      	b.n	8001222 <HAL_GPIO_Init+0x13a>
 8001204:	2200      	movs	r2, #0
 8001206:	e00c      	b.n	8001222 <HAL_GPIO_Init+0x13a>
 8001208:	2201      	movs	r2, #1
 800120a:	e00a      	b.n	8001222 <HAL_GPIO_Init+0x13a>
 800120c:	2202      	movs	r2, #2
 800120e:	e008      	b.n	8001222 <HAL_GPIO_Init+0x13a>
 8001210:	2203      	movs	r2, #3
 8001212:	e006      	b.n	8001222 <HAL_GPIO_Init+0x13a>
 8001214:	2204      	movs	r2, #4
 8001216:	e004      	b.n	8001222 <HAL_GPIO_Init+0x13a>
 8001218:	2205      	movs	r2, #5
 800121a:	e002      	b.n	8001222 <HAL_GPIO_Init+0x13a>
 800121c:	2206      	movs	r2, #6
 800121e:	e000      	b.n	8001222 <HAL_GPIO_Init+0x13a>
 8001220:	2208      	movs	r2, #8
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	433b      	orrs	r3, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001228:	3602      	adds	r6, #2
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <HAL_GPIO_Init+0x1b4>)
 800122c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_GPIO_Init+0x1bc>)
 8001232:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001234:	43eb      	mvns	r3, r5
 8001236:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123a:	684f      	ldr	r7, [r1, #4]
 800123c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001240:	d001      	beq.n	8001246 <HAL_GPIO_Init+0x15e>
        {
          temp |= iocurrent;
 8001242:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8001246:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <HAL_GPIO_Init+0x1bc>)
 8001248:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800124a:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800124c:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001250:	684f      	ldr	r7, [r1, #4]
 8001252:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001256:	d001      	beq.n	800125c <HAL_GPIO_Init+0x174>
        {
          temp |= iocurrent;
 8001258:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <HAL_GPIO_Init+0x1bc>)
 800125e:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001260:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001262:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001266:	684f      	ldr	r7, [r1, #4]
 8001268:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800126c:	d001      	beq.n	8001272 <HAL_GPIO_Init+0x18a>
        {
          temp |= iocurrent;
 800126e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001272:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <HAL_GPIO_Init+0x1bc>)
 8001274:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001276:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001278:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800127a:	684e      	ldr	r6, [r1, #4]
 800127c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001280:	d001      	beq.n	8001286 <HAL_GPIO_Init+0x19e>
        {
          temp |= iocurrent;
 8001282:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_GPIO_Init+0x1bc>)
 8001288:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128a:	3401      	adds	r4, #1
 800128c:	2c0f      	cmp	r4, #15
 800128e:	f67f af2f 	bls.w	80010f0 <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001292:	b003      	add	sp, #12
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40013800 	.word	0x40013800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40013c00 	.word	0x40013c00

080012a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a8:	b10a      	cbz	r2, 80012ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012aa:	6181      	str	r1, [r0, #24]
 80012ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	0409      	lsls	r1, r1, #16
 80012b0:	6181      	str	r1, [r0, #24]
 80012b2:	4770      	bx	lr

080012b4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80012b4:	6943      	ldr	r3, [r0, #20]
 80012b6:	4059      	eors	r1, r3
 80012b8:	6141      	str	r1, [r0, #20]
 80012ba:	4770      	bx	lr

080012bc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd: HCD handle
  * @retval None
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80012bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 80012be:	6807      	ldr	r7, [r0, #0]
  uint32_t pktsts;
  uint32_t pktcnt; 
  uint32_t temp = 0U;
  uint32_t tmpreg = 0U;
  
  temp = hhcd->Instance->GRXSTSP;
 80012c0:	6a3a      	ldr	r2, [r7, #32]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 80012c2:	f3c2 4343 	ubfx	r3, r2, #17, #4
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 80012c6:	f3c2 140a 	ubfx	r4, r2, #4, #11
  
  switch (pktsts)
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d130      	bne.n	8001330 <HCD_RXQLVL_IRQHandler+0x74>
 80012ce:	f002 050f 	and.w	r5, r2, #15
  {
  case GRXSTS_PKTSTS_IN:
    /* Read the data into the host buffer. */
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0U))
 80012d2:	b36c      	cbz	r4, 8001330 <HCD_RXQLVL_IRQHandler+0x74>
 80012d4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80012d8:	00d3      	lsls	r3, r2, #3
 80012da:	4403      	add	r3, r0
 80012dc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80012de:	b339      	cbz	r1, 8001330 <HCD_RXQLVL_IRQHandler+0x74>
 80012e0:	4606      	mov	r6, r0
    {  
      
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 80012e2:	4622      	mov	r2, r4
 80012e4:	4638      	mov	r0, r7
 80012e6:	f001 fad9 	bl	800289c <USB_ReadPacket>
      
      /*manage multiple Xfer */
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 80012ea:	00aa      	lsls	r2, r5, #2
 80012ec:	442a      	add	r2, r5
 80012ee:	00d3      	lsls	r3, r2, #3
 80012f0:	4433      	add	r3, r6
 80012f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012f4:	4422      	add	r2, r4
 80012f6:	645a      	str	r2, [r3, #68]	; 0x44
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 80012f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012fa:	4422      	add	r2, r4
 80012fc:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80012fe:	eb07 1345 	add.w	r3, r7, r5, lsl #5
 8001302:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HCD_RXQLVL_IRQHandler+0x78>)
 8001308:	400a      	ands	r2, r1
 800130a:	b18a      	cbz	r2, 8001330 <HCD_RXQLVL_IRQHandler+0x74>
      {
        /* re-activate the channel when more packets are expected */
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 800130c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001310:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001314:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8001318:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        hhcd->hc[channelnum].toggle_in ^= 1U;
 800131c:	00ab      	lsls	r3, r5, #2
 800131e:	1959      	adds	r1, r3, r5
 8001320:	00ca      	lsls	r2, r1, #3
 8001322:	4432      	add	r2, r6
 8001324:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001328:	f083 0301 	eor.w	r3, r3, #1
 800132c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8001330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001332:	bf00      	nop
 8001334:	1ff80000 	.word	0x1ff80000

08001338 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b085      	sub	sp, #20
 800133c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8001340:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8001344:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 8001348:	f890 4290 	ldrb.w	r4, [r0, #656]	; 0x290
 800134c:	2c01      	cmp	r4, #1
 800134e:	d029      	beq.n	80013a4 <HAL_HCD_HC_Init+0x6c>
 8001350:	4605      	mov	r5, r0
 8001352:	2001      	movs	r0, #1
 8001354:	f885 0290 	strb.w	r0, [r5, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001358:	0088      	lsls	r0, r1, #2
 800135a:	eb00 0c01 	add.w	ip, r0, r1
 800135e:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8001362:	442c      	add	r4, r5
 8001364:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8001368:	f8a4 e040 	strh.w	lr, [r4, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 800136c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001370:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001374:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 8001378:	f884 c03a 	strb.w	ip, [r4, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80U) == 0x80U);
 800137c:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
 8001380:	f884 c03b 	strb.w	ip, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8001384:	4408      	add	r0, r1
 8001386:	00c4      	lsls	r4, r0, #3
 8001388:	442c      	add	r4, r5
 800138a:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  
  status =  USB_HC_Init(hhcd->Instance, 
 800138e:	f8cd e008 	str.w	lr, [sp, #8]
 8001392:	9701      	str	r7, [sp, #4]
 8001394:	9600      	str	r6, [sp, #0]
 8001396:	6828      	ldr	r0, [r5, #0]
 8001398:	f001 fb98 	bl	8002acc <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 800139c:	2300      	movs	r3, #0
 800139e:	f885 3290 	strb.w	r3, [r5, #656]	; 0x290
  
  return status;
 80013a2:	e000      	b.n	80013a6 <HAL_HCD_HC_Init+0x6e>
                                  uint8_t ep_type,
                                  uint16_t mps)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 80013a4:	2002      	movs	r0, #2
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
  
  return status;
}
 80013a6:	b005      	add	sp, #20
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	bf00      	nop

080013ac <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 80013ac:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d00b      	beq.n	80013cc <HAL_HCD_HC_Halt+0x20>
  * @param  ch_num: Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80013b4:	b510      	push	{r4, lr}
 80013b6:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 80013b8:	2301      	movs	r3, #1
 80013ba:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 80013be:	6800      	ldr	r0, [r0, #0]
 80013c0:	f001 fd46 	bl	8002e50 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 80013ca:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 80013cc:	2002      	movs	r0, #2
 80013ce:	4770      	bx	lr

080013d0 <HAL_HCD_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{ 
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 80013d0:	2800      	cmp	r0, #0
 80013d2:	d036      	beq.n	8001442 <HAL_HCD_Init+0x72>
  * @brief  Initialize the host driver.
  * @param  hhcd: HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{ 
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d6:	b08b      	sub	sp, #44	; 0x2c
 80013d8:	4606      	mov	r6, r0
  }
  
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
  
  hhcd->State = HAL_HCD_STATE_BUSY;
 80013da:	2303      	movs	r3, #3
 80013dc:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 80013e0:	f003 fb58 	bl	8004a94 <HAL_HCD_MspInit>
  
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013e4:	6830      	ldr	r0, [r6, #0]
 80013e6:	f001 fa01 	bl	80027ec <USB_DisableGlobalInt>
  
  /* Init the Core (common init.) */
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013ea:	4634      	mov	r4, r6
 80013ec:	f854 eb10 	ldr.w	lr, [r4], #16
 80013f0:	466d      	mov	r5, sp
 80013f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001402:	1d37      	adds	r7, r6, #4
 8001404:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001408:	4670      	mov	r0, lr
 800140a:	f001 f9b1 	bl	8002770 <USB_CoreInit>
  
  /* Force Host Mode*/
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 800140e:	2101      	movs	r1, #1
 8001410:	6830      	ldr	r0, [r6, #0]
 8001412:	f001 f9f1 	bl	80027f8 <USB_SetCurrentMode>
  
  /* Init Host */
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8001416:	4634      	mov	r4, r6
 8001418:	f854 eb10 	ldr.w	lr, [r4], #16
 800141c:	466d      	mov	r5, sp
 800141e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001426:	e894 0003 	ldmia.w	r4, {r0, r1}
 800142a:	e885 0003 	stmia.w	r5, {r0, r1}
 800142e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001432:	4670      	mov	r0, lr
 8001434:	f001 fa6a 	bl	800290c <USB_HostInit>
  
  hhcd->State= HAL_HCD_STATE_READY;
 8001438:	2301      	movs	r3, #1
 800143a:	f886 3291 	strb.w	r3, [r6, #657]	; 0x291
  
  return HAL_OK;
 800143e:	2000      	movs	r0, #0
 8001440:	e001      	b.n	8001446 <HAL_HCD_Init+0x76>
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{ 
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
  {
    return HAL_ERROR;
 8001442:	2001      	movs	r0, #1
 8001444:	4770      	bx	lr
  USB_HostInit(hhcd->Instance, hhcd->Init);
  
  hhcd->State= HAL_HCD_STATE_READY;
  
  return HAL_OK;
}
 8001446:	b00b      	add	sp, #44	; 0x2c
 8001448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144a:	bf00      	nop

0800144c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8001452:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8001456:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
  hhcd->hc[ch_num].ep_is_in = direction;
 800145a:	008d      	lsls	r5, r1, #2
 800145c:	440d      	add	r5, r1
 800145e:	00ec      	lsls	r4, r5, #3
 8001460:	4404      	add	r4, r0
 8001462:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8001466:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  
  if(token == 0U)
 800146a:	b93f      	cbnz	r7, 800147c <HAL_HCD_HC_SubmitRequest+0x30>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800146c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8001470:	00ec      	lsls	r4, r5, #3
 8001472:	4404      	add	r4, r0
 8001474:	2503      	movs	r5, #3
 8001476:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
 800147a:	e006      	b.n	800148a <HAL_HCD_HC_SubmitRequest+0x3e>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800147c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8001480:	00ec      	lsls	r4, r5, #3
 8001482:	4404      	add	r4, r0
 8001484:	2502      	movs	r5, #2
 8001486:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 800148a:	2b03      	cmp	r3, #3
 800148c:	f200 80aa 	bhi.w	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
 8001490:	e8df f003 	tbb	[pc, r3]
 8001494:	7235a102 	.word	0x7235a102
  {
  case EP_TYPE_CTRL:
    if((token == 1U) && (direction == 0U)) /*send data */
 8001498:	2f01      	cmp	r7, #1
 800149a:	f040 80a3 	bne.w	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
 800149e:	2a00      	cmp	r2, #0
 80014a0:	f040 80a0 	bne.w	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
    {
      if (length == 0U)
 80014a4:	b936      	cbnz	r6, 80014b4 <HAL_HCD_HC_SubmitRequest+0x68>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1U;
 80014a6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80014aa:	00d3      	lsls	r3, r2, #3
 80014ac:	4403      	add	r3, r0
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      }
      
      /* Set the Data Toggle bit as per the Flag */
      if (hhcd->hc[ch_num].toggle_out == 0U)
 80014b4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80014b8:	00d3      	lsls	r3, r2, #3
 80014ba:	4403      	add	r3, r0
 80014bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014c0:	b93b      	cbnz	r3, 80014d2 <HAL_HCD_HC_SubmitRequest+0x86>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 80014c2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80014c6:	00d3      	lsls	r3, r2, #3
 80014c8:	4403      	add	r3, r0
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014d0:	e006      	b.n	80014e0 <HAL_HCD_HC_SubmitRequest+0x94>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014d2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80014d6:	00d3      	lsls	r3, r2, #3
 80014d8:	4403      	add	r3, r0
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 80014e0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80014e4:	00d3      	lsls	r3, r2, #3
 80014e6:	4403      	add	r3, r0
 80014e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d079      	beq.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 80014f0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80014f4:	00d3      	lsls	r3, r2, #3
 80014f6:	4403      	add	r3, r0
 80014f8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
 80014fc:	e072      	b.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
      }
    }
    break;
  
  case EP_TYPE_BULK:
    if(direction == 0U)
 80014fe:	bb22      	cbnz	r2, 800154a <HAL_HCD_HC_SubmitRequest+0xfe>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0U)
 8001500:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001504:	00d3      	lsls	r3, r2, #3
 8001506:	4403      	add	r3, r0
 8001508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800150c:	b93b      	cbnz	r3, 800151e <HAL_HCD_HC_SubmitRequest+0xd2>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 800150e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001512:	00d3      	lsls	r3, r2, #3
 8001514:	4403      	add	r3, r0
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800151c:	e006      	b.n	800152c <HAL_HCD_HC_SubmitRequest+0xe0>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800151e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001522:	00d3      	lsls	r3, r2, #3
 8001524:	4403      	add	r3, r0
 8001526:	2202      	movs	r2, #2
 8001528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 800152c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001530:	00d3      	lsls	r3, r2, #3
 8001532:	4403      	add	r3, r0
 8001534:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001538:	2b02      	cmp	r3, #2
 800153a:	d053      	beq.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 800153c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001540:	00d3      	lsls	r3, r2, #3
 8001542:	4403      	add	r3, r0
 8001544:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
 8001548:	e04c      	b.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
      }
    }
    else
    {
      if( hhcd->hc[ch_num].toggle_in == 0U)
 800154a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800154e:	00d3      	lsls	r3, r2, #3
 8001550:	4403      	add	r3, r0
 8001552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001556:	b93b      	cbnz	r3, 8001568 <HAL_HCD_HC_SubmitRequest+0x11c>
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001558:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800155c:	00d3      	lsls	r3, r2, #3
 800155e:	4403      	add	r3, r0
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001566:	e03d      	b.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
      }
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001568:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800156c:	00d3      	lsls	r3, r2, #3
 800156e:	4403      	add	r3, r0
 8001570:	2202      	movs	r2, #2
 8001572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001576:	e035      	b.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
      }
    }
    
    break;
  case EP_TYPE_INTR:
    if(direction == 0U)
 8001578:	b9b2      	cbnz	r2, 80015a8 <HAL_HCD_HC_SubmitRequest+0x15c>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0U)
 800157a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800157e:	00d3      	lsls	r3, r2, #3
 8001580:	4403      	add	r3, r0
 8001582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001586:	b93b      	cbnz	r3, 8001598 <HAL_HCD_HC_SubmitRequest+0x14c>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8001588:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800158c:	00d3      	lsls	r3, r2, #3
 800158e:	4403      	add	r3, r0
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001596:	e025      	b.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001598:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800159c:	00d3      	lsls	r3, r2, #3
 800159e:	4403      	add	r3, r0
 80015a0:	2202      	movs	r2, #2
 80015a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015a6:	e01d      	b.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
      }
    }
    else
    {
      if( hhcd->hc[ch_num].toggle_in == 0U)
 80015a8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80015ac:	00d3      	lsls	r3, r2, #3
 80015ae:	4403      	add	r3, r0
 80015b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015b4:	b93b      	cbnz	r3, 80015c6 <HAL_HCD_HC_SubmitRequest+0x17a>
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015b6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80015ba:	00d3      	lsls	r3, r2, #3
 80015bc:	4403      	add	r3, r0
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015c4:	e00e      	b.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
      }
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015c6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80015ca:	00d3      	lsls	r3, r2, #3
 80015cc:	4403      	add	r3, r0
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015d4:	e006      	b.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x198>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015d6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80015da:	00d3      	lsls	r3, r2, #3
 80015dc:	4403      	add	r3, r0
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80015e4:	008c      	lsls	r4, r1, #2
 80015e6:	1862      	adds	r2, r4, r1
 80015e8:	00d3      	lsls	r3, r2, #3
 80015ea:	4403      	add	r3, r0
 80015ec:	9a07      	ldr	r2, [sp, #28]
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80015f0:	649e      	str	r6, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80015f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].ch_num = ch_num;
 80015fa:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 80015fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001602:	4421      	add	r1, r4
 8001604:	00cb      	lsls	r3, r1, #3
 8001606:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800160a:	7c02      	ldrb	r2, [r0, #16]
 800160c:	4401      	add	r1, r0
 800160e:	6800      	ldr	r0, [r0, #0]
 8001610:	f001 fad0 	bl	8002bb4 <USB_HC_StartXfer>
}
 8001614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001616:	bf00      	nop

08001618 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd: HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8001618:	b530      	push	{r4, r5, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	4605      	mov	r5, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 800161e:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001620:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8001624:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8001626:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800162a:	9300      	str	r3, [sp, #0]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800162c:	9b00      	ldr	r3, [sp, #0]
 800162e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001632:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	f013 0f02 	tst.w	r3, #2
 800163a:	d00d      	beq.n	8001658 <HCD_Port_IRQHandler+0x40>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800163c:	9b01      	ldr	r3, [sp, #4]
 800163e:	f013 0f01 	tst.w	r3, #1
 8001642:	d005      	beq.n	8001650 <HCD_Port_IRQHandler+0x38>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001644:	69a3      	ldr	r3, [r4, #24]
 8001646:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800164a:	61a3      	str	r3, [r4, #24]
      HAL_HCD_Connect_Callback(hhcd);
 800164c:	f003 fa64 	bl	8004b18 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001650:	9b00      	ldr	r3, [sp, #0]
 8001652:	f043 0302 	orr.w	r3, r3, #2
 8001656:	9300      	str	r3, [sp, #0]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	f013 0f08 	tst.w	r3, #8
 800165e:	d030      	beq.n	80016c2 <HCD_Port_IRQHandler+0xaa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001660:	9b00      	ldr	r3, [sp, #0]
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	9300      	str	r3, [sp, #0]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001668:	9b01      	ldr	r3, [sp, #4]
 800166a:	f013 0f04 	tst.w	r3, #4
 800166e:	d01d      	beq.n	80016ac <HCD_Port_IRQHandler+0x94>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001670:	69ab      	ldr	r3, [r5, #24]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d10f      	bne.n	8001696 <HCD_Port_IRQHandler+0x7e>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8001676:	9b01      	ldr	r3, [sp, #4]
 8001678:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800167c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001680:	d104      	bne.n	800168c <HCD_Port_IRQHandler+0x74>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8001682:	2102      	movs	r1, #2
 8001684:	6828      	ldr	r0, [r5, #0]
 8001686:	f001 f9b7 	bl	80029f8 <USB_InitFSLSPClkSel>
 800168a:	e00b      	b.n	80016a4 <HCD_Port_IRQHandler+0x8c>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 800168c:	2101      	movs	r1, #1
 800168e:	6828      	ldr	r0, [r5, #0]
 8001690:	f001 f9b2 	bl	80029f8 <USB_InitFSLSPClkSel>
 8001694:	e006      	b.n	80016a4 <HCD_Port_IRQHandler+0x8c>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8001696:	68eb      	ldr	r3, [r5, #12]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d103      	bne.n	80016a4 <HCD_Port_IRQHandler+0x8c>
        {
          USBx_HOST->HFIR = (uint32_t)60000U;
 800169c:	f64e 2260 	movw	r2, #60000	; 0xea60
 80016a0:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 80016a4:	4628      	mov	r0, r5
 80016a6:	f003 fa37 	bl	8004b18 <HAL_HCD_Connect_Callback>
 80016aa:	e00a      	b.n	80016c2 <HCD_Port_IRQHandler+0xaa>
    }
    else
    {
      /* Clean up HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80016ac:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80016b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80016b4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 80016b8:	682a      	ldr	r2, [r5, #0]
 80016ba:	6993      	ldr	r3, [r2, #24]
 80016bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016c0:	6193      	str	r3, [r2, #24]
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80016c2:	9b01      	ldr	r3, [sp, #4]
 80016c4:	f013 0f20 	tst.w	r3, #32
 80016c8:	d003      	beq.n	80016d2 <HCD_Port_IRQHandler+0xba>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80016ca:	9b00      	ldr	r3, [sp, #0]
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80016d2:	9b00      	ldr	r3, [sp, #0]
 80016d4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 80016d8:	b003      	add	sp, #12
 80016da:	bd30      	pop	{r4, r5, pc}

080016dc <HCD_HC_IN_IRQHandler>:
  * @param  chnum: Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80016dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016de:	4606      	mov	r6, r0
 80016e0:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80016e2:	6807      	ldr	r7, [r0, #0]
  uint32_t tmpreg = 0U;
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 80016e4:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 80016e8:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 80016ec:	68a3      	ldr	r3, [r4, #8]
 80016ee:	f013 0f04 	tst.w	r3, #4
 80016f2:	d006      	beq.n	8001702 <HCD_HC_IN_IRQHandler+0x26>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80016f4:	2304      	movs	r3, #4
 80016f6:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80016f8:	68e3      	ldr	r3, [r4, #12]
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	60e3      	str	r3, [r4, #12]
 8001700:	e034      	b.n	800176c <HCD_HC_IN_IRQHandler+0x90>
  }  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001702:	68a3      	ldr	r3, [r4, #8]
 8001704:	f013 0f20 	tst.w	r3, #32
 8001708:	d002      	beq.n	8001710 <HCD_HC_IN_IRQHandler+0x34>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800170a:	2320      	movs	r3, #32
 800170c:	60a3      	str	r3, [r4, #8]
 800170e:	e02d      	b.n	800176c <HCD_HC_IN_IRQHandler+0x90>
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001710:	68a3      	ldr	r3, [r4, #8]
 8001712:	f013 0f08 	tst.w	r3, #8
 8001716:	d012      	beq.n	800173e <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001718:	68e3      	ldr	r3, [r4, #12]
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	60e3      	str	r3, [r4, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8001720:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001724:	00d3      	lsls	r3, r2, #3
 8001726:	4403      	add	r3, r0
 8001728:	2205      	movs	r2, #5
 800172a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800172e:	2310      	movs	r3, #16
 8001730:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8001732:	2308      	movs	r3, #8
 8001734:	60a3      	str	r3, [r4, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8001736:	6800      	ldr	r0, [r0, #0]
 8001738:	f001 fb8a 	bl	8002e50 <USB_HC_Halt>
 800173c:	e016      	b.n	800176c <HCD_HC_IN_IRQHandler+0x90>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 800173e:	68a3      	ldr	r3, [r4, #8]
 8001740:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001744:	d012      	beq.n	800176c <HCD_HC_IN_IRQHandler+0x90>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001746:	68e3      	ldr	r3, [r4, #12]
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 800174e:	6800      	ldr	r0, [r0, #0]
 8001750:	f001 fb7e 	bl	8002e50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8001754:	2310      	movs	r3, #16
 8001756:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001758:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800175c:	00d3      	lsls	r3, r2, #3
 800175e:	4433      	add	r3, r6
 8001760:	2208      	movs	r2, #8
 8001762:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176a:	60a3      	str	r3, [r4, #8]
  }    
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 800176c:	68a3      	ldr	r3, [r4, #8]
 800176e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001772:	d00b      	beq.n	800178c <HCD_HC_IN_IRQHandler+0xb0>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001774:	68e3      	ldr	r3, [r4, #12]
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 800177c:	4629      	mov	r1, r5
 800177e:	6830      	ldr	r0, [r6, #0]
 8001780:	f001 fb66 	bl	8002e50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001788:	60a3      	str	r3, [r4, #8]
 800178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 800178c:	68a3      	ldr	r3, [r4, #8]
 800178e:	f013 0f01 	tst.w	r3, #1
 8001792:	d046      	beq.n	8001822 <HCD_HC_IN_IRQHandler+0x146>
  {
    
    if (hhcd->Init.dma_enable)
 8001794:	6933      	ldr	r3, [r6, #16]
 8001796:	b163      	cbz	r3, 80017b2 <HCD_HC_IN_IRQHandler+0xd6>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001798:	00ab      	lsls	r3, r5, #2
 800179a:	1959      	adds	r1, r3, r5
 800179c:	00ca      	lsls	r2, r1, #3
 800179e:	4432      	add	r2, r6
 80017a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80017a2:	6921      	ldr	r1, [r4, #16]
 80017a4:	f3c1 0112 	ubfx	r1, r1, #0, #19
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
  {
    
    if (hhcd->Init.dma_enable)
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 80017a8:	1a51      	subs	r1, r2, r1
 80017aa:	442b      	add	r3, r5
 80017ac:	00da      	lsls	r2, r3, #3
 80017ae:	4432      	add	r2, r6
 80017b0:	64d1      	str	r1, [r2, #76]	; 0x4c
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
    }
    
    hhcd->hc[chnum].state = HC_XFRC;
 80017b2:	00aa      	lsls	r2, r5, #2
 80017b4:	442a      	add	r2, r5
 80017b6:	00d3      	lsls	r3, r2, #3
 80017b8:	4433      	add	r3, r6
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[chnum].ErrCnt = 0U;
 80017c0:	2100      	movs	r1, #0
 80017c2:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80017c4:	60a2      	str	r2, [r4, #8]
    
    
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80017c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80017ca:	b10b      	cbz	r3, 80017d0 <HCD_HC_IN_IRQHandler+0xf4>
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d10a      	bne.n	80017e6 <HCD_HC_IN_IRQHandler+0x10a>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
    {
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80017d0:	68e3      	ldr	r3, [r4, #12]
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80017d8:	4629      	mov	r1, r5
 80017da:	6830      	ldr	r0, [r6, #0]
 80017dc:	f001 fb38 	bl	8002e50 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80017e0:	2310      	movs	r3, #16
 80017e2:	60a3      	str	r3, [r4, #8]
 80017e4:	e012      	b.n	800180c <HCD_HC_IN_IRQHandler+0x130>
      
    }
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d110      	bne.n	800180c <HCD_HC_IN_IRQHandler+0x130>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80017ea:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80017ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017f2:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[chnum].urb_state = URB_DONE; 
 80017f6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80017fa:	00d3      	lsls	r3, r2, #3
 80017fc:	4433      	add	r3, r6
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001804:	4629      	mov	r1, r5
 8001806:	4630      	mov	r0, r6
 8001808:	f003 f992 	bl	8004b30 <HAL_HCD_HC_NotifyURBChange_Callback>
    }
    hhcd->hc[chnum].toggle_in ^= 1U;
 800180c:	00ab      	lsls	r3, r5, #2
 800180e:	1959      	adds	r1, r3, r5
 8001810:	00ca      	lsls	r2, r1, #3
 8001812:	4432      	add	r2, r6
 8001814:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001818:	f083 0301 	eor.w	r3, r3, #1
 800181c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8001820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001822:	68a3      	ldr	r3, [r4, #8]
 8001824:	f013 0f02 	tst.w	r3, #2
 8001828:	d050      	beq.n	80018cc <HCD_HC_IN_IRQHandler+0x1f0>
  {
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 800182a:	68e3      	ldr	r3, [r4, #12]
 800182c:	f023 0302 	bic.w	r3, r3, #2
 8001830:	60e3      	str	r3, [r4, #12]
    
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001832:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001836:	00d3      	lsls	r3, r2, #3
 8001838:	4433      	add	r3, r6
 800183a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HCD_HC_IN_IRQHandler+0x176>
    {
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 8001842:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001846:	00d3      	lsls	r3, r2, #3
 8001848:	4433      	add	r3, r6
 800184a:	2201      	movs	r2, #1
 800184c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001850:	e02f      	b.n	80018b2 <HCD_HC_IN_IRQHandler+0x1d6>
    }
    
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001852:	2b05      	cmp	r3, #5
 8001854:	d107      	bne.n	8001866 <HCD_HC_IN_IRQHandler+0x18a>
    {
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001856:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800185a:	00d3      	lsls	r3, r2, #3
 800185c:	4433      	add	r3, r6
 800185e:	2205      	movs	r2, #5
 8001860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001864:	e025      	b.n	80018b2 <HCD_HC_IN_IRQHandler+0x1d6>
    }   
    
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001866:	2b06      	cmp	r3, #6
 8001868:	d001      	beq.n	800186e <HCD_HC_IN_IRQHandler+0x192>
 800186a:	2b08      	cmp	r3, #8
 800186c:	d121      	bne.n	80018b2 <HCD_HC_IN_IRQHandler+0x1d6>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
    {
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 800186e:	00aa      	lsls	r2, r5, #2
 8001870:	442a      	add	r2, r5
 8001872:	00d3      	lsls	r3, r2, #3
 8001874:	4433      	add	r3, r6
 8001876:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001878:	1c51      	adds	r1, r2, #1
 800187a:	6599      	str	r1, [r3, #88]	; 0x58
 800187c:	2a03      	cmp	r2, #3
 800187e:	d909      	bls.n	8001894 <HCD_HC_IN_IRQHandler+0x1b8>
      {      
        hhcd->hc[chnum].ErrCnt = 0U;
 8001880:	00aa      	lsls	r2, r5, #2
 8001882:	442a      	add	r2, r5
 8001884:	00d3      	lsls	r3, r2, #3
 8001886:	4433      	add	r3, r6
 8001888:	2200      	movs	r2, #0
 800188a:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800188c:	2204      	movs	r2, #4
 800188e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001892:	e006      	b.n	80018a2 <HCD_HC_IN_IRQHandler+0x1c6>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001894:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001898:	00d3      	lsls	r3, r2, #3
 800189a:	4433      	add	r3, r6
 800189c:	2202      	movs	r2, #2
 800189e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      }
      
      /* re-activate the channel  */
      tmpreg = USBx_HC(chnum)->HCCHAR;
 80018a2:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 80018ae:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80018b2:	2302      	movs	r3, #2
 80018b4:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80018b6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80018ba:	00d3      	lsls	r3, r2, #3
 80018bc:	4433      	add	r3, r6
 80018be:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80018c2:	4629      	mov	r1, r5
 80018c4:	4630      	mov	r0, r6
 80018c6:	f003 f933 	bl	8004b30 <HAL_HCD_HC_NotifyURBChange_Callback>
 80018ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }  
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 80018cc:	68a3      	ldr	r3, [r4, #8]
 80018ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018d2:	d017      	beq.n	8001904 <HCD_HC_IN_IRQHandler+0x228>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80018d4:	68e3      	ldr	r3, [r4, #12]
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	60e3      	str	r3, [r4, #12]
    hhcd->hc[chnum].ErrCnt++;
 80018dc:	00ab      	lsls	r3, r5, #2
 80018de:	1959      	adds	r1, r3, r5
 80018e0:	00ca      	lsls	r2, r1, #3
 80018e2:	4432      	add	r2, r6
 80018e4:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80018e6:	3101      	adds	r1, #1
 80018e8:	6591      	str	r1, [r2, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 80018ea:	442b      	add	r3, r5
 80018ec:	00da      	lsls	r2, r3, #3
 80018ee:	4432      	add	r2, r6
 80018f0:	2306      	movs	r3, #6
 80018f2:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 80018f6:	4629      	mov	r1, r5
 80018f8:	6830      	ldr	r0, [r6, #0]
 80018fa:	f001 faa9 	bl	8002e50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	60a3      	str	r3, [r4, #8]
 8001902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001904:	68a3      	ldr	r3, [r4, #8]
 8001906:	f013 0f10 	tst.w	r3, #16
 800190a:	d024      	beq.n	8001956 <HCD_HC_IN_IRQHandler+0x27a>
  {  
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800190c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001910:	00d3      	lsls	r3, r2, #3
 8001912:	4433      	add	r3, r6
 8001914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001918:	2b03      	cmp	r3, #3
 800191a:	d108      	bne.n	800192e <HCD_HC_IN_IRQHandler+0x252>
    {
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800191c:	68e3      	ldr	r3, [r4, #12]
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001924:	4629      	mov	r1, r5
 8001926:	6830      	ldr	r0, [r6, #0]
 8001928:	f001 fa92 	bl	8002e50 <USB_HC_Halt>
 800192c:	e00a      	b.n	8001944 <HCD_HC_IN_IRQHandler+0x268>
    }
    else if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 800192e:	b10b      	cbz	r3, 8001934 <HCD_HC_IN_IRQHandler+0x258>
 8001930:	2b02      	cmp	r3, #2
 8001932:	d107      	bne.n	8001944 <HCD_HC_IN_IRQHandler+0x268>
              (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
    {
      /* re-activate the channel */
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001934:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001938:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800193c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001940:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    }
    hhcd->hc[chnum].state = HC_NAK;
 8001944:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001948:	00eb      	lsls	r3, r5, #3
 800194a:	441e      	add	r6, r3
 800194c:	2303      	movs	r3, #3
 800194e:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001952:	2310      	movs	r3, #16
 8001954:	60a3      	str	r3, [r4, #8]
 8001956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001958 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum: Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800195a:	6803      	ldr	r3, [r0, #0]
  uint32_t tmpreg = 0U;
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 800195c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001960:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8001964:	68a2      	ldr	r2, [r4, #8]
 8001966:	f012 0f04 	tst.w	r2, #4
 800196a:	d006      	beq.n	800197a <HCD_HC_OUT_IRQHandler+0x22>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800196c:	2304      	movs	r3, #4
 800196e:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001970:	68e3      	ldr	r3, [r4, #12]
 8001972:	f043 0302 	orr.w	r3, r3, #2
 8001976:	60e3      	str	r3, [r4, #12]
 8001978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800197a:	460e      	mov	r6, r1
 800197c:	4605      	mov	r5, r0
  }  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 800197e:	68a2      	ldr	r2, [r4, #8]
 8001980:	f012 0f20 	tst.w	r2, #32
 8001984:	d01f      	beq.n	80019c6 <HCD_HC_OUT_IRQHandler+0x6e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001986:	2320      	movs	r3, #32
 8001988:	60a3      	str	r3, [r4, #8]
    
    if( hhcd->hc[chnum].do_ping == 1U)
 800198a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800198e:	00d3      	lsls	r3, r2, #3
 8001990:	4403      	add	r3, r0
 8001992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001996:	2b01      	cmp	r3, #1
 8001998:	f040 812d 	bne.w	8001bf6 <HCD_HC_OUT_IRQHandler+0x29e>
    {
      hhcd->hc[chnum].state = HC_NYET;     
 800199c:	008f      	lsls	r7, r1, #2
 800199e:	187a      	adds	r2, r7, r1
 80019a0:	00d3      	lsls	r3, r2, #3
 80019a2:	4403      	add	r3, r0
 80019a4:	2204      	movs	r2, #4
 80019a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80019aa:	68e3      	ldr	r3, [r4, #12]
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80019b2:	6800      	ldr	r0, [r0, #0]
 80019b4:	f001 fa4c 	bl	8002e50 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80019b8:	19b9      	adds	r1, r7, r6
 80019ba:	00c8      	lsls	r0, r1, #3
 80019bc:	4428      	add	r0, r5
 80019be:	2302      	movs	r3, #2
 80019c0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 80019c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80019c6:	68a2      	ldr	r2, [r4, #8]
 80019c8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80019cc:	d016      	beq.n	80019fc <HCD_HC_OUT_IRQHandler+0xa4>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80019ce:	008b      	lsls	r3, r1, #2
 80019d0:	1859      	adds	r1, r3, r1
 80019d2:	00ca      	lsls	r2, r1, #3
 80019d4:	4402      	add	r2, r0
 80019d6:	2104      	movs	r1, #4
 80019d8:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[chnum].ErrCnt= 0U;    
 80019dc:	4433      	add	r3, r6
 80019de:	00da      	lsls	r2, r3, #3
 80019e0:	4402      	add	r2, r0
 80019e2:	2300      	movs	r3, #0
 80019e4:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80019e6:	68e3      	ldr	r3, [r4, #12]
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80019ee:	4631      	mov	r1, r6
 80019f0:	6800      	ldr	r0, [r0, #0]
 80019f2:	f001 fa2d 	bl	8002e50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80019f6:	2340      	movs	r3, #64	; 0x40
 80019f8:	60a3      	str	r3, [r4, #8]
 80019fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  }  
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80019fc:	68a2      	ldr	r2, [r4, #8]
 80019fe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001a02:	d00a      	beq.n	8001a1a <HCD_HC_OUT_IRQHandler+0xc2>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001a04:	68e3      	ldr	r3, [r4, #12]
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001a0c:	6800      	ldr	r0, [r0, #0]
 8001a0e:	f001 fa1f 	bl	8002e50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a16:	60a3      	str	r3, [r4, #8]
 8001a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001a1a:	68a2      	ldr	r2, [r4, #8]
 8001a1c:	f012 0f01 	tst.w	r2, #1
 8001a20:	d014      	beq.n	8001a4c <HCD_HC_OUT_IRQHandler+0xf4>
  {
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001a22:	008f      	lsls	r7, r1, #2
 8001a24:	187a      	adds	r2, r7, r1
 8001a26:	00d3      	lsls	r3, r2, #3
 8001a28:	4403      	add	r3, r0
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001a2e:	68e3      	ldr	r3, [r4, #12]
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001a36:	6800      	ldr	r0, [r0, #0]
 8001a38:	f001 fa0a 	bl	8002e50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001a40:	19b9      	adds	r1, r7, r6
 8001a42:	00c8      	lsls	r0, r1, #3
 8001a44:	4428      	add	r0, r5
 8001a46:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
 8001a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  }  

  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001a4c:	68a2      	ldr	r2, [r4, #8]
 8001a4e:	f012 0f08 	tst.w	r2, #8
 8001a52:	d010      	beq.n	8001a76 <HCD_HC_OUT_IRQHandler+0x11e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8001a54:	2308      	movs	r3, #8
 8001a56:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001a58:	68e3      	ldr	r3, [r4, #12]
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001a60:	6800      	ldr	r0, [r0, #0]
 8001a62:	f001 f9f5 	bl	8002e50 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8001a66:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8001a6a:	00c8      	lsls	r0, r1, #3
 8001a6c:	4428      	add	r0, r5
 8001a6e:	2305      	movs	r3, #5
 8001a70:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
 8001a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001a76:	68a2      	ldr	r2, [r4, #8]
 8001a78:	f012 0f10 	tst.w	r2, #16
 8001a7c:	d015      	beq.n	8001aaa <HCD_HC_OUT_IRQHandler+0x152>
  {  
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001a7e:	008f      	lsls	r7, r1, #2
 8001a80:	187a      	adds	r2, r7, r1
 8001a82:	00d3      	lsls	r3, r2, #3
 8001a84:	4403      	add	r3, r0
 8001a86:	2200      	movs	r2, #0
 8001a88:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001a8a:	68e3      	ldr	r3, [r4, #12]
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001a92:	6800      	ldr	r0, [r0, #0]
 8001a94:	f001 f9dc 	bl	8002e50 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001a98:	19b9      	adds	r1, r7, r6
 8001a9a:	00c8      	lsls	r0, r1, #3
 8001a9c:	4428      	add	r0, r5
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001aa4:	2310      	movs	r3, #16
 8001aa6:	60a3      	str	r3, [r4, #8]
 8001aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001aaa:	68a2      	ldr	r2, [r4, #8]
 8001aac:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ab0:	d010      	beq.n	8001ad4 <HCD_HC_OUT_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001ab2:	68e3      	ldr	r3, [r4, #12]
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001aba:	6800      	ldr	r0, [r0, #0]
 8001abc:	f001 f9c8 	bl	8002e50 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001ac0:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8001ac4:	00c8      	lsls	r0, r1, #3
 8001ac6:	4428      	add	r0, r5
 8001ac8:	2306      	movs	r3, #6
 8001aca:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	60a3      	str	r3, [r4, #8]
 8001ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001ad4:	68a2      	ldr	r2, [r4, #8]
 8001ad6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001ada:	d013      	beq.n	8001b04 <HCD_HC_OUT_IRQHandler+0x1ac>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001adc:	68e3      	ldr	r3, [r4, #12]
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001ae4:	6800      	ldr	r0, [r0, #0]
 8001ae6:	f001 f9b3 	bl	8002e50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001aea:	2310      	movs	r3, #16
 8001aec:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001af4:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8001af8:	00cb      	lsls	r3, r1, #3
 8001afa:	442b      	add	r3, r5
 8001afc:	2208      	movs	r2, #8
 8001afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001b04:	68a2      	ldr	r2, [r4, #8]
 8001b06:	f012 0f02 	tst.w	r2, #2
 8001b0a:	d074      	beq.n	8001bf6 <HCD_HC_OUT_IRQHandler+0x29e>
  {
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001b0c:	68e2      	ldr	r2, [r4, #12]
 8001b0e:	f022 0202 	bic.w	r2, r2, #2
 8001b12:	60e2      	str	r2, [r4, #12]
    
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001b14:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001b18:	00ca      	lsls	r2, r1, #3
 8001b1a:	4402      	add	r2, r0
 8001b1c:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 8001b20:	2a01      	cmp	r2, #1
 8001b22:	d115      	bne.n	8001b50 <HCD_HC_OUT_IRQHandler+0x1f8>
    {
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8001b24:	00b2      	lsls	r2, r6, #2
 8001b26:	4432      	add	r2, r6
 8001b28:	00d3      	lsls	r3, r2, #3
 8001b2a:	4403      	add	r3, r0
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8001b32:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d151      	bne.n	8001bde <HCD_HC_OUT_IRQHandler+0x286>
      {
        hhcd->hc[chnum].toggle_out ^= 1U; 
 8001b3a:	00b2      	lsls	r2, r6, #2
 8001b3c:	4432      	add	r2, r6
 8001b3e:	00d3      	lsls	r3, r2, #3
 8001b40:	4403      	add	r3, r0
 8001b42:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001b46:	f082 0201 	eor.w	r2, r2, #1
 8001b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001b4e:	e046      	b.n	8001bde <HCD_HC_OUT_IRQHandler+0x286>
      }      
    }
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8001b50:	2a03      	cmp	r2, #3
 8001b52:	d107      	bne.n	8001b64 <HCD_HC_OUT_IRQHandler+0x20c>
    {
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001b54:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8001b58:	00d3      	lsls	r3, r2, #3
 8001b5a:	4403      	add	r3, r0
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001b62:	e03c      	b.n	8001bde <HCD_HC_OUT_IRQHandler+0x286>
    }  
    
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8001b64:	2a04      	cmp	r2, #4
 8001b66:	d10a      	bne.n	8001b7e <HCD_HC_OUT_IRQHandler+0x226>
    {
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001b68:	00b2      	lsls	r2, r6, #2
 8001b6a:	4432      	add	r2, r6
 8001b6c:	00d3      	lsls	r3, r2, #3
 8001b6e:	4403      	add	r3, r0
 8001b70:	2202      	movs	r2, #2
 8001b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001b7c:	e02f      	b.n	8001bde <HCD_HC_OUT_IRQHandler+0x286>
    }   
    
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001b7e:	2a05      	cmp	r2, #5
 8001b80:	d107      	bne.n	8001b92 <HCD_HC_OUT_IRQHandler+0x23a>
    {
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001b82:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8001b86:	00d3      	lsls	r3, r2, #3
 8001b88:	4403      	add	r3, r0
 8001b8a:	2205      	movs	r2, #5
 8001b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001b90:	e025      	b.n	8001bde <HCD_HC_OUT_IRQHandler+0x286>
    } 
    
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001b92:	2a06      	cmp	r2, #6
 8001b94:	d001      	beq.n	8001b9a <HCD_HC_OUT_IRQHandler+0x242>
 8001b96:	2a08      	cmp	r2, #8
 8001b98:	d121      	bne.n	8001bde <HCD_HC_OUT_IRQHandler+0x286>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
    {
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001b9a:	00b1      	lsls	r1, r6, #2
 8001b9c:	4431      	add	r1, r6
 8001b9e:	00ca      	lsls	r2, r1, #3
 8001ba0:	442a      	add	r2, r5
 8001ba2:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001ba4:	1c48      	adds	r0, r1, #1
 8001ba6:	6590      	str	r0, [r2, #88]	; 0x58
 8001ba8:	2903      	cmp	r1, #3
 8001baa:	d909      	bls.n	8001bc0 <HCD_HC_OUT_IRQHandler+0x268>
      {      
        hhcd->hc[chnum].ErrCnt = 0U;
 8001bac:	00b1      	lsls	r1, r6, #2
 8001bae:	4431      	add	r1, r6
 8001bb0:	00ca      	lsls	r2, r1, #3
 8001bb2:	442a      	add	r2, r5
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	6591      	str	r1, [r2, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001bb8:	2104      	movs	r1, #4
 8001bba:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 8001bbe:	e006      	b.n	8001bce <HCD_HC_OUT_IRQHandler+0x276>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001bc0:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8001bc4:	00ca      	lsls	r2, r1, #3
 8001bc6:	442a      	add	r2, r5
 8001bc8:	2102      	movs	r1, #2
 8001bca:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
      }
      
      /* re-activate the channel  */
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001bce:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bd2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bd6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001bda:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001bde:	2302      	movs	r3, #2
 8001be0:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8001be2:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8001be6:	00d3      	lsls	r3, r2, #3
 8001be8:	442b      	add	r3, r5
 8001bea:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001bee:	4631      	mov	r1, r6
 8001bf0:	4628      	mov	r0, r5
 8001bf2:	f002 ff9d 	bl	8004b30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bf8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfa:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bfc:	6805      	ldr	r5, [r0, #0]
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f000 fe62 	bl	80028c8 <USB_GetMode>
 8001c04:	2801      	cmp	r0, #1
 8001c06:	f040 8094 	bne.w	8001d32 <HAL_HCD_IRQHandler+0x13a>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8001c0a:	6820      	ldr	r0, [r4, #0]
 8001c0c:	f000 fe58 	bl	80028c0 <USB_ReadInterrupts>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	f000 808e 	beq.w	8001d32 <HAL_HCD_IRQHandler+0x13a>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c16:	6820      	ldr	r0, [r4, #0]
 8001c18:	f000 fe52 	bl	80028c0 <USB_ReadInterrupts>
 8001c1c:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001c20:	d003      	beq.n	8001c2a <HAL_HCD_IRQHandler+0x32>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c28:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c2a:	6820      	ldr	r0, [r4, #0]
 8001c2c:	f000 fe48 	bl	80028c0 <USB_ReadInterrupts>
 8001c30:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001c34:	d003      	beq.n	8001c3e <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c3c:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c3e:	6820      	ldr	r0, [r4, #0]
 8001c40:	f000 fe3e 	bl	80028c0 <USB_ReadInterrupts>
 8001c44:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8001c48:	d003      	beq.n	8001c52 <HAL_HCD_IRQHandler+0x5a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c50:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c52:	6820      	ldr	r0, [r4, #0]
 8001c54:	f000 fe34 	bl	80028c0 <USB_ReadInterrupts>
 8001c58:	f010 0f02 	tst.w	r0, #2
 8001c5c:	d002      	beq.n	8001c64 <HAL_HCD_IRQHandler+0x6c>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	2202      	movs	r2, #2
 8001c62:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c64:	6820      	ldr	r0, [r4, #0]
 8001c66:	f000 fe2b 	bl	80028c0 <USB_ReadInterrupts>
 8001c6a:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8001c6e:	d010      	beq.n	8001c92 <HAL_HCD_IRQHandler+0x9a>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001c70:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001c74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c78:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f002 ff51 	bl	8004b24 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001c82:	2101      	movs	r1, #1
 8001c84:	6820      	ldr	r0, [r4, #0]
 8001c86:	f000 feb7 	bl	80029f8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c90:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c92:	6820      	ldr	r0, [r4, #0]
 8001c94:	f000 fe14 	bl	80028c0 <USB_ReadInterrupts>
 8001c98:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001c9c:	d002      	beq.n	8001ca4 <HAL_HCD_IRQHandler+0xac>
    {
      HCD_Port_IRQHandler (hhcd);
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7ff fcba 	bl	8001618 <HCD_Port_IRQHandler>
    }
    
    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ca4:	6820      	ldr	r0, [r4, #0]
 8001ca6:	f000 fe0b 	bl	80028c0 <USB_ReadInterrupts>
 8001caa:	f010 0f08 	tst.w	r0, #8
 8001cae:	d005      	beq.n	8001cbc <HAL_HCD_IRQHandler+0xc4>
    {
      HAL_HCD_SOF_Callback(hhcd);
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f002 ff2b 	bl	8004b0c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	2208      	movs	r2, #8
 8001cba:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cbc:	6820      	ldr	r0, [r4, #0]
 8001cbe:	f000 fdff 	bl	80028c0 <USB_ReadInterrupts>
 8001cc2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8001cc6:	d021      	beq.n	8001d0c <HAL_HCD_IRQHandler+0x114>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cc8:	6820      	ldr	r0, [r4, #0]
 8001cca:	f001 f8b1 	bl	8002e30 <USB_HC_ReadInterrupt>
 8001cce:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	e014      	b.n	8001cfe <HAL_HCD_IRQHandler+0x106>
      {
        if (interrupt & (1U << i))
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	40b3      	lsls	r3, r6
 8001cd8:	421f      	tst	r7, r3
 8001cda:	d00f      	beq.n	8001cfc <HAL_HCD_IRQHandler+0x104>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8001cdc:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001ce0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8001ce4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001ce8:	d004      	beq.n	8001cf4 <HAL_HCD_IRQHandler+0xfc>
          {
            HCD_HC_IN_IRQHandler(hhcd, i);
 8001cea:	b2f1      	uxtb	r1, r6
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff fcf5 	bl	80016dc <HCD_HC_IN_IRQHandler>
 8001cf2:	e003      	b.n	8001cfc <HAL_HCD_IRQHandler+0x104>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8001cf4:	b2f1      	uxtb	r1, r6
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff fe2e 	bl	8001958 <HCD_HC_OUT_IRQHandler>
    
    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cfc:	3601      	adds	r6, #1
 8001cfe:	68a3      	ldr	r3, [r4, #8]
 8001d00:	429e      	cmp	r6, r3
 8001d02:	d3e7      	bcc.n	8001cd4 <HAL_HCD_IRQHandler+0xdc>
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0a:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8001d0c:	6820      	ldr	r0, [r4, #0]
 8001d0e:	f000 fdd7 	bl	80028c0 <USB_ReadInterrupts>
 8001d12:	f010 0f10 	tst.w	r0, #16
 8001d16:	d00c      	beq.n	8001d32 <HAL_HCD_IRQHandler+0x13a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d18:	6822      	ldr	r2, [r4, #0]
 8001d1a:	6993      	ldr	r3, [r2, #24]
 8001d1c:	f023 0310 	bic.w	r3, r3, #16
 8001d20:	6193      	str	r3, [r2, #24]
      
      HCD_RXQLVL_IRQHandler (hhcd);
 8001d22:	4620      	mov	r0, r4
 8001d24:	f7ff faca 	bl	80012bc <HCD_RXQLVL_IRQHandler>
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d28:	6822      	ldr	r2, [r4, #0]
 8001d2a:	6993      	ldr	r3, [r2, #24]
 8001d2c:	f043 0310 	orr.w	r3, r3, #16
 8001d30:	6193      	str	r3, [r2, #24]
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d34 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd: HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{ 
 8001d34:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 8001d36:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d00e      	beq.n	8001d5c <HAL_HCD_Start+0x28>
 8001d3e:	4604      	mov	r4, r0
 8001d40:	2501      	movs	r5, #1
 8001d42:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001d46:	6800      	ldr	r0, [r0, #0]
 8001d48:	f000 fd4a 	bl	80027e0 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	6820      	ldr	r0, [r4, #0]
 8001d50:	f000 fe8c 	bl	8002a6c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001d54:	2000      	movs	r0, #0
 8001d56:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
  * @param  hhcd: HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{ 
  __HAL_LOCK(hhcd); 
 8001d5c:	2002      	movs	r0, #2
  __HAL_HCD_ENABLE(hhcd);
  USB_DriveVbus(hhcd->Instance, 1U);  
  __HAL_UNLOCK(hhcd); 
  return HAL_OK;
}
 8001d5e:	bd38      	pop	{r3, r4, r5, pc}

08001d60 <HAL_HCD_Stop>:
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
  __HAL_LOCK(hhcd); 
 8001d60:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d00b      	beq.n	8001d80 <HAL_HCD_Stop+0x20>
  * @param  hhcd: HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
 8001d68:	b510      	push	{r4, lr}
 8001d6a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8001d72:	6800      	ldr	r0, [r0, #0]
 8001d74:	f001 f98c 	bl	8003090 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8001d7e:	bd10      	pop	{r4, pc}
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
  __HAL_LOCK(hhcd); 
 8001d80:	2002      	movs	r0, #2
 8001d82:	4770      	bx	lr

08001d84 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd: HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d84:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8001d86:	6800      	ldr	r0, [r0, #0]
 8001d88:	f000 fe56 	bl	8002a38 <USB_ResetPort>
}
 8001d8c:	bd08      	pop	{r3, pc}
 8001d8e:	bf00      	nop

08001d90 <HAL_HCD_HC_GetURBState>:
  *            URB_ERROR/  
  *            URB_STALL      
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
  return hhcd->hc[chnum].urb_state;
 8001d90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001d94:	00cb      	lsls	r3, r1, #3
 8001d96:	4418      	add	r0, r3
}
 8001d98:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop

08001da0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd: HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001da0:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001da2:	6800      	ldr	r0, [r0, #0]
 8001da4:	f000 fe8c 	bl	8002ac0 <USB_GetCurrentFrame>
}
 8001da8:	bd08      	pop	{r3, pc}
 8001daa:	bf00      	nop

08001dac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd: HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dac:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dae:	6800      	ldr	r0, [r0, #0]
 8001db0:	f000 fe7c 	bl	8002aac <USB_GetHostSpeed>
}
 8001db4:	bd08      	pop	{r3, pc}
 8001db6:	bf00      	nop

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b530      	push	{r4, r5, lr}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dbe:	6803      	ldr	r3, [r0, #0]
 8001dc0:	f013 0f01 	tst.w	r3, #1
 8001dc4:	d03c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc6:	4bad      	ldr	r3, [pc, #692]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d00a      	beq.n	8001de8 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4baa      	ldr	r3, [pc, #680]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dde:	4ba7      	ldr	r3, [pc, #668]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001de6:	d007      	beq.n	8001df8 <HAL_RCC_OscConfig+0x40>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	4ba4      	ldr	r3, [pc, #656]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001df0:	d026      	beq.n	8001e40 <HAL_RCC_OscConfig+0x88>
 8001df2:	6863      	ldr	r3, [r4, #4]
 8001df4:	bb23      	cbnz	r3, 8001e40 <HAL_RCC_OscConfig+0x88>
 8001df6:	e16e      	b.n	80020d6 <HAL_RCC_OscConfig+0x31e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	7922      	ldrb	r2, [r4, #4]
 8001dfa:	4ba1      	ldr	r3, [pc, #644]	; (8002080 <HAL_RCC_OscConfig+0x2c8>)
 8001dfc:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dfe:	6863      	ldr	r3, [r4, #4]
 8001e00:	b17b      	cbz	r3, 8001e22 <HAL_RCC_OscConfig+0x6a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff f8e1 	bl	8000fc8 <HAL_GetTick>
 8001e06:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e08:	e005      	b.n	8001e16 <HAL_RCC_OscConfig+0x5e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0a:	f7ff f8dd 	bl	8000fc8 <HAL_GetTick>
 8001e0e:	1b40      	subs	r0, r0, r5
 8001e10:	2864      	cmp	r0, #100	; 0x64
 8001e12:	f200 8162 	bhi.w	80020da <HAL_RCC_OscConfig+0x322>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4b99      	ldr	r3, [pc, #612]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e1e:	d0f4      	beq.n	8001e0a <HAL_RCC_OscConfig+0x52>
 8001e20:	e00e      	b.n	8001e40 <HAL_RCC_OscConfig+0x88>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff f8d1 	bl	8000fc8 <HAL_GetTick>
 8001e26:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e28:	e005      	b.n	8001e36 <HAL_RCC_OscConfig+0x7e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e2a:	f7ff f8cd 	bl	8000fc8 <HAL_GetTick>
 8001e2e:	1b40      	subs	r0, r0, r5
 8001e30:	2864      	cmp	r0, #100	; 0x64
 8001e32:	f200 8154 	bhi.w	80020de <HAL_RCC_OscConfig+0x326>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	4b91      	ldr	r3, [pc, #580]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e3e:	d1f4      	bne.n	8001e2a <HAL_RCC_OscConfig+0x72>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	f013 0f02 	tst.w	r3, #2
 8001e46:	d05a      	beq.n	8001efe <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e48:	4b8c      	ldr	r3, [pc, #560]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f013 0f0c 	tst.w	r3, #12
 8001e50:	d00a      	beq.n	8001e68 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e52:	4b8a      	ldr	r3, [pc, #552]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d11b      	bne.n	8001e96 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5e:	4b87      	ldr	r3, [pc, #540]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e66:	d116      	bne.n	8001e96 <HAL_RCC_OscConfig+0xde>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e68:	4b84      	ldr	r3, [pc, #528]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f013 0f02 	tst.w	r3, #2
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_OscConfig+0xc2>
 8001e72:	68e3      	ldr	r3, [r4, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 8134 	bne.w	80020e2 <HAL_RCC_OscConfig+0x32a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4880      	ldr	r0, [pc, #512]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001e7c:	6803      	ldr	r3, [r0, #0]
 8001e7e:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 8001e82:	6923      	ldr	r3, [r4, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	22f8      	movs	r2, #248	; 0xf8
 8001e86:	fa92 f2a2 	rbit	r2, r2
 8001e8a:	fab2 f282 	clz	r2, r2
 8001e8e:	4093      	lsls	r3, r2
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e94:	e033      	b.n	8001efe <HAL_RCC_OscConfig+0x146>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e96:	68e3      	ldr	r3, [r4, #12]
 8001e98:	b1fb      	cbz	r3, 8001eda <HAL_RCC_OscConfig+0x122>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4b79      	ldr	r3, [pc, #484]	; (8002084 <HAL_RCC_OscConfig+0x2cc>)
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f892 	bl	8000fc8 <HAL_GetTick>
 8001ea4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea6:	e005      	b.n	8001eb4 <HAL_RCC_OscConfig+0xfc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7ff f88e 	bl	8000fc8 <HAL_GetTick>
 8001eac:	1b40      	subs	r0, r0, r5
 8001eae:	2802      	cmp	r0, #2
 8001eb0:	f200 8119 	bhi.w	80020e6 <HAL_RCC_OscConfig+0x32e>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	4b71      	ldr	r3, [pc, #452]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f013 0f02 	tst.w	r3, #2
 8001ebc:	d0f4      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	486f      	ldr	r0, [pc, #444]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001ec0:	6803      	ldr	r3, [r0, #0]
 8001ec2:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 8001ec6:	6923      	ldr	r3, [r4, #16]
 8001ec8:	22f8      	movs	r2, #248	; 0xf8
 8001eca:	fa92 f2a2 	rbit	r2, r2
 8001ece:	fab2 f282 	clz	r2, r2
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6003      	str	r3, [r0, #0]
 8001ed8:	e011      	b.n	8001efe <HAL_RCC_OscConfig+0x146>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eda:	2200      	movs	r2, #0
 8001edc:	4b69      	ldr	r3, [pc, #420]	; (8002084 <HAL_RCC_OscConfig+0x2cc>)
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f872 	bl	8000fc8 <HAL_GetTick>
 8001ee4:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e005      	b.n	8001ef4 <HAL_RCC_OscConfig+0x13c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff f86e 	bl	8000fc8 <HAL_GetTick>
 8001eec:	1b40      	subs	r0, r0, r5
 8001eee:	2802      	cmp	r0, #2
 8001ef0:	f200 80fb 	bhi.w	80020ea <HAL_RCC_OscConfig+0x332>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef4:	4b61      	ldr	r3, [pc, #388]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f013 0f02 	tst.w	r3, #2
 8001efc:	d1f4      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x130>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	f013 0f08 	tst.w	r3, #8
 8001f04:	d026      	beq.n	8001f54 <HAL_RCC_OscConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f06:	6963      	ldr	r3, [r4, #20]
 8001f08:	b193      	cbz	r3, 8001f30 <HAL_RCC_OscConfig+0x178>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4b5e      	ldr	r3, [pc, #376]	; (8002088 <HAL_RCC_OscConfig+0x2d0>)
 8001f0e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7ff f85a 	bl	8000fc8 <HAL_GetTick>
 8001f14:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	e005      	b.n	8001f24 <HAL_RCC_OscConfig+0x16c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f18:	f7ff f856 	bl	8000fc8 <HAL_GetTick>
 8001f1c:	1b40      	subs	r0, r0, r5
 8001f1e:	2802      	cmp	r0, #2
 8001f20:	f200 80e5 	bhi.w	80020ee <HAL_RCC_OscConfig+0x336>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f24:	4b55      	ldr	r3, [pc, #340]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f28:	f013 0f02 	tst.w	r3, #2
 8001f2c:	d0f4      	beq.n	8001f18 <HAL_RCC_OscConfig+0x160>
 8001f2e:	e011      	b.n	8001f54 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	2200      	movs	r2, #0
 8001f32:	4b55      	ldr	r3, [pc, #340]	; (8002088 <HAL_RCC_OscConfig+0x2d0>)
 8001f34:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7ff f847 	bl	8000fc8 <HAL_GetTick>
 8001f3a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	e005      	b.n	8001f4a <HAL_RCC_OscConfig+0x192>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff f843 	bl	8000fc8 <HAL_GetTick>
 8001f42:	1b40      	subs	r0, r0, r5
 8001f44:	2802      	cmp	r0, #2
 8001f46:	f200 80d4 	bhi.w	80020f2 <HAL_RCC_OscConfig+0x33a>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4a:	4b4c      	ldr	r3, [pc, #304]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4e:	f013 0f02 	tst.w	r3, #2
 8001f52:	d1f4      	bne.n	8001f3e <HAL_RCC_OscConfig+0x186>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	f013 0f04 	tst.w	r3, #4
 8001f5a:	d047      	beq.n	8001fec <HAL_RCC_OscConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	4b46      	ldr	r3, [pc, #280]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f74:	4a45      	ldr	r2, [pc, #276]	; (800208c <HAL_RCC_OscConfig+0x2d4>)
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001f7e:	f7ff f823 	bl	8000fc8 <HAL_GetTick>
 8001f82:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f84:	e005      	b.n	8001f92 <HAL_RCC_OscConfig+0x1da>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7ff f81f 	bl	8000fc8 <HAL_GetTick>
 8001f8a:	1b40      	subs	r0, r0, r5
 8001f8c:	2802      	cmp	r0, #2
 8001f8e:	f200 80b2 	bhi.w	80020f6 <HAL_RCC_OscConfig+0x33e>
    PWR->CR |= PWR_CR_DBP;
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f92:	4b3e      	ldr	r3, [pc, #248]	; (800208c <HAL_RCC_OscConfig+0x2d4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f9a:	d0f4      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1ce>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	7a22      	ldrb	r2, [r4, #8]
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_RCC_OscConfig+0x2d8>)
 8001fa0:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa2:	68a3      	ldr	r3, [r4, #8]
 8001fa4:	b18b      	cbz	r3, 8001fca <HAL_RCC_OscConfig+0x212>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f80f 	bl	8000fc8 <HAL_GetTick>
 8001faa:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	e007      	b.n	8001fbe <HAL_RCC_OscConfig+0x206>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff f80b 	bl	8000fc8 <HAL_GetTick>
 8001fb2:	1b40      	subs	r0, r0, r5
 8001fb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fb8:	4298      	cmp	r0, r3
 8001fba:	f200 809e 	bhi.w	80020fa <HAL_RCC_OscConfig+0x342>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	f013 0f02 	tst.w	r3, #2
 8001fc6:	d0f2      	beq.n	8001fae <HAL_RCC_OscConfig+0x1f6>
 8001fc8:	e010      	b.n	8001fec <HAL_RCC_OscConfig+0x234>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7fe fffd 	bl	8000fc8 <HAL_GetTick>
 8001fce:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	e007      	b.n	8001fe2 <HAL_RCC_OscConfig+0x22a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fff9 	bl	8000fc8 <HAL_GetTick>
 8001fd6:	1b40      	subs	r0, r0, r5
 8001fd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fdc:	4298      	cmp	r0, r3
 8001fde:	f200 808e 	bhi.w	80020fe <HAL_RCC_OscConfig+0x346>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	f013 0f02 	tst.w	r3, #2
 8001fea:	d1f2      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x21a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fec:	69a3      	ldr	r3, [r4, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8087 	beq.w	8002102 <HAL_RCC_OscConfig+0x34a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff4:	4a21      	ldr	r2, [pc, #132]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8001ff6:	6892      	ldr	r2, [r2, #8]
 8001ff8:	f002 020c 	and.w	r2, r2, #12
 8001ffc:	2a08      	cmp	r2, #8
 8001ffe:	f000 8082 	beq.w	8002106 <HAL_RCC_OscConfig+0x34e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002002:	2b02      	cmp	r3, #2
 8002004:	d154      	bne.n	80020b0 <HAL_RCC_OscConfig+0x2f8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	2200      	movs	r2, #0
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_RCC_OscConfig+0x2dc>)
 800200a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe ffdc 	bl	8000fc8 <HAL_GetTick>
 8002010:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e004      	b.n	800201e <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ffd8 	bl	8000fc8 <HAL_GetTick>
 8002018:	1b40      	subs	r0, r0, r5
 800201a:	2802      	cmp	r0, #2
 800201c:	d875      	bhi.n	800210a <HAL_RCC_OscConfig+0x352>
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002026:	d1f5      	bne.n	8002014 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002028:	69e1      	ldr	r1, [r4, #28]
 800202a:	6a23      	ldr	r3, [r4, #32]
 800202c:	4319      	orrs	r1, r3
 800202e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002030:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	fab2 f282 	clz	r2, r2
 800203c:	4093      	lsls	r3, r2
 800203e:	4319      	orrs	r1, r3
 8002040:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002042:	085b      	lsrs	r3, r3, #1
 8002044:	1e5a      	subs	r2, r3, #1
 8002046:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	430b      	orrs	r3, r1
 8002058:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800205a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800205e:	fa91 f1a1 	rbit	r1, r1
 8002062:	fab1 f181 	clz	r1, r1
 8002066:	408a      	lsls	r2, r1
 8002068:	4313      	orrs	r3, r2
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_RCC_OscConfig+0x2c4>)
 800206c:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206e:	2201      	movs	r2, #1
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCC_OscConfig+0x2dc>)
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe ffa8 	bl	8000fc8 <HAL_GetTick>
 8002078:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	e012      	b.n	80020a2 <HAL_RCC_OscConfig+0x2ea>
 800207c:	40023800 	.word	0x40023800
 8002080:	40023802 	.word	0x40023802
 8002084:	42470000 	.word	0x42470000
 8002088:	42470e80 	.word	0x42470e80
 800208c:	40007000 	.word	0x40007000
 8002090:	40023870 	.word	0x40023870
 8002094:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe ff96 	bl	8000fc8 <HAL_GetTick>
 800209c:	1b00      	subs	r0, r0, r4
 800209e:	2802      	cmp	r0, #2
 80020a0:	d835      	bhi.n	800210e <HAL_RCC_OscConfig+0x356>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_OscConfig+0x360>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020aa:	d0f5      	beq.n	8002098 <HAL_RCC_OscConfig+0x2e0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80020ac:	2000      	movs	r0, #0
 80020ae:	e031      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	2200      	movs	r2, #0
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_RCC_OscConfig+0x364>)
 80020b4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe ff87 	bl	8000fc8 <HAL_GetTick>
 80020ba:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020bc:	e004      	b.n	80020c8 <HAL_RCC_OscConfig+0x310>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020be:	f7fe ff83 	bl	8000fc8 <HAL_GetTick>
 80020c2:	1b00      	subs	r0, r0, r4
 80020c4:	2802      	cmp	r0, #2
 80020c6:	d824      	bhi.n	8002112 <HAL_RCC_OscConfig+0x35a>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_RCC_OscConfig+0x360>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020d0:	d1f5      	bne.n	80020be <HAL_RCC_OscConfig+0x306>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80020d2:	2000      	movs	r0, #0
 80020d4:	e01e      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 80020d6:	2001      	movs	r0, #1
 80020d8:	e01c      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80020da:	2003      	movs	r0, #3
 80020dc:	e01a      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80020de:	2003      	movs	r0, #3
 80020e0:	e018      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 80020e2:	2001      	movs	r0, #1
 80020e4:	e016      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80020e6:	2003      	movs	r0, #3
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80020ea:	2003      	movs	r0, #3
 80020ec:	e012      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80020ee:	2003      	movs	r0, #3
 80020f0:	e010      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80020f2:	2003      	movs	r0, #3
 80020f4:	e00e      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 80020f6:	2003      	movs	r0, #3
 80020f8:	e00c      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80020fa:	2003      	movs	r0, #3
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80020fe:	2003      	movs	r0, #3
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002102:	2000      	movs	r0, #0
 8002104:	e006      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002106:	2001      	movs	r0, #1
 8002108:	e004      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800210a:	2003      	movs	r0, #3
 800210c:	e002      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800210e:	2003      	movs	r0, #3
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x35c>
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002112:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002114:	b003      	add	sp, #12
 8002116:	bd30      	pop	{r4, r5, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	42470060 	.word	0x42470060

08002120 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b04      	cmp	r3, #4
 800212a:	d03f      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x8c>
 800212c:	2b08      	cmp	r3, #8
 800212e:	d001      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4822      	ldr	r0, [pc, #136]	; (80021bc <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002132:	4770      	bx	lr
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b410      	push	{r4}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002138:	6858      	ldr	r0, [r3, #4]
 800213a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002144:	d010      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002148:	fbb3 f0f0 	udiv	r0, r3, r0
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002154:	400a      	ands	r2, r1
 8002156:	fa91 f3a1 	rbit	r3, r1
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	fa22 f303 	lsr.w	r3, r2, r3
 8002162:	fb03 f300 	mul.w	r3, r3, r0
 8002166:	e010      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x6a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_RCC_GetSysClockFreq+0x9c>)
 800216a:	fbb3 f0f0 	udiv	r0, r3, r0
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 8002176:	ea02 0104 	and.w	r1, r2, r4
 800217a:	fa94 f2a4 	rbit	r2, r4
 800217e:	fab2 f282 	clz	r2, r2
 8002182:	fa21 f202 	lsr.w	r2, r1, r2
 8002186:	fb02 f300 	mul.w	r3, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800218c:	6850      	ldr	r0, [r2, #4]
 800218e:	f400 3240 	and.w	r2, r0, #196608	; 0x30000
 8002192:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8002196:	fa90 f0a0 	rbit	r0, r0
 800219a:	fab0 f080 	clz	r0, r0
 800219e:	fa22 f000 	lsr.w	r0, r2, r0
 80021a2:	3001      	adds	r0, #1
 80021a4:	0040      	lsls	r0, r0, #1
      
      sysclockfreq = pllvco/pllp;
 80021a6:	fbb3 f0f0 	udiv	r0, r3, r0
      break;
 80021aa:	e001      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x90>
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ae:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	007a1200 	.word	0x007a1200

080021c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c4:	b570      	push	{r4, r5, r6, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <HAL_RCC_ClockConfig+0x1a0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	428b      	cmp	r3, r1
 80021d0:	d208      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x20>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	b2cb      	uxtb	r3, r1
 80021d4:	4a63      	ldr	r2, [pc, #396]	; (8002364 <HAL_RCC_ClockConfig+0x1a0>)
 80021d6:	7013      	strb	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021d8:	6813      	ldr	r3, [r2, #0]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	4299      	cmp	r1, r3
 80021e0:	f040 80ae 	bne.w	8002340 <HAL_RCC_ClockConfig+0x17c>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	6803      	ldr	r3, [r0, #0]
 80021e6:	f013 0f02 	tst.w	r3, #2
 80021ea:	d006      	beq.n	80021fa <HAL_RCC_ClockConfig+0x36>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4c5e      	ldr	r4, [pc, #376]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 80021ee:	68a3      	ldr	r3, [r4, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	6883      	ldr	r3, [r0, #8]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60a3      	str	r3, [r4, #8]
 80021fa:	460d      	mov	r5, r1
 80021fc:	4604      	mov	r4, r0
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	6803      	ldr	r3, [r0, #0]
 8002200:	f013 0f01 	tst.w	r3, #1
 8002204:	d060      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x104>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002206:	6842      	ldr	r2, [r0, #4]
 8002208:	2a01      	cmp	r2, #1
 800220a:	d105      	bne.n	8002218 <HAL_RCC_ClockConfig+0x54>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220c:	4b56      	ldr	r3, [pc, #344]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002214:	d10f      	bne.n	8002236 <HAL_RCC_ClockConfig+0x72>
 8002216:	e095      	b.n	8002344 <HAL_RCC_ClockConfig+0x180>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002218:	1e93      	subs	r3, r2, #2
 800221a:	2b01      	cmp	r3, #1
 800221c:	d805      	bhi.n	800222a <HAL_RCC_ClockConfig+0x66>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	4b52      	ldr	r3, [pc, #328]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002226:	d106      	bne.n	8002236 <HAL_RCC_ClockConfig+0x72>
 8002228:	e08e      	b.n	8002348 <HAL_RCC_ClockConfig+0x184>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	4b4f      	ldr	r3, [pc, #316]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f013 0f02 	tst.w	r3, #2
 8002232:	f000 808b 	beq.w	800234c <HAL_RCC_ClockConfig+0x188>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002236:	494c      	ldr	r1, [pc, #304]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 8002238:	688b      	ldr	r3, [r1, #8]
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002242:	f7fe fec1 	bl	8000fc8 <HAL_GetTick>
 8002246:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002248:	6863      	ldr	r3, [r4, #4]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d10e      	bne.n	800226c <HAL_RCC_ClockConfig+0xa8>
 800224e:	e006      	b.n	800225e <HAL_RCC_ClockConfig+0x9a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002250:	f7fe feba 	bl	8000fc8 <HAL_GetTick>
 8002254:	1b80      	subs	r0, r0, r6
 8002256:	f241 3388 	movw	r3, #5000	; 0x1388
 800225a:	4298      	cmp	r0, r3
 800225c:	d878      	bhi.n	8002350 <HAL_RCC_ClockConfig+0x18c>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800225e:	4b42      	ldr	r3, [pc, #264]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b04      	cmp	r3, #4
 8002268:	d1f2      	bne.n	8002250 <HAL_RCC_ClockConfig+0x8c>
 800226a:	e02d      	b.n	80022c8 <HAL_RCC_ClockConfig+0x104>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226c:	2b02      	cmp	r3, #2
 800226e:	d10e      	bne.n	800228e <HAL_RCC_ClockConfig+0xca>
 8002270:	e006      	b.n	8002280 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002272:	f7fe fea9 	bl	8000fc8 <HAL_GetTick>
 8002276:	1b80      	subs	r0, r0, r6
 8002278:	f241 3388 	movw	r3, #5000	; 0x1388
 800227c:	4298      	cmp	r0, r3
 800227e:	d869      	bhi.n	8002354 <HAL_RCC_ClockConfig+0x190>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d1f2      	bne.n	8002272 <HAL_RCC_ClockConfig+0xae>
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_ClockConfig+0x104>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800228e:	2b03      	cmp	r3, #3
 8002290:	d115      	bne.n	80022be <HAL_RCC_ClockConfig+0xfa>
 8002292:	e006      	b.n	80022a2 <HAL_RCC_ClockConfig+0xde>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002294:	f7fe fe98 	bl	8000fc8 <HAL_GetTick>
 8002298:	1b80      	subs	r0, r0, r6
 800229a:	f241 3388 	movw	r3, #5000	; 0x1388
 800229e:	4298      	cmp	r0, r3
 80022a0:	d85a      	bhi.n	8002358 <HAL_RCC_ClockConfig+0x194>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80022a2:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d1f2      	bne.n	8002294 <HAL_RCC_ClockConfig+0xd0>
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_ClockConfig+0x104>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7fe fe8a 	bl	8000fc8 <HAL_GetTick>
 80022b4:	1b80      	subs	r0, r0, r6
 80022b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80022ba:	4298      	cmp	r0, r3
 80022bc:	d84e      	bhi.n	800235c <HAL_RCC_ClockConfig+0x198>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f013 0f0c 	tst.w	r3, #12
 80022c6:	d1f3      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80022c8:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_RCC_ClockConfig+0x1a0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	429d      	cmp	r5, r3
 80022d2:	d207      	bcs.n	80022e4 <HAL_RCC_ClockConfig+0x120>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d4:	b2ea      	uxtb	r2, r5
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_RCC_ClockConfig+0x1a0>)
 80022d8:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	429d      	cmp	r5, r3
 80022e2:	d13d      	bne.n	8002360 <HAL_RCC_ClockConfig+0x19c>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	f013 0f04 	tst.w	r3, #4
 80022ea:	d006      	beq.n	80022fa <HAL_RCC_ClockConfig+0x136>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	491e      	ldr	r1, [pc, #120]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 80022ee:	688b      	ldr	r3, [r1, #8]
 80022f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022f4:	68e3      	ldr	r3, [r4, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	f013 0f08 	tst.w	r3, #8
 8002300:	d007      	beq.n	8002312 <HAL_RCC_ClockConfig+0x14e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002302:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 8002304:	6893      	ldr	r3, [r2, #8]
 8002306:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800230a:	6921      	ldr	r1, [r4, #16]
 800230c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002310:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002312:	f7ff ff05 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_RCC_ClockConfig+0x1a4>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800231e:	23f0      	movs	r3, #240	; 0xf0
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	4a0f      	ldr	r2, [pc, #60]	; (800236c <HAL_RCC_ClockConfig+0x1a8>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	40d8      	lsrs	r0, r3
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_RCC_ClockConfig+0x1ac>)
 8002334:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe fe0e 	bl	8000f58 <HAL_InitTick>
  
  return HAL_OK;
 800233c:	2000      	movs	r0, #0
 800233e:	bd70      	pop	{r4, r5, r6, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8002340:	2001      	movs	r0, #1
 8002342:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 8002344:	2001      	movs	r0, #1
 8002346:	bd70      	pop	{r4, r5, r6, pc}
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 8002348:	2001      	movs	r0, #1
 800234a:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 800234c:	2001      	movs	r0, #1
 800234e:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002350:	2003      	movs	r0, #3
 8002352:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002354:	2003      	movs	r0, #3
 8002356:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002358:	2003      	movs	r0, #3
 800235a:	bd70      	pop	{r4, r5, r6, pc}
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800235c:	2003      	movs	r0, #3
 800235e:	bd70      	pop	{r4, r5, r6, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8002360:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8002362:	bd70      	pop	{r4, r5, r6, pc}
 8002364:	40023c00 	.word	0x40023c00
 8002368:	40023800 	.word	0x40023800
 800236c:	08008778 	.word	0x08008778
 8002370:	20000000 	.word	0x20000000

08002374 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002374:	4b01      	ldr	r3, [pc, #4]	; (800237c <HAL_RCC_GetHCLKFreq+0x8>)
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000000 	.word	0x20000000

08002380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8002380:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002382:	f7ff fff7 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800238e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	fa22 f303 	lsr.w	r3, r2, r3
 800239e:	4a03      	ldr	r2, [pc, #12]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x2c>)
 80023a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80023a2:	40d8      	lsrs	r0, r3
 80023a4:	bd08      	pop	{r3, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08008778 	.word	0x08008778

080023b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80023b2:	f7ff ffdf 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80023be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a03      	ldr	r2, [pc, #12]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x2c>)
 80023d0:	5cd3      	ldrb	r3, [r2, r3]
} 
 80023d2:	40d8      	lsrs	r0, r3
 80023d4:	bd08      	pop	{r3, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	08008778 	.word	0x08008778

080023e0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023e4:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80023e6:	6801      	ldr	r1, [r0, #0]
 80023e8:	690b      	ldr	r3, [r1, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80023ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80023ee:	68c3      	ldr	r3, [r0, #12]
 80023f0:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80023f2:	610b      	str	r3, [r1, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80023f4:	6800      	ldr	r0, [r0, #0]
 80023f6:	68c3      	ldr	r3, [r0, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80023f8:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80023fc:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002400:	68a1      	ldr	r1, [r4, #8]
 8002402:	6923      	ldr	r3, [r4, #16]
 8002404:	4319      	orrs	r1, r3
 8002406:	6963      	ldr	r3, [r4, #20]
 8002408:	4319      	orrs	r1, r3
 800240a:	69e3      	ldr	r3, [r4, #28]
 800240c:	430b      	orrs	r3, r1
 800240e:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002410:	60c3      	str	r3, [r0, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002412:	6821      	ldr	r1, [r4, #0]
 8002414:	694b      	ldr	r3, [r1, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002416:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800241a:	69a3      	ldr	r3, [r4, #24]
 800241c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800241e:	614b      	str	r3, [r1, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002420:	69e3      	ldr	r3, [r4, #28]
 8002422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002426:	f040 80bb 	bne.w	80025a0 <UART_SetConfig+0x1c0>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800242a:	6827      	ldr	r7, [r4, #0]
 800242c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002430:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002434:	429f      	cmp	r7, r3
 8002436:	d003      	beq.n	8002440 <UART_SetConfig+0x60>
 8002438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800243c:	429f      	cmp	r7, r3
 800243e:	d157      	bne.n	80024f0 <UART_SetConfig+0x110>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002440:	f7ff ffb6 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 8002444:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002448:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800244c:	6865      	ldr	r5, [r4, #4]
 800244e:	006d      	lsls	r5, r5, #1
 8002450:	fbb0 f5f5 	udiv	r5, r0, r5
 8002454:	4eab      	ldr	r6, [pc, #684]	; (8002704 <UART_SetConfig+0x324>)
 8002456:	fba6 3505 	umull	r3, r5, r6, r5
 800245a:	096d      	lsrs	r5, r5, #5
 800245c:	012d      	lsls	r5, r5, #4
 800245e:	f7ff ffa7 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 8002462:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002466:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800246a:	6863      	ldr	r3, [r4, #4]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fbb0 f9f3 	udiv	r9, r0, r3
 8002472:	f7ff ff9d 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 8002476:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800247a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800247e:	6863      	ldr	r3, [r4, #4]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	fba6 2303 	umull	r2, r3, r6, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002490:	fb08 9313 	mls	r3, r8, r3, r9
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	3332      	adds	r3, #50	; 0x32
 8002498:	fba6 2303 	umull	r2, r3, r6, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024a4:	441d      	add	r5, r3
 80024a6:	f7ff ff83 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 80024aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024b2:	6863      	ldr	r3, [r4, #4]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fbb0 f9f3 	udiv	r9, r0, r3
 80024ba:	f7ff ff79 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 80024be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024c6:	6863      	ldr	r3, [r4, #4]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ce:	fba6 2303 	umull	r2, r3, r6, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	fb08 9813 	mls	r8, r8, r3, r9
 80024d8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80024dc:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80024e0:	fba6 3608 	umull	r3, r6, r6, r8
 80024e4:	f3c6 1642 	ubfx	r6, r6, #5, #3
 80024e8:	4435      	add	r5, r6
 80024ea:	60bd      	str	r5, [r7, #8]
 80024ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024f0:	f7ff ff46 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 80024f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024fc:	6865      	ldr	r5, [r4, #4]
 80024fe:	006d      	lsls	r5, r5, #1
 8002500:	fbb0 f5f5 	udiv	r5, r0, r5
 8002504:	4e7f      	ldr	r6, [pc, #508]	; (8002704 <UART_SetConfig+0x324>)
 8002506:	fba6 3505 	umull	r3, r5, r6, r5
 800250a:	096d      	lsrs	r5, r5, #5
 800250c:	012d      	lsls	r5, r5, #4
 800250e:	f7ff ff37 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 8002512:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002516:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800251a:	6863      	ldr	r3, [r4, #4]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fbb0 f9f3 	udiv	r9, r0, r3
 8002522:	f7ff ff2d 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 8002526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800252a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800252e:	6863      	ldr	r3, [r4, #4]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fbb0 f3f3 	udiv	r3, r0, r3
 8002536:	fba6 2303 	umull	r2, r3, r6, r3
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002540:	fb08 9313 	mls	r3, r8, r3, r9
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	3332      	adds	r3, #50	; 0x32
 8002548:	fba6 2303 	umull	r2, r3, r6, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002554:	441d      	add	r5, r3
 8002556:	f7ff ff13 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 800255a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800255e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002562:	6863      	ldr	r3, [r4, #4]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fbb0 f9f3 	udiv	r9, r0, r3
 800256a:	f7ff ff09 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 800256e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002572:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002576:	6863      	ldr	r3, [r4, #4]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fbb0 f3f3 	udiv	r3, r0, r3
 800257e:	fba6 2303 	umull	r2, r3, r6, r3
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	fb08 9813 	mls	r8, r8, r3, r9
 8002588:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800258c:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002590:	fba6 3608 	umull	r3, r6, r6, r8
 8002594:	f3c6 1642 	ubfx	r6, r6, #5, #3
 8002598:	4435      	add	r5, r6
 800259a:	60bd      	str	r5, [r7, #8]
 800259c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80025a0:	6826      	ldr	r6, [r4, #0]
 80025a2:	4b59      	ldr	r3, [pc, #356]	; (8002708 <UART_SetConfig+0x328>)
 80025a4:	429e      	cmp	r6, r3
 80025a6:	d003      	beq.n	80025b0 <UART_SetConfig+0x1d0>
 80025a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ac:	429e      	cmp	r6, r3
 80025ae:	d154      	bne.n	800265a <UART_SetConfig+0x27a>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80025b0:	f7ff fefe 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 80025b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025bc:	6865      	ldr	r5, [r4, #4]
 80025be:	00ad      	lsls	r5, r5, #2
 80025c0:	fbb0 f5f5 	udiv	r5, r0, r5
 80025c4:	4f4f      	ldr	r7, [pc, #316]	; (8002704 <UART_SetConfig+0x324>)
 80025c6:	fba7 3505 	umull	r3, r5, r7, r5
 80025ca:	096d      	lsrs	r5, r5, #5
 80025cc:	012d      	lsls	r5, r5, #4
 80025ce:	f7ff feef 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 80025d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025da:	6863      	ldr	r3, [r4, #4]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	fbb0 f8f3 	udiv	r8, r0, r3
 80025e2:	f7ff fee5 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 80025e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025ee:	6863      	ldr	r3, [r4, #4]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	fba7 2303 	umull	r2, r3, r7, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002600:	fb09 8313 	mls	r3, r9, r3, r8
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	3332      	adds	r3, #50	; 0x32
 8002608:	fba7 2303 	umull	r2, r3, r7, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002612:	441d      	add	r5, r3
 8002614:	f7ff fecc 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 8002618:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800261c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002620:	6863      	ldr	r3, [r4, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	fbb0 f8f3 	udiv	r8, r0, r3
 8002628:	f7ff fec2 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 800262c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002634:	6863      	ldr	r3, [r4, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fbb0 f3f3 	udiv	r3, r0, r3
 800263c:	fba7 2303 	umull	r2, r3, r7, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	fb09 8313 	mls	r3, r9, r3, r8
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	3332      	adds	r3, #50	; 0x32
 800264a:	fba7 2303 	umull	r2, r3, r7, r3
 800264e:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002652:	441d      	add	r5, r3
 8002654:	60b5      	str	r5, [r6, #8]
 8002656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800265a:	f7ff fe91 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 800265e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002662:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002666:	6865      	ldr	r5, [r4, #4]
 8002668:	00ad      	lsls	r5, r5, #2
 800266a:	fbb0 f5f5 	udiv	r5, r0, r5
 800266e:	4f25      	ldr	r7, [pc, #148]	; (8002704 <UART_SetConfig+0x324>)
 8002670:	fba7 3505 	umull	r3, r5, r7, r5
 8002674:	096d      	lsrs	r5, r5, #5
 8002676:	012d      	lsls	r5, r5, #4
 8002678:	f7ff fe82 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 800267c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002680:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002684:	6863      	ldr	r3, [r4, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fbb0 f8f3 	udiv	r8, r0, r3
 800268c:	f7ff fe78 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 8002690:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002694:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002698:	6863      	ldr	r3, [r4, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a0:	fba7 2303 	umull	r2, r3, r7, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80026aa:	fb09 8313 	mls	r3, r9, r3, r8
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	3332      	adds	r3, #50	; 0x32
 80026b2:	fba7 2303 	umull	r2, r3, r7, r3
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026bc:	441d      	add	r5, r3
 80026be:	f7ff fe5f 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 80026c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026ca:	6863      	ldr	r3, [r4, #4]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	fbb0 f8f3 	udiv	r8, r0, r3
 80026d2:	f7ff fe55 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 80026d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026de:	6863      	ldr	r3, [r4, #4]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	fba7 2303 	umull	r2, r3, r7, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	fb09 8313 	mls	r3, r9, r3, r8
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	3332      	adds	r3, #50	; 0x32
 80026f4:	fba7 2303 	umull	r2, r3, r7, r3
 80026f8:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80026fc:	441d      	add	r5, r3
 80026fe:	60b5      	str	r5, [r6, #8]
 8002700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002704:	51eb851f 	.word	0x51eb851f
 8002708:	40011000 	.word	0x40011000

0800270c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
 800270c:	b368      	cbz	r0, 800276a <HAL_UART_Init+0x5e>
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800270e:	b510      	push	{r4, lr}
 8002710:	4604      	mov	r4, r0
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002712:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002716:	f013 0fff 	tst.w	r3, #255	; 0xff
 800271a:	d104      	bne.n	8002726 <HAL_UART_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271c:	2300      	movs	r3, #0
 800271e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002722:	f002 f93f 	bl	80049a4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002726:	2324      	movs	r3, #36	; 0x24
 8002728:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800272c:	6822      	ldr	r2, [r4, #0]
 800272e:	68d3      	ldr	r3, [r2, #12]
 8002730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002734:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002736:	4620      	mov	r0, r4
 8002738:	f7ff fe52 	bl	80023e0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800273c:	6822      	ldr	r2, [r4, #0]
 800273e:	6913      	ldr	r3, [r2, #16]
 8002740:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002744:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002746:	6822      	ldr	r2, [r4, #0]
 8002748:	6953      	ldr	r3, [r2, #20]
 800274a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800274e:	6153      	str	r3, [r2, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	68d3      	ldr	r3, [r2, #12]
 8002754:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002758:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275a:	2000      	movs	r0, #0
 800275c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800275e:	2320      	movs	r3, #32
 8002760:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002764:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8002768:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 800276a:	2001      	movs	r0, #1
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002770:	b084      	sub	sp, #16
 8002772:	b510      	push	{r4, lr}
 8002774:	4604      	mov	r4, r0
 8002776:	a803      	add	r0, sp, #12
 8002778:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800277c:	9b08      	ldr	r3, [sp, #32]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d118      	bne.n	80027b4 <USB_CoreInit+0x44>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002782:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002788:	63a3      	str	r3, [r4, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800278a:	68e3      	ldr	r3, [r4, #12]
 800278c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002794:	60e3      	str	r3, [r4, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002796:	68e3      	ldr	r3, [r4, #12]
 8002798:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800279c:	60e3      	str	r3, [r4, #12]
    if(cfg.use_external_vbus == 1U)
 800279e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d103      	bne.n	80027ac <USB_CoreInit+0x3c>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80027a4:	68e3      	ldr	r3, [r4, #12]
 80027a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027aa:	60e3      	str	r3, [r4, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80027ac:	4620      	mov	r0, r4
 80027ae:	f000 f88f 	bl	80028d0 <USB_CoreReset>
 80027b2:	e009      	b.n	80027c8 <USB_CoreInit+0x58>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80027b4:	68e3      	ldr	r3, [r4, #12]
 80027b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ba:	60e3      	str	r3, [r4, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 80027bc:	4620      	mov	r0, r4
 80027be:	f000 f887 	bl	80028d0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80027c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c6:	63a3      	str	r3, [r4, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 80027c8:	9b06      	ldr	r3, [sp, #24]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d103      	bne.n	80027d6 <USB_CoreInit+0x66>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80027ce:	68a3      	ldr	r3, [r4, #8]
 80027d0:	f043 0320 	orr.w	r3, r3, #32
 80027d4:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 80027d6:	2000      	movs	r0, #0
 80027d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027dc:	b004      	add	sp, #16
 80027de:	4770      	bx	lr

080027e0 <USB_EnableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80027e0:	6883      	ldr	r3, [r0, #8]
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80027e8:	2000      	movs	r0, #0
 80027ea:	4770      	bx	lr

080027ec <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80027ec:	6883      	ldr	r3, [r0, #8]
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80027f4:	2000      	movs	r0, #0
 80027f6:	4770      	bx	lr

080027f8 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80027f8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80027fa:	68c3      	ldr	r3, [r0, #12]
 80027fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002800:	60c3      	str	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002802:	2901      	cmp	r1, #1
 8002804:	d104      	bne.n	8002810 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002806:	68c3      	ldr	r3, [r0, #12]
 8002808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800280c:	60c3      	str	r3, [r0, #12]
 800280e:	e004      	b.n	800281a <USB_SetCurrentMode+0x22>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002810:	b919      	cbnz	r1, 800281a <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002812:	68c3      	ldr	r3, [r0, #12]
 8002814:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002818:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50U);
 800281a:	2032      	movs	r0, #50	; 0x32
 800281c:	f7fe fbda 	bl	8000fd4 <HAL_Delay>
  
  return HAL_OK;
}
 8002820:	2000      	movs	r0, #0
 8002822:	bd08      	pop	{r3, pc}

08002824 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0U;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002824:	0189      	lsls	r1, r1, #6
 8002826:	f041 0120 	orr.w	r1, r1, #32
 800282a:	6101      	str	r1, [r0, #16]
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0U;
 800282c:	2300      	movs	r3, #0
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 
  do
  {
    if (++count > 200000U)
 800282e:	3301      	adds	r3, #1
 8002830:	4a05      	ldr	r2, [pc, #20]	; (8002848 <USB_FlushTxFifo+0x24>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d805      	bhi.n	8002842 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002836:	6902      	ldr	r2, [r0, #16]
 8002838:	f012 0f20 	tst.w	r2, #32
 800283c:	d1f7      	bne.n	800282e <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 800283e:	2000      	movs	r0, #0
 8002840:	4770      	bx	lr
 
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8002842:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
  
  return HAL_OK;
}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	00030d40 	.word	0x00030d40

0800284c <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800284c:	2310      	movs	r3, #16
 800284e:	6103      	str	r3, [r0, #16]
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8002850:	2300      	movs	r3, #0
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
  
  do
  {
    if (++count > 200000U)
 8002852:	3301      	adds	r3, #1
 8002854:	4a05      	ldr	r2, [pc, #20]	; (800286c <USB_FlushRxFifo+0x20>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d805      	bhi.n	8002866 <USB_FlushRxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800285a:	6902      	ldr	r2, [r0, #16]
 800285c:	f012 0f10 	tst.w	r2, #16
 8002860:	d1f7      	bne.n	8002852 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002862:	2000      	movs	r0, #0
 8002864:	4770      	bx	lr
  
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8002866:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
  
  return HAL_OK;
}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	00030d40 	.word	0x00030d40

08002870 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002870:	b470      	push	{r4, r5, r6}
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8002872:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8002876:	b96c      	cbnz	r4, 8002894 <USB_WritePacket+0x24>
  {
    count32b =  (len + 3U) / 4U;
 8002878:	3303      	adds	r3, #3
 800287a:	089b      	lsrs	r3, r3, #2
    for (i = 0U; i < count32b; i++, src += 4U)
 800287c:	2500      	movs	r5, #0
 800287e:	e007      	b.n	8002890 <USB_WritePacket+0x20>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002880:	eb00 3402 	add.w	r4, r0, r2, lsl #12
 8002884:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8002888:	f851 6b04 	ldr.w	r6, [r1], #4
 800288c:	6026      	str	r6, [r4, #0]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 800288e:	3501      	adds	r5, #1
 8002890:	429d      	cmp	r5, r3
 8002892:	d3f5      	bcc.n	8002880 <USB_WritePacket+0x10>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
    }
  }
  return HAL_OK;
}
 8002894:	2000      	movs	r0, #0
 8002896:	bc70      	pop	{r4, r5, r6}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop

0800289c <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800289c:	b410      	push	{r4}
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 800289e:	3203      	adds	r2, #3
 80028a0:	0892      	lsrs	r2, r2, #2
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80028a2:	2300      	movs	r3, #0
 80028a4:	e005      	b.n	80028b2 <USB_ReadPacket+0x16>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80028a6:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80028aa:	6824      	ldr	r4, [r4, #0]
 80028ac:	f841 4b04 	str.w	r4, [r1], #4
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80028b0:	3301      	adds	r3, #1
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d3f7      	bcc.n	80028a6 <USB_ReadPacket+0xa>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
    
  }
  return ((void *)dest);
}
 80028b6:	4608      	mov	r0, r1
 80028b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop

080028c0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 80028c0:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80028c2:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 80028c4:	4010      	ands	r0, r2
 80028c6:	4770      	bx	lr

080028c8 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 80028c8:	6940      	ldr	r0, [r0, #20]
}
 80028ca:	f000 0001 	and.w	r0, r0, #1
 80028ce:	4770      	bx	lr

080028d0 <USB_CoreReset>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80028d0:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80028d2:	3301      	adds	r3, #1
 80028d4:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <USB_CoreReset+0x38>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d811      	bhi.n	80028fe <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80028da:	6902      	ldr	r2, [r0, #16]
 80028dc:	2a00      	cmp	r2, #0
 80028de:	daf8      	bge.n	80028d2 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80028e0:	6903      	ldr	r3, [r0, #16]
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6103      	str	r3, [r0, #16]
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
  
  /* Core Soft Reset */
  count = 0U;
 80028e8:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 80028ea:	3301      	adds	r3, #1
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <USB_CoreReset+0x38>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d807      	bhi.n	8002902 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80028f2:	6902      	ldr	r2, [r0, #16]
 80028f4:	f012 0f01 	tst.w	r2, #1
 80028f8:	d1f7      	bne.n	80028ea <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80028fa:	2000      	movs	r0, #0
 80028fc:	4770      	bx	lr
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 80028fe:	2003      	movs	r0, #3
 8002900:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8002902:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
  
  return HAL_OK;
}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	00030d40 	.word	0x00030d40

0800290c <USB_HostInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800290c:	b084      	sub	sp, #16
 800290e:	b538      	push	{r3, r4, r5, lr}
 8002910:	4604      	mov	r4, r0
 8002912:	a805      	add	r0, sp, #20
 8002914:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002918:	4625      	mov	r5, r4
 800291a:	2300      	movs	r3, #0
 800291c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 8002920:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 8002928:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800292a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800292e:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002930:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002936:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8002938:	9b07      	ldr	r3, [sp, #28]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d109      	bne.n	8002952 <USB_HostInit+0x46>
 800293e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8002942:	d006      	beq.n	8002952 <USB_HostInit+0x46>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8002944:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8002950:	e005      	b.n	800295e <USB_HostInit+0x52>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8002952:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002956:	f023 0304 	bic.w	r3, r3, #4
 800295a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800295e:	2110      	movs	r1, #16
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff ff5f 	bl	8002824 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff ff70 	bl	800284c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800296c:	2200      	movs	r2, #0
 800296e:	e009      	b.n	8002984 <USB_HostInit+0x78>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002970:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 8002974:	f04f 31ff 	mov.w	r1, #4294967295
 8002978:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 800297c:	2100      	movs	r1, #0
 800297e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8002982:	3201      	adds	r2, #1
 8002984:	9b06      	ldr	r3, [sp, #24]
 8002986:	429a      	cmp	r2, r3
 8002988:	d3f2      	bcc.n	8002970 <USB_HostInit+0x64>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
    USBx_HC(i)->HCINTMSK = 0U;
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 800298a:	2101      	movs	r1, #1
 800298c:	4620      	mov	r0, r4
 800298e:	f000 f86d 	bl	8002a6c <USB_DriveVbus>
  
  HAL_Delay(200U);
 8002992:	20c8      	movs	r0, #200	; 0xc8
 8002994:	f7fe fb1e 	bl	8000fd4 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800299c:	f04f 33ff 	mov.w	r3, #4294967295
 80029a0:	6163      	str	r3, [r4, #20]
  
  if(USBx == USB_OTG_FS)
 80029a2:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80029a6:	d108      	bne.n	80029ba <USB_HostInit+0xae>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x80U; 
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 80029ac:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80029b0:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <USB_HostInit+0xe0>)
 80029b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80029b8:	e008      	b.n	80029cc <USB_HostInit+0xc0>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x200U; 
 80029ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029be:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 80029c0:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80029c4:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <USB_HostInit+0xe4>)
 80029c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80029cc:	9b08      	ldr	r3, [sp, #32]
 80029ce:	b91b      	cbnz	r3, 80029d8 <USB_HostInit+0xcc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80029d0:	69a3      	ldr	r3, [r4, #24]
 80029d2:	f043 0310 	orr.w	r3, r3, #16
 80029d6:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80029d8:	69a2      	ldr	r2, [r4, #24]
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <USB_HostInit+0xe8>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 80029e0:	2000      	movs	r0, #0
 80029e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029e6:	b004      	add	sp, #16
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	004000e0 	.word	0x004000e0
 80029f0:	00e00300 	.word	0x00e00300
 80029f4:	a3200008 	.word	0xa3200008

080029f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 80029f8:	b410      	push	{r4}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80029fa:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80029fe:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8002a0a:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002a0e:	f001 0203 	and.w	r2, r1, #3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  
  if (freq ==  HCFG_48_MHZ)
 8002a18:	2901      	cmp	r1, #1
 8002a1a:	d103      	bne.n	8002a24 <USB_InitFSLSPClkSel+0x2c>
  {
    USBx_HOST->HFIR = (uint32_t)48000U;
 8002a1c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002a20:	6063      	str	r3, [r4, #4]
 8002a22:	e004      	b.n	8002a2e <USB_InitFSLSPClkSel+0x36>
  }
  else if (freq ==  HCFG_6_MHZ)
 8002a24:	2902      	cmp	r1, #2
 8002a26:	d102      	bne.n	8002a2e <USB_InitFSLSPClkSel+0x36>
  {
    USBx_HOST->HFIR = (uint32_t)6000U;
 8002a28:	f241 7370 	movw	r3, #6000	; 0x1770
 8002a2c:	6063      	str	r3, [r4, #4]
  } 
  return HAL_OK;  
}
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop

08002a38 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	4604      	mov	r4, r0
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8002a3e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002a42:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8002a44:	9b01      	ldr	r3, [sp, #4]
 8002a46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a4a:	9301      	str	r3, [sp, #4]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8002a4c:	9b01      	ldr	r3, [sp, #4]
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a52:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 8002a56:	200a      	movs	r0, #10
 8002a58:	f7fe fabc 	bl	8000fd4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8002a5c:	9b01      	ldr	r3, [sp, #4]
 8002a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a62:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  return HAL_OK;
}
 8002a66:	2000      	movs	r0, #0
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd10      	pop	{r4, pc}

08002a6c <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002a6c:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8002a6e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002a72:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8002a74:	9b01      	ldr	r3, [sp, #4]
 8002a76:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a7a:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002a7c:	9b01      	ldr	r3, [sp, #4]
 8002a7e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002a82:	d106      	bne.n	8002a92 <USB_DriveVbus+0x26>
 8002a84:	2901      	cmp	r1, #1
 8002a86:	d104      	bne.n	8002a92 <USB_DriveVbus+0x26>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8002a88:	9b01      	ldr	r3, [sp, #4]
 8002a8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a8e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002a98:	d005      	beq.n	8002aa6 <USB_DriveVbus+0x3a>
 8002a9a:	b921      	cbnz	r1, 8002aa6 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8002a9c:	9b01      	ldr	r3, [sp, #4]
 8002a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aa2:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	b002      	add	sp, #8
 8002aaa:	4770      	bx	lr

08002aac <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8002aac:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8002aae:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002ab2:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8002ab4:	9801      	ldr	r0, [sp, #4]
}
 8002ab6:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8002aba:	b002      	add	sp, #8
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop

08002ac0 <USB_GetCurrentFrame>:
  * @param  USBx : Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002ac0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002ac4:	6880      	ldr	r0, [r0, #8]
}
 8002ac6:	b280      	uxth	r0, r0
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ace:	f89d 4018 	ldrb.w	r4, [sp, #24]
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8002ad2:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8002ad6:	f505 66a0 	add.w	r6, r5, #1280	; 0x500
 8002ada:	f04f 37ff 	mov.w	r7, #4294967295
 8002ade:	60b7      	str	r7, [r6, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8002ae0:	2c03      	cmp	r4, #3
 8002ae2:	d82b      	bhi.n	8002b3c <USB_HC_Init+0x70>
 8002ae4:	e8df f004 	tbb	[pc, r4]
 8002ae8:	15022002 	.word	0x15022002
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002aec:	f240 479d 	movw	r7, #1181	; 0x49d
 8002af0:	60f7      	str	r7, [r6, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 8002af2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002af6:	d004      	beq.n	8002b02 <USB_HC_Init+0x36>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002af8:	68f7      	ldr	r7, [r6, #12]
 8002afa:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8002afe:	60f7      	str	r7, [r6, #12]
 8002b00:	e01c      	b.n	8002b3c <USB_HC_Init+0x70>
    } 
    else 
    {
      if(USBx != USB_OTG_FS)
 8002b02:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002b06:	d019      	beq.n	8002b3c <USB_HC_Init+0x70>
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002b08:	68f7      	ldr	r7, [r6, #12]
 8002b0a:	f047 0760 	orr.w	r7, r7, #96	; 0x60
 8002b0e:	60f7      	str	r7, [r6, #12]
 8002b10:	e014      	b.n	8002b3c <USB_HC_Init+0x70>
    }
    break;
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002b12:	f240 679d 	movw	r7, #1693	; 0x69d
 8002b16:	60f7      	str	r7, [r6, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 8002b18:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b1c:	d00e      	beq.n	8002b3c <USB_HC_Init+0x70>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002b1e:	68f7      	ldr	r7, [r6, #12]
 8002b20:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8002b24:	60f7      	str	r7, [r6, #12]
 8002b26:	e009      	b.n	8002b3c <USB_HC_Init+0x70>
    }
    
    break;
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002b28:	f240 2725 	movw	r7, #549	; 0x225
 8002b2c:	60f7      	str	r7, [r6, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 8002b2e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b32:	d003      	beq.n	8002b3c <USB_HC_Init+0x70>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8002b34:	68f7      	ldr	r7, [r6, #12]
 8002b36:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
 8002b3a:	60f7      	str	r7, [r6, #12]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8002b3c:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8002b40:	f8d0 6418 	ldr.w	r6, [r0, #1048]	; 0x418
 8002b44:	2701      	movs	r7, #1
 8002b46:	fa07 f101 	lsl.w	r1, r7, r1
 8002b4a:	4331      	orrs	r1, r6
 8002b4c:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002b50:	6981      	ldr	r1, [r0, #24]
 8002b52:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002b56:	6181      	str	r1, [r0, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8002b58:	059b      	lsls	r3, r3, #22
 8002b5a:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8002b5e:	02d1      	lsls	r1, r2, #11
 8002b60:	f401 41f0 	and.w	r1, r1, #30720	; 0x7800
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8002b64:	430b      	orrs	r3, r1
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8002b66:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b6a:	d002      	beq.n	8002b72 <USB_HC_Init+0xa6>
 8002b6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b70:	e000      	b.n	8002b74 <USB_HC_Init+0xa8>
 8002b72:	2200      	movs	r2, #0
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8002b74:	4313      	orrs	r3, r2
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8002b76:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002b7a:	2a02      	cmp	r2, #2
 8002b7c:	d102      	bne.n	8002b84 <USB_HC_Init+0xb8>
 8002b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b82:	e000      	b.n	8002b86 <USB_HC_Init+0xba>
 8002b84:	2200      	movs	r2, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8002b86:	4313      	orrs	r3, r2
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8002b88:	04a2      	lsls	r2, r4, #18
 8002b8a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8002b8e:	4313      	orrs	r3, r2
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8002b90:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8002b94:	f3c2 020a 	ubfx	r2, r2, #0, #11
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8002b98:	4313      	orrs	r3, r2
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8002b9a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
    
  if (ep_type == EP_TYPE_INTR)
 8002b9e:	2c03      	cmp	r4, #3
 8002ba0:	d105      	bne.n	8002bae <USB_HC_Init+0xe2>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002ba2:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 8002ba6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002baa:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  }

  return HAL_OK; 
}
 8002bae:	2000      	movs	r0, #0
 8002bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bb2:	bf00      	nop

08002bb4 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0U; 
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0U;   
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256U;
 8002bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd2:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bde:	d02b      	beq.n	8002c38 <USB_HC_StartXfer+0x84>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	791b      	ldrb	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d127      	bne.n	8002c38 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0U) && (hc->do_ping == 1U))
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10b      	bne.n	8002c06 <USB_HC_StartXfer+0x52>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	795b      	ldrb	r3, [r3, #5]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fa0b 	bl	8003018 <USB_DoPing>
      return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e10d      	b.n	8002e22 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1U)
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d115      	bne.n	8002c38 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	785b      	ldrb	r3, [r3, #1]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	785b      	ldrb	r3, [r3, #1]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002c30:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2200      	movs	r2, #0
 8002c36:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d019      	beq.n	8002c74 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	8912      	ldrh	r2, [r2, #8]
 8002c48:	4413      	add	r3, r2
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	8912      	ldrh	r2, [r2, #8]
 8002c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c54:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 8002c56:	8bfa      	ldrh	r2, [r7, #30]
 8002c58:	8b3b      	ldrh	r3, [r7, #24]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d90c      	bls.n	8002c78 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8002c5e:	8b3b      	ldrh	r3, [r7, #24]
 8002c60:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 8002c62:	8bfb      	ldrh	r3, [r7, #30]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	8912      	ldrh	r2, [r2, #8]
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	611a      	str	r2, [r3, #16]
 8002c72:	e001      	b.n	8002c78 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8002c74:	2301      	movs	r3, #1
 8002c76:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	78db      	ldrb	r3, [r3, #3]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8002c80:	8bfb      	ldrh	r3, [r7, #30]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	8912      	ldrh	r2, [r2, #8]
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8002ca8:	8bfb      	ldrh	r3, [r7, #30]
 8002caa:	04db      	lsls	r3, r3, #19
  {
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8002cac:	4618      	mov	r0, r3
 8002cae:	4b5f      	ldr	r3, [pc, #380]	; (8002e2c <USB_HC_StartXfer+0x278>)
 8002cb0:	4003      	ands	r3, r0
 8002cb2:	431a      	orrs	r2, r3
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	7a9b      	ldrb	r3, [r3, #10]
 8002cb8:	075b      	lsls	r3, r3, #29
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8002cba:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002cbe:	4313      	orrs	r3, r2
  {
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8002cc0:	610b      	str	r3, [r1, #16]
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
  
  if (dma)
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01U) ? 0U : 1U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	785b      	ldrb	r3, [r3, #1]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	4619      	mov	r1, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002d1a:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29U);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	7f7a      	ldrb	r2, [r7, #29]
 8002d3e:	0752      	lsls	r2, r2, #29
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	785b      	ldrb	r3, [r3, #1]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d64:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	461a      	mov	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6013      	str	r3, [r2, #0]
  
  if (dma == 0U) /* Slave mode */
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d14f      	bne.n	8002e20 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	78db      	ldrb	r3, [r3, #3]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d14b      	bne.n	8002e20 <USB_HC_StartXfer+0x26c>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d047      	beq.n	8002e20 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	79db      	ldrb	r3, [r3, #7]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d831      	bhi.n	8002dfc <USB_HC_StartXfer+0x248>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <USB_HC_StartXfer+0x1ec>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002dd5 	.word	0x08002dd5
 8002da8:	08002db1 	.word	0x08002db1
 8002dac:	08002dd5 	.word	0x08002dd5
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3U) / 4U;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	3303      	adds	r3, #3
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002dba:	8b7a      	ldrh	r2, [r7, #26]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d91c      	bls.n	8002e00 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	619a      	str	r2, [r3, #24]
        }
        break;
 8002dd2:	e015      	b.n	8002e00 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3U) / 4U;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	3303      	adds	r3, #3
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002dde:	8b7a      	ldrh	r2, [r7, #26]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d90a      	bls.n	8002e04 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	619a      	str	r2, [r3, #24]
        }
        break;
 8002dfa:	e003      	b.n	8002e04 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8002dfc:	bf00      	nop
 8002dfe:	e002      	b.n	8002e06 <USB_HC_StartXfer+0x252>
        if(len_words > (USBx->HNPTXSTS & 0xFFFFU))
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
        }
        break;
 8002e00:	bf00      	nop
 8002e02:	e000      	b.n	8002e06 <USB_HC_StartXfer+0x252>
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
        }
        break;
 8002e04:	bf00      	nop
      default:
        break;
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	68d9      	ldr	r1, [r3, #12]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	785a      	ldrb	r2, [r3, #1]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	b298      	uxth	r0, r3
 8002e14:	2300      	movs	r3, #0
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4603      	mov	r3, r0
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff fd28 	bl	8002870 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	1ff80000 	.word	0x1ff80000

08002e30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	b29b      	uxth	r3, r3
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <USB_HC_Halt>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e72:	0c9b      	lsrs	r3, r3, #18
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <USB_HC_Halt+0x40>
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8002e8a:	0c9b      	lsrs	r3, r3, #18
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
  uint32_t count = 0U;
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d15d      	bne.n	8002f4c <USB_HC_Halt+0xfc>
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eb0:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d132      	bne.n	8002f24 <USB_HC_Halt+0xd4>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	4619      	mov	r1, r3
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ede:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	4619      	mov	r1, r3
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f00:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3301      	adds	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f0e:	d81b      	bhi.n	8002f48 <USB_HC_Halt+0xf8>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	dbef      	blt.n	8002f02 <USB_HC_Halt+0xb2>
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8002f22:	e071      	b.n	8003008 <USB_HC_Halt+0x1b8>
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	4619      	mov	r1, r3
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f44:	600b      	str	r3, [r1, #0]
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8002f46:	e05f      	b.n	8003008 <USB_HC_Halt+0x1b8>
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
      do 
      {
        if (++count > 1000U) 
        {
          break;
 8002f48:	bf00      	nop
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8002f4a:	e05d      	b.n	8003008 <USB_HC_Halt+0x1b8>
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	4619      	mov	r1, r3
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f6c:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d132      	bne.n	8002fe2 <USB_HC_Halt+0x192>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	4619      	mov	r1, r3
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f9c:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002faa:	4619      	mov	r1, r3
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fbe:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fcc:	d81b      	bhi.n	8003006 <USB_HC_Halt+0x1b6>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	dbef      	blt.n	8002fc0 <USB_HC_Halt+0x170>
 8002fe0:	e012      	b.n	8003008 <USB_HC_Halt+0x1b8>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	4619      	mov	r1, r3
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e000      	b.n	8003008 <USB_HC_Halt+0x1b8>
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
      do 
      {
        if (++count > 1000U) 
        {
          break;
 8003006:	bf00      	nop
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
    }
  }
  
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop

08003018 <USB_DoPing>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	04db      	lsls	r3, r3, #19
 800303e:	4619      	mov	r1, r3
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <USB_DoPing+0x74>)
 8003042:	400b      	ands	r3, r1
 8003044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003048:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003060:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003068:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	461a      	mov	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	1ff80000 	.word	0x1ff80000

08003090 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx : Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff fba5 	bl	80027ec <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 80030a2:	2110      	movs	r1, #16
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff fbbd 	bl	8002824 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff fbce 	bl	800284c <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]
 80030b4:	e01f      	b.n	80030f6 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030cc:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030d4:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030dc:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6013      	str	r3, [r2, #0]
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
  USB_FlushRxFifo(USBx);
  
  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	3301      	adds	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
 80030f8:	2b0f      	cmp	r3, #15
 80030fa:	d9dc      	bls.n	80030b6 <USB_StopHost+0x26>
    value &= ~USB_OTG_HCCHAR_EPDIR;
    USBx_HC(i)->HCCHAR = value;
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0U; i <= 15U; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	75fb      	strb	r3, [r7, #23]
 8003100:	e031      	b.n	8003166 <USB_StopHost+0xd6>
  {
    value = USBx_HC(i)->HCCHAR ;
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003118:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003120:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003128:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 800312a:	7dfb      	ldrb	r3, [r7, #23]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	3301      	adds	r3, #1
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003148:	d809      	bhi.n	800315e <USB_StopHost+0xce>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	dbef      	blt.n	800313c <USB_StopHost+0xac>
 800315c:	e000      	b.n	8003160 <USB_StopHost+0xd0>
    USBx_HC(i)->HCCHAR = value;
    do 
    {
      if (++count > 1000U) 
      {
        break;
 800315e:	bf00      	nop
    value &= ~USB_OTG_HCCHAR_EPDIR;
    USBx_HC(i)->HCCHAR = value;
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0U; i <= 15U; i++)
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	3301      	adds	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	2b0f      	cmp	r3, #15
 800316a:	d9ca      	bls.n	8003102 <USB_StopHost+0x72>
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003172:	461a      	mov	r2, r3
 8003174:	f04f 33ff 	mov.w	r3, #4294967295
 8003178:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fb2c 	bl	80027e0 <USB_EnableGlobalInt>
  return HAL_OK;  
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop

08003194 <USBH_HID_SOFProcess>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8003194:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003198:	69db      	ldr	r3, [r3, #28]
  
  if(HID_Handle->state == HID_POLL)
 800319a:	789a      	ldrb	r2, [r3, #2]
 800319c:	2a06      	cmp	r2, #6
 800319e:	d108      	bne.n	80031b2 <USBH_HID_SOFProcess+0x1e>
  {
    if(( phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80031a0:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 80031a4:	6a19      	ldr	r1, [r3, #32]
 80031a6:	1a52      	subs	r2, r2, r1
 80031a8:	8b99      	ldrh	r1, [r3, #28]
 80031aa:	428a      	cmp	r2, r1
 80031ac:	d301      	bcc.n	80031b2 <USBH_HID_SOFProcess+0x1e>
    {
      HID_Handle->state = HID_GET_DATA;
 80031ae:	2204      	movs	r2, #4
 80031b0:	709a      	strb	r2, [r3, #2]
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
  }
  return USBH_OK;
}
 80031b2:	2000      	movs	r0, #0
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop

080031b8 <USBH_HID_ParseHIDDesc>:
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc (HID_DescTypeDef *desc, uint8_t *buf)
{
  
  desc->bLength                  = *(uint8_t  *) (buf + 0);
 80031b8:	780b      	ldrb	r3, [r1, #0]
 80031ba:	7003      	strb	r3, [r0, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 80031bc:	784b      	ldrb	r3, [r1, #1]
 80031be:	7043      	strb	r3, [r0, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 80031c0:	788b      	ldrb	r3, [r1, #2]
 80031c2:	78ca      	ldrb	r2, [r1, #3]
 80031c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80031c8:	8043      	strh	r3, [r0, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 80031ca:	790b      	ldrb	r3, [r1, #4]
 80031cc:	7103      	strb	r3, [r0, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 80031ce:	794b      	ldrb	r3, [r1, #5]
 80031d0:	7143      	strb	r3, [r0, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 80031d2:	798b      	ldrb	r3, [r1, #6]
 80031d4:	7183      	strb	r3, [r0, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 80031d6:	79cb      	ldrb	r3, [r1, #7]
 80031d8:	7a0a      	ldrb	r2, [r1, #8]
 80031da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80031de:	8103      	strh	r3, [r0, #8]
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop

080031e4 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_InterfaceDeInit (USBH_HandleTypeDef *phost )
{	
 80031e4:	b538      	push	{r3, r4, r5, lr}
 80031e6:	4604      	mov	r4, r0
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 80031e8:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 80031ec:	69dd      	ldr	r5, [r3, #28]
  
  if(HID_Handle->InPipe != 0x00)
 80031ee:	7869      	ldrb	r1, [r5, #1]
 80031f0:	b139      	cbz	r1, 8003202 <USBH_HID_InterfaceDeInit+0x1e>
  {   
    USBH_ClosePipe  (phost, HID_Handle->InPipe);
 80031f2:	f001 f9c5 	bl	8004580 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->InPipe);
 80031f6:	7869      	ldrb	r1, [r5, #1]
 80031f8:	4620      	mov	r0, r4
 80031fa:	f001 f9d9 	bl	80045b0 <USBH_FreePipe>
    HID_Handle->InPipe = 0;     /* Reset the pipe as Free */  
 80031fe:	2300      	movs	r3, #0
 8003200:	706b      	strb	r3, [r5, #1]
  }
  
  if(HID_Handle->OutPipe != 0x00)
 8003202:	7829      	ldrb	r1, [r5, #0]
 8003204:	b141      	cbz	r1, 8003218 <USBH_HID_InterfaceDeInit+0x34>
  {   
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8003206:	4620      	mov	r0, r4
 8003208:	f001 f9ba 	bl	8004580 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->OutPipe);
 800320c:	7829      	ldrb	r1, [r5, #0]
 800320e:	4620      	mov	r0, r4
 8003210:	f001 f9ce 	bl	80045b0 <USBH_FreePipe>
    HID_Handle->OutPipe = 0;     /* Reset the pipe as Free */  
 8003214:	2300      	movs	r3, #0
 8003216:	702b      	strb	r3, [r5, #0]
  }
  
  if(phost->pActiveClass->pData)
 8003218:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 800321c:	69d8      	ldr	r0, [r3, #28]
 800321e:	b108      	cbz	r0, 8003224 <USBH_HID_InterfaceDeInit+0x40>
  {
    USBH_free (phost->pActiveClass->pData);
 8003220:	f001 fd60 	bl	8004ce4 <free>
  }

  return USBH_OK;
}
 8003224:	2000      	movs	r0, #0
 8003226:	bd38      	pop	{r3, r4, r5, pc}

08003228 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8003228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322a:	b085      	sub	sp, #20
 800322c:	4604      	mov	r4, r0
  uint8_t interface;
  
  USBH_StatusTypeDef status = USBH_FAIL ;
  HID_HandleTypeDef *HID_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
 800322e:	f8d0 1374 	ldr.w	r1, [r0, #884]	; 0x374
 8003232:	23ff      	movs	r3, #255	; 0xff
 8003234:	2201      	movs	r2, #1
 8003236:	7909      	ldrb	r1, [r1, #4]
 8003238:	f000 fd12 	bl	8003c60 <USBH_FindInterface>
  
  if(interface == 0xFF) /* No Valid Interface */
 800323c:	28ff      	cmp	r0, #255	; 0xff
 800323e:	d10d      	bne.n	800325c <USBH_HID_InterfaceInit+0x34>
  {
    status = USBH_FAIL;  
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);         
 8003240:	4858      	ldr	r0, [pc, #352]	; (80033a4 <USBH_HID_InterfaceInit+0x17c>)
 8003242:	f001 ff79 	bl	8005138 <printf>
 8003246:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 800324a:	6819      	ldr	r1, [r3, #0]
 800324c:	4856      	ldr	r0, [pc, #344]	; (80033a8 <USBH_HID_InterfaceInit+0x180>)
 800324e:	f001 ff73 	bl	8005138 <printf>
 8003252:	200a      	movs	r0, #10
 8003254:	f001 ff88 	bl	8005168 <putchar>
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
  
  if(interface == 0xFF) /* No Valid Interface */
  {
    status = USBH_FAIL;  
 8003258:	2002      	movs	r0, #2
 800325a:	e0a0      	b.n	800339e <USBH_HID_InterfaceInit+0x176>
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);         
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800325c:	4601      	mov	r1, r0
 800325e:	4620      	mov	r0, r4
 8003260:	f000 fcba 	bl	8003bd8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8003264:	f8d4 5374 	ldr.w	r5, [r4, #884]	; 0x374
 8003268:	2034      	movs	r0, #52	; 0x34
 800326a:	f001 fd33 	bl	8004cd4 <malloc>
 800326e:	61e8      	str	r0, [r5, #28]
    HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8003270:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003274:	69dd      	ldr	r5, [r3, #28]
    HID_Handle->state = HID_ERROR;
 8003276:	2307      	movs	r3, #7
 8003278:	70ab      	strb	r3, [r5, #2]
    
    /*Decode Bootclass Protocol: Mouse or Keyboard*/
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800327a:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 800327e:	221a      	movs	r2, #26
 8003280:	fb02 4303 	mla	r3, r2, r3, r4
 8003284:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8003288:	2b01      	cmp	r3, #1
 800328a:	d108      	bne.n	800329e <USBH_HID_InterfaceInit+0x76>
    {
      USBH_UsrLog ("KeyBoard device found!"); 
 800328c:	4847      	ldr	r0, [pc, #284]	; (80033ac <USBH_HID_InterfaceInit+0x184>)
 800328e:	f001 ff53 	bl	8005138 <printf>
 8003292:	200a      	movs	r0, #10
 8003294:	f001 ff68 	bl	8005168 <putchar>
      HID_Handle->Init =  USBH_HID_KeybdInit;     
 8003298:	4b45      	ldr	r3, [pc, #276]	; (80033b0 <USBH_HID_InterfaceInit+0x188>)
 800329a:	632b      	str	r3, [r5, #48]	; 0x30
 800329c:	e012      	b.n	80032c4 <USBH_HID_InterfaceInit+0x9c>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)		  
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d108      	bne.n	80032b4 <USBH_HID_InterfaceInit+0x8c>
    {
      USBH_UsrLog ("Mouse device found!");         
 80032a2:	4844      	ldr	r0, [pc, #272]	; (80033b4 <USBH_HID_InterfaceInit+0x18c>)
 80032a4:	f001 ff48 	bl	8005138 <printf>
 80032a8:	200a      	movs	r0, #10
 80032aa:	f001 ff5d 	bl	8005168 <putchar>
      HID_Handle->Init =  USBH_HID_MouseInit;     
 80032ae:	4b42      	ldr	r3, [pc, #264]	; (80033b8 <USBH_HID_InterfaceInit+0x190>)
 80032b0:	632b      	str	r3, [r5, #48]	; 0x30
 80032b2:	e007      	b.n	80032c4 <USBH_HID_InterfaceInit+0x9c>
    }
    else
    {
      USBH_UsrLog ("Protocol not supported.");  
 80032b4:	4841      	ldr	r0, [pc, #260]	; (80033bc <USBH_HID_InterfaceInit+0x194>)
 80032b6:	f001 ff3f 	bl	8005138 <printf>
 80032ba:	200a      	movs	r0, #10
 80032bc:	f001 ff54 	bl	8005168 <putchar>
      return USBH_FAIL;
 80032c0:	2002      	movs	r0, #2
 80032c2:	e06c      	b.n	800339e <USBH_HID_InterfaceInit+0x176>
    }
    
    HID_Handle->state     = HID_INIT;
 80032c4:	2300      	movs	r3, #0
 80032c6:	70ab      	strb	r3, [r5, #2]
    HID_Handle->ctl_state = HID_REQ_INIT; 
 80032c8:	716b      	strb	r3, [r5, #5]
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 80032ca:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 80032ce:	221a      	movs	r2, #26
 80032d0:	fb02 4303 	mla	r3, r2, r3, r4
 80032d4:	f893 3348 	ldrb.w	r3, [r3, #840]	; 0x348
 80032d8:	76ab      	strb	r3, [r5, #26]
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80032da:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 80032de:	fb02 4303 	mla	r3, r2, r3, r4
 80032e2:	f8b3 334a 	ldrh.w	r3, [r3, #842]	; 0x34a
 80032e6:	832b      	strh	r3, [r5, #24]
    HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 80032e8:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 80032ec:	fb02 4303 	mla	r3, r2, r3, r4
 80032f0:	f893 334c 	ldrb.w	r3, [r3, #844]	; 0x34c
 80032f4:	83ab      	strh	r3, [r5, #28]
    
    if (HID_Handle->poll  < HID_MIN_POLL) 
 80032f6:	2b09      	cmp	r3, #9
 80032f8:	d801      	bhi.n	80032fe <USBH_HID_InterfaceInit+0xd6>
    {
      HID_Handle->poll = HID_MIN_POLL;
 80032fa:	230a      	movs	r3, #10
 80032fc:	83ab      	strh	r3, [r5, #28]
    
    /* Check fo available number of endpoints */
    /* Find the number of EPs in the Interface Descriptor */      
    /* Choose the lower number in order not to overrun the buffer allocated */
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 80032fe:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 8003302:	221a      	movs	r2, #26
 8003304:	fb02 4303 	mla	r3, r2, r3, r4
 8003308:	f893 7340 	ldrb.w	r7, [r3, #832]	; 0x340
    }
    
    /* Check fo available number of endpoints */
    /* Find the number of EPs in the Interface Descriptor */      
    /* Choose the lower number in order not to overrun the buffer allocated */
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 800330c:	2f02      	cmp	r7, #2
 800330e:	bf28      	it	cs
 8003310:	2702      	movcs	r7, #2
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit (USBH_HandleTypeDef *phost)
{	
  uint8_t max_ep;
  uint8_t num = 0;
 8003312:	2600      	movs	r6, #0
              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
                  USBH_MAX_NUM_ENDPOINTS); 
    
    
    /* Decode endpoint IN and OUT address from interface descriptor */
    for ( ;num < max_ep; num++)
 8003314:	e040      	b.n	8003398 <USBH_HID_InterfaceInit+0x170>
    {
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 8003316:	f894 131f 	ldrb.w	r1, [r4, #799]	; 0x31f
 800331a:	1c73      	adds	r3, r6, #1
 800331c:	221a      	movs	r2, #26
 800331e:	fb02 f201 	mul.w	r2, r2, r1
 8003322:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003326:	4423      	add	r3, r4
 8003328:	f893 1340 	ldrb.w	r1, [r3, #832]	; 0x340
 800332c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003330:	d018      	beq.n	8003364 <USBH_HID_InterfaceInit+0x13c>
      {
        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8003332:	7129      	strb	r1, [r5, #4]
        HID_Handle->InPipe  =\
          USBH_AllocPipe(phost, HID_Handle->InEp);
 8003334:	4620      	mov	r0, r4
 8003336:	f001 f929 	bl	800458c <USBH_AllocPipe>
 800333a:	4601      	mov	r1, r0
    for ( ;num < max_ep; num++)
    {
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
      {
        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
        HID_Handle->InPipe  =\
 800333c:	7068      	strb	r0, [r5, #1]
          USBH_AllocPipe(phost, HID_Handle->InEp);
        
        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 800333e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003342:	792a      	ldrb	r2, [r5, #4]
 8003344:	8b28      	ldrh	r0, [r5, #24]
 8003346:	9002      	str	r0, [sp, #8]
 8003348:	2003      	movs	r0, #3
 800334a:	9001      	str	r0, [sp, #4]
 800334c:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 8003350:	9000      	str	r0, [sp, #0]
 8003352:	4620      	mov	r0, r4
 8003354:	f001 f904 	bl	8004560 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->InPipe, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	7869      	ldrb	r1, [r5, #1]
 800335c:	4620      	mov	r0, r4
 800335e:	f001 fc75 	bl	8004c4c <USBH_LL_SetToggle>
 8003362:	e017      	b.n	8003394 <USBH_HID_InterfaceInit+0x16c>
        
      }
      else
      {
        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8003364:	70e9      	strb	r1, [r5, #3]
        HID_Handle->OutPipe  =\
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 8003366:	4620      	mov	r0, r4
 8003368:	f001 f910 	bl	800458c <USBH_AllocPipe>
 800336c:	4601      	mov	r1, r0
        
      }
      else
      {
        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
        HID_Handle->OutPipe  =\
 800336e:	7028      	strb	r0, [r5, #0]
          USBH_AllocPipe(phost, HID_Handle->OutEp);
        
        /* Open pipe for OUT endpoint */
        USBH_OpenPipe  (phost,
 8003370:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003374:	78ea      	ldrb	r2, [r5, #3]
 8003376:	8b28      	ldrh	r0, [r5, #24]
 8003378:	9002      	str	r0, [sp, #8]
 800337a:	2003      	movs	r0, #3
 800337c:	9001      	str	r0, [sp, #4]
 800337e:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 8003382:	9000      	str	r0, [sp, #0]
 8003384:	4620      	mov	r0, r4
 8003386:	f001 f8eb 	bl	8004560 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0);        
 800338a:	2200      	movs	r2, #0
 800338c:	7829      	ldrb	r1, [r5, #0]
 800338e:	4620      	mov	r0, r4
 8003390:	f001 fc5c 	bl	8004c4c <USBH_LL_SetToggle>
              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
                  USBH_MAX_NUM_ENDPOINTS); 
    
    
    /* Decode endpoint IN and OUT address from interface descriptor */
    for ( ;num < max_ep; num++)
 8003394:	3601      	adds	r6, #1
 8003396:	b2f6      	uxtb	r6, r6
 8003398:	42be      	cmp	r6, r7
 800339a:	d3bc      	bcc.n	8003316 <USBH_HID_InterfaceInit+0xee>
        
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0);        
      }
      
    }  
    status = USBH_OK;
 800339c:	2000      	movs	r0, #0
  }
  return status;
}
 800339e:	b005      	add	sp, #20
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a2:	bf00      	nop
 80033a4:	08008788 	.word	0x08008788
 80033a8:	08008794 	.word	0x08008794
 80033ac:	080087bc 	.word	0x080087bc
 80033b0:	0800373d 	.word	0x0800373d
 80033b4:	080087d4 	.word	0x080087d4
 80033b8:	080037d5 	.word	0x080037d5
 80033bc:	080087e8 	.word	0x080087e8

080033c0 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor (USBH_HandleTypeDef *phost,
                                                         uint16_t length)
{
 80033c0:	b500      	push	{lr}
 80033c2:	b083      	sub	sp, #12
  
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor(phost,
 80033c4:	9100      	str	r1, [sp, #0]
 80033c6:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80033ca:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80033ce:	2101      	movs	r1, #1
 80033d0:	f000 ffd2 	bl	8004378 <USBH_GetDescriptor>
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/
  
  
  return status;
}
 80033d4:	b003      	add	sp, #12
 80033d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80033da:	bf00      	nop

080033dc <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor (USBH_HandleTypeDef *phost,
                                            uint16_t length)
{
 80033dc:	b500      	push	{lr}
 80033de:	b083      	sub	sp, #12
  
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor( phost,
 80033e0:	9100      	str	r1, [sp, #0]
 80033e2:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80033e6:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 80033ea:	2101      	movs	r1, #1
 80033ec:	f000 ffc4 	bl	8004378 <USBH_GetDescriptor>
                              USB_DESC_HID,
                              phost->device.Data,
                              length);
 
  return status;
}
 80033f0:	b003      	add	sp, #12
 80033f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80033f6:	bf00      	nop

080033f8 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle (USBH_HandleTypeDef *phost,
                                         uint8_t duration,
                                         uint8_t reportId)
{
 80033f8:	b510      	push	{r4, lr}
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 80033fa:	2421      	movs	r4, #33	; 0x21
 80033fc:	7404      	strb	r4, [r0, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80033fe:	240a      	movs	r4, #10
 8003400:	7444      	strb	r4, [r0, #17]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 8003402:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003406:	8242      	strh	r2, [r0, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 8003408:	2100      	movs	r1, #0
 800340a:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0;
 800340c:	82c1      	strh	r1, [r0, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 800340e:	460a      	mov	r2, r1
 8003410:	f000 ff90 	bl	8004334 <USBH_CtlReq>
}
 8003414:	bd10      	pop	{r4, pc}
 8003416:	bf00      	nop

08003418 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 8003418:	b538      	push	{r3, r4, r5, lr}
  
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 800341a:	25a1      	movs	r5, #161	; 0xa1
 800341c:	7405      	strb	r5, [r0, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800341e:	2501      	movs	r5, #1
 8003420:	7445      	strb	r5, [r0, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 8003422:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003426:	8242      	strh	r2, [r0, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 8003428:	2200      	movs	r2, #0
 800342a:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800342c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003430:	b292      	uxth	r2, r2
 8003432:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 8003434:	4619      	mov	r1, r3
 8003436:	f000 ff7d 	bl	8004334 <USBH_CtlReq>
}
 800343a:	bd38      	pop	{r3, r4, r5, pc}

0800343c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                            uint8_t protocol)
{
 800343c:	b508      	push	{r3, lr}
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 800343e:	2221      	movs	r2, #33	; 0x21
 8003440:	7402      	strb	r2, [r0, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8003442:	220b      	movs	r2, #11
 8003444:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = protocol != 0 ? 0 : 1;
 8003446:	fab1 f181 	clz	r1, r1
 800344a:	0949      	lsrs	r1, r1, #5
 800344c:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 800344e:	2100      	movs	r1, #0
 8003450:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0;
 8003452:	82c1      	strh	r1, [r0, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8003454:	460a      	mov	r2, r1
 8003456:	f000 ff6d 	bl	8004334 <USBH_CtlReq>
  
}
 800345a:	bd08      	pop	{r3, pc}

0800345c <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
 800345c:	b538      	push	{r3, r4, r5, lr}
 800345e:	4604      	mov	r4, r0
  
  USBH_StatusTypeDef status         = USBH_BUSY;
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8003460:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003464:	69dd      	ldr	r5, [r3, #28]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8003466:	796b      	ldrb	r3, [r5, #5]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d836      	bhi.n	80034da <USBH_HID_ClassRequest+0x7e>
 800346c:	e8df f003 	tbb	[pc, r3]
 8003470:	03113503 	.word	0x03113503
 8003474:	2819      	.short	0x2819
  {
  case HID_REQ_INIT:  
  case HID_REQ_GET_HID_DESC:
    
    /* Get HID Desc */ 
    if (USBH_HID_GetHIDDescriptor (phost, USB_HID_DESC_SIZE)== USBH_OK)
 8003476:	2109      	movs	r1, #9
 8003478:	f7ff ffb0 	bl	80033dc <USBH_HID_GetHIDDescriptor>
 800347c:	bb78      	cbnz	r0, 80034de <USBH_HID_ClassRequest+0x82>
    {
      
      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 800347e:	f504 718e 	add.w	r1, r4, #284	; 0x11c
 8003482:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8003486:	f7ff fe97 	bl	80031b8 <USBH_HID_ParseHIDDesc>
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800348a:	2302      	movs	r3, #2
 800348c:	716b      	strb	r3, [r5, #5]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
  
  USBH_StatusTypeDef status         = USBH_BUSY;
 800348e:	2001      	movs	r0, #1
 8003490:	bd38      	pop	{r3, r4, r5, pc}
    break;     
  case HID_REQ_GET_REPORT_DESC:
    
    
    /* Get Report Desc */ 
    if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 8003492:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8003494:	f7ff ff94 	bl	80033c0 <USBH_HID_GetHIDReportDescriptor>
 8003498:	bb18      	cbnz	r0, 80034e2 <USBH_HID_ClassRequest+0x86>
    {
      /* The descriptor is available in phost->device.Data */

      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 800349a:	2304      	movs	r3, #4
 800349c:	716b      	strb	r3, [r5, #5]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
  
  USBH_StatusTypeDef status         = USBH_BUSY;
 800349e:	2001      	movs	r0, #1
 80034a0:	bd38      	pop	{r3, r4, r5, pc}
    
    break;
    
  case HID_REQ_SET_IDLE:
    
    classReqStatus = USBH_HID_SetIdle (phost, 0, 0);
 80034a2:	2200      	movs	r2, #0
 80034a4:	4611      	mov	r1, r2
 80034a6:	f7ff ffa7 	bl	80033f8 <USBH_HID_SetIdle>
    
    /* set Idle */
    if (classReqStatus == USBH_OK)
 80034aa:	b918      	cbnz	r0, 80034b4 <USBH_HID_ClassRequest+0x58>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;  
 80034ac:	2305      	movs	r3, #5
 80034ae:	716b      	strb	r3, [r5, #5]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
  
  USBH_StatusTypeDef status         = USBH_BUSY;
 80034b0:	2001      	movs	r0, #1
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
    /* set Idle */
    if (classReqStatus == USBH_OK)
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;  
    }
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
 80034b4:	2803      	cmp	r0, #3
 80034b6:	d116      	bne.n	80034e6 <USBH_HID_ClassRequest+0x8a>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;        
 80034b8:	2305      	movs	r3, #5
 80034ba:	716b      	strb	r3, [r5, #5]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
  
  USBH_StatusTypeDef status         = USBH_BUSY;
 80034bc:	2001      	movs	r0, #1
 80034be:	bd38      	pop	{r3, r4, r5, pc}
    } 
    break; 
    
  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    if (USBH_HID_SetProtocol (phost, 0) == USBH_OK)
 80034c0:	2100      	movs	r1, #0
 80034c2:	f7ff ffbb 	bl	800343c <USBH_HID_SetProtocol>
 80034c6:	b980      	cbnz	r0, 80034ea <USBH_HID_ClassRequest+0x8e>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 80034c8:	2301      	movs	r3, #1
 80034ca:	716b      	strb	r3, [r5, #5]
      
      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 80034cc:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80034d0:	2102      	movs	r1, #2
 80034d2:	4620      	mov	r0, r4
 80034d4:	4798      	blx	r3
      status = USBH_OK; 
 80034d6:	2000      	movs	r0, #0
 80034d8:	bd38      	pop	{r3, r4, r5, pc}
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
  
  USBH_StatusTypeDef status         = USBH_BUSY;
 80034da:	2001      	movs	r0, #1
 80034dc:	bd38      	pop	{r3, r4, r5, pc}
 80034de:	2001      	movs	r0, #1
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
 80034e2:	2001      	movs	r0, #1
 80034e4:	bd38      	pop	{r3, r4, r5, pc}
 80034e6:	2001      	movs	r0, #1
 80034e8:	bd38      	pop	{r3, r4, r5, pc}
 80034ea:	2001      	movs	r0, #1
  default:
    break;
  }
  
  return status; 
}
 80034ec:	bd38      	pop	{r3, r4, r5, pc}
 80034ee:	bf00      	nop

080034f0 <fifo_init>:
  * @param  size: Fifo Size
  * @retval none
  */
void fifo_init(FIFO_TypeDef * f, uint8_t * buf, uint16_t size)
{
     f->head = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	8083      	strh	r3, [r0, #4]
     f->tail = 0;
 80034f4:	80c3      	strh	r3, [r0, #6]
     f->lock = 0;
 80034f6:	7283      	strb	r3, [r0, #10]
     f->size = size;
 80034f8:	8102      	strh	r2, [r0, #8]
     f->buf = buf;
 80034fa:	6001      	str	r1, [r0, #0]
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop

08003500 <fifo_read>:
{
  uint16_t  i;
  uint8_t * p;
  p = (uint8_t*) buf;
  
  if(f->lock == 0)
 8003500:	7a83      	ldrb	r3, [r0, #10]
 8003502:	bb23      	cbnz	r3, 800354e <fifo_read+0x4e>
  * @param  buf: read buffer 
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t  fifo_read(FIFO_TypeDef * f, void * buf, uint16_t  nbytes)
{
 8003504:	b470      	push	{r4, r5, r6}
  uint8_t * p;
  p = (uint8_t*) buf;
  
  if(f->lock == 0)
  {
    f->lock = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	7283      	strb	r3, [r0, #10]
    for(i=0; i < nbytes; i++)
 800350a:	2400      	movs	r4, #0
 800350c:	e018      	b.n	8003540 <fifo_read+0x40>
    {
      if( f->tail != f->head )
 800350e:	88c3      	ldrh	r3, [r0, #6]
 8003510:	8885      	ldrh	r5, [r0, #4]
 8003512:	42ab      	cmp	r3, r5
 8003514:	d00d      	beq.n	8003532 <fifo_read+0x32>
      { 
        *p++ = f->buf[f->tail];  
 8003516:	1c4d      	adds	r5, r1, #1
 8003518:	6806      	ldr	r6, [r0, #0]
 800351a:	5cf3      	ldrb	r3, [r6, r3]
 800351c:	700b      	strb	r3, [r1, #0]
        f->tail++;  
 800351e:	88c3      	ldrh	r3, [r0, #6]
 8003520:	3301      	adds	r3, #1
 8003522:	b29b      	uxth	r3, r3
 8003524:	80c3      	strh	r3, [r0, #6]
        if( f->tail == f->size )
 8003526:	8901      	ldrh	r1, [r0, #8]
 8003528:	428b      	cmp	r3, r1
 800352a:	d106      	bne.n	800353a <fifo_read+0x3a>
        {  
          f->tail = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	80c3      	strh	r3, [r0, #6]
 8003530:	e003      	b.n	800353a <fifo_read+0x3a>
        }
      } else 
      {
        f->lock = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	7283      	strb	r3, [r0, #10]
        return i; 
 8003536:	4620      	mov	r0, r4
 8003538:	e007      	b.n	800354a <fifo_read+0x4a>
  p = (uint8_t*) buf;
  
  if(f->lock == 0)
  {
    f->lock = 1;
    for(i=0; i < nbytes; i++)
 800353a:	3401      	adds	r4, #1
 800353c:	b2a4      	uxth	r4, r4
    {
      if( f->tail != f->head )
      { 
        *p++ = f->buf[f->tail];  
 800353e:	4629      	mov	r1, r5
  p = (uint8_t*) buf;
  
  if(f->lock == 0)
  {
    f->lock = 1;
    for(i=0; i < nbytes; i++)
 8003540:	4294      	cmp	r4, r2
 8003542:	d3e4      	bcc.n	800350e <fifo_read+0xe>
        f->lock = 0;
        return i; 
      }
    }
  }
  f->lock = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	7283      	strb	r3, [r0, #10]
  return nbytes;
 8003548:	4610      	mov	r0, r2
}
 800354a:	bc70      	pop	{r4, r5, r6}
 800354c:	4770      	bx	lr
        f->lock = 0;
        return i; 
      }
    }
  }
  f->lock = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	7283      	strb	r3, [r0, #10]
  return nbytes;
 8003552:	4610      	mov	r0, r2
}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop

08003558 <fifo_write>:
uint16_t  fifo_write(FIFO_TypeDef * f, const void * buf, uint16_t  nbytes)
{
  uint16_t  i;
  const uint8_t * p;
  p = (const uint8_t*) buf;
  if(f->lock == 0)
 8003558:	7a83      	ldrb	r3, [r0, #10]
 800355a:	bb43      	cbnz	r3, 80035ae <fifo_write+0x56>
  * @param  buf: read buffer 
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t  fifo_write(FIFO_TypeDef * f, const void * buf, uint16_t  nbytes)
{
 800355c:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t  i;
  const uint8_t * p;
  p = (const uint8_t*) buf;
  if(f->lock == 0)
  {
    f->lock = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	7283      	strb	r3, [r0, #10]
    for(i=0; i < nbytes; i++)
 8003562:	2400      	movs	r4, #0
 8003564:	e01c      	b.n	80035a0 <fifo_write+0x48>
    {
      if( (f->head + 1 == f->tail) ||
 8003566:	8885      	ldrh	r5, [r0, #4]
 8003568:	1c6b      	adds	r3, r5, #1
 800356a:	88c6      	ldrh	r6, [r0, #6]
 800356c:	42b3      	cmp	r3, r6
 800356e:	d003      	beq.n	8003578 <fifo_write+0x20>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 8003570:	8907      	ldrh	r7, [r0, #8]
  if(f->lock == 0)
  {
    f->lock = 1;
    for(i=0; i < nbytes; i++)
    {
      if( (f->head + 1 == f->tail) ||
 8003572:	42bb      	cmp	r3, r7
 8003574:	d104      	bne.n	8003580 <fifo_write+0x28>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 8003576:	b91e      	cbnz	r6, 8003580 <fifo_write+0x28>
      {
        f->lock = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	7283      	strb	r3, [r0, #10]
        return i;
 800357c:	4620      	mov	r0, r4
 800357e:	e014      	b.n	80035aa <fifo_write+0x52>
      } 
      else 
      {
        f->buf[f->head] = *p++;
 8003580:	6803      	ldr	r3, [r0, #0]
 8003582:	1c4e      	adds	r6, r1, #1
 8003584:	7809      	ldrb	r1, [r1, #0]
 8003586:	5559      	strb	r1, [r3, r5]
        f->head++;
 8003588:	8883      	ldrh	r3, [r0, #4]
 800358a:	3301      	adds	r3, #1
 800358c:	b29b      	uxth	r3, r3
 800358e:	8083      	strh	r3, [r0, #4]
        if( f->head == f->size )
 8003590:	8901      	ldrh	r1, [r0, #8]
 8003592:	428b      	cmp	r3, r1
 8003594:	d101      	bne.n	800359a <fifo_write+0x42>
        {
          f->head = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	8083      	strh	r3, [r0, #4]
  const uint8_t * p;
  p = (const uint8_t*) buf;
  if(f->lock == 0)
  {
    f->lock = 1;
    for(i=0; i < nbytes; i++)
 800359a:	3401      	adds	r4, #1
 800359c:	b2a4      	uxth	r4, r4
        f->lock = 0;
        return i;
      } 
      else 
      {
        f->buf[f->head] = *p++;
 800359e:	4631      	mov	r1, r6
  const uint8_t * p;
  p = (const uint8_t*) buf;
  if(f->lock == 0)
  {
    f->lock = 1;
    for(i=0; i < nbytes; i++)
 80035a0:	4294      	cmp	r4, r2
 80035a2:	d3e0      	bcc.n	8003566 <fifo_write+0xe>
          f->head = 0;
        }
      }
    }
  }
  f->lock = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	7283      	strb	r3, [r0, #10]
  return nbytes;
 80035a8:	4610      	mov	r0, r2
}
 80035aa:	bcf0      	pop	{r4, r5, r6, r7}
 80035ac:	4770      	bx	lr
          f->head = 0;
        }
      }
    }
  }
  f->lock = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	7283      	strb	r3, [r0, #10]
  return nbytes;
 80035b2:	4610      	mov	r0, r2
}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop

080035b8 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80035b8:	b530      	push	{r4, r5, lr}
 80035ba:	b083      	sub	sp, #12
 80035bc:	4605      	mov	r5, r0
  USBH_StatusTypeDef status = USBH_OK;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80035be:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 80035c2:	69dc      	ldr	r4, [r3, #28]
  
  switch (HID_Handle->state)
 80035c4:	78a3      	ldrb	r3, [r4, #2]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d852      	bhi.n	8003670 <USBH_HID_Process+0xb8>
 80035ca:	e8df f003 	tbb	[pc, r3]
 80035ce:	0604      	.short	0x0604
 80035d0:	19215151 	.word	0x19215151
 80035d4:	2f          	.byte	0x2f
 80035d5:	00          	.byte	0x00
  {
  case HID_INIT:
    HID_Handle->Init(phost); 
 80035d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035d8:	4798      	blx	r3
  case HID_IDLE:
    if(USBH_HID_GetReport (phost,
 80035da:	6963      	ldr	r3, [r4, #20]
 80035dc:	7e22      	ldrb	r2, [r4, #24]
 80035de:	9200      	str	r2, [sp, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2101      	movs	r1, #1
 80035e4:	4628      	mov	r0, r5
 80035e6:	f7ff ff17 	bl	8003418 <USBH_HID_GetReport>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d140      	bne.n	8003670 <USBH_HID_Process+0xb8>
                            0,
                            HID_Handle->pData,
                            HID_Handle->length) == USBH_OK)
    {
      
      fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);  
 80035ee:	8b22      	ldrh	r2, [r4, #24]
 80035f0:	6961      	ldr	r1, [r4, #20]
 80035f2:	f104 0008 	add.w	r0, r4, #8
 80035f6:	f7ff ffaf 	bl	8003558 <fifo_write>
      HID_Handle->state = HID_SYNC;
 80035fa:	2305      	movs	r3, #5
 80035fc:	70a3      	strb	r3, [r4, #2]
 80035fe:	e037      	b.n	8003670 <USBH_HID_Process+0xb8>
    break;
    
  case HID_SYNC:

    /* Sync with start of Even Frame */
    if(phost->Timer & 1)
 8003600:	f8d0 33b8 	ldr.w	r3, [r0, #952]	; 0x3b8
 8003604:	f013 0f01 	tst.w	r3, #1
 8003608:	d032      	beq.n	8003670 <USBH_HID_Process+0xb8>
    {
      HID_Handle->state = HID_GET_DATA; 
 800360a:	2304      	movs	r3, #4
 800360c:	70a3      	strb	r3, [r4, #2]
 800360e:	e02f      	b.n	8003670 <USBH_HID_Process+0xb8>
#endif   
    break;
    
  case HID_GET_DATA:

    USBH_InterruptReceiveData(phost, 
 8003610:	7863      	ldrb	r3, [r4, #1]
 8003612:	7e22      	ldrb	r2, [r4, #24]
 8003614:	6961      	ldr	r1, [r4, #20]
 8003616:	f000 ff7f 	bl	8004518 <USBH_InterruptReceiveData>
                              HID_Handle->pData,
                              HID_Handle->length,
                              HID_Handle->InPipe);
    
    HID_Handle->state = HID_POLL;
 800361a:	2306      	movs	r3, #6
 800361c:	70a3      	strb	r3, [r4, #2]
    HID_Handle->timer = phost->Timer;
 800361e:	f8d5 33b8 	ldr.w	r3, [r5, #952]	; 0x3b8
 8003622:	6223      	str	r3, [r4, #32]
    HID_Handle->DataReady = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    break;
 800362a:	e021      	b.n	8003670 <USBH_HID_Process+0xb8>
    
  case HID_POLL:
    
    if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_DONE)
 800362c:	7861      	ldrb	r1, [r4, #1]
 800362e:	f001 fb01 	bl	8004c34 <USBH_LL_GetURBState>
 8003632:	2801      	cmp	r0, #1
 8003634:	d10f      	bne.n	8003656 <USBH_HID_Process+0x9e>
    {
      if(HID_Handle->DataReady == 0)
 8003636:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800363a:	b9cb      	cbnz	r3, 8003670 <USBH_HID_Process+0xb8>
      {
        fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800363c:	8b22      	ldrh	r2, [r4, #24]
 800363e:	6961      	ldr	r1, [r4, #20]
 8003640:	f104 0008 	add.w	r0, r4, #8
 8003644:	f7ff ff88 	bl	8003558 <fifo_write>
        HID_Handle->DataReady = 1;
 8003648:	2301      	movs	r3, #1
 800364a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        USBH_HID_EventCallback(phost);
 800364e:	4628      	mov	r0, r5
 8003650:	f001 f9f6 	bl	8004a40 <USBH_HID_EventCallback>
 8003654:	e00c      	b.n	8003670 <USBH_HID_Process+0xb8>
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif          
      }
    }
    else if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_STALL) /* IN Endpoint Stalled */
 8003656:	7861      	ldrb	r1, [r4, #1]
 8003658:	4628      	mov	r0, r5
 800365a:	f001 faeb 	bl	8004c34 <USBH_LL_GetURBState>
 800365e:	2805      	cmp	r0, #5
 8003660:	d106      	bne.n	8003670 <USBH_HID_Process+0xb8>
    {
      
      /* Issue Clear Feature on interrupt IN endpoint */ 
      if(USBH_ClrFeature(phost,
 8003662:	7ea1      	ldrb	r1, [r4, #26]
 8003664:	4628      	mov	r0, r5
 8003666:	f000 ff0d 	bl	8004484 <USBH_ClrFeature>
 800366a:	b908      	cbnz	r0, 8003670 <USBH_HID_Process+0xb8>
                         HID_Handle->ep_addr) == USBH_OK)
      {
        /* Change state to issue next IN token */
        HID_Handle->state = HID_GET_DATA;
 800366c:	2304      	movs	r3, #4
 800366e:	70a3      	strb	r3, [r4, #2]
    
  default:
    break;
  }
  return status;
}
 8003670:	2000      	movs	r0, #0
 8003672:	b003      	add	sp, #12
 8003674:	bd30      	pop	{r4, r5, pc}
 8003676:	bf00      	nop

08003678 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8003678:	b510      	push	{r4, lr}
  uint8_t x;
  
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800367a:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 800367e:	69dc      	ldr	r4, [r3, #28]
  if(HID_Handle->length == 0)
 8003680:	8b22      	ldrh	r2, [r4, #24]
 8003682:	2a00      	cmp	r2, #0
 8003684:	d03f      	beq.n	8003706 <USBH_HID_KeybdDecode+0x8e>
  {
    return USBH_FAIL;
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8003686:	4922      	ldr	r1, [pc, #136]	; (8003710 <USBH_HID_KeybdDecode+0x98>)
 8003688:	f104 0008 	add.w	r0, r4, #8
 800368c:	f7ff ff38 	bl	8003500 <fifo_read>
 8003690:	8b23      	ldrh	r3, [r4, #24]
 8003692:	4298      	cmp	r0, r3
 8003694:	d139      	bne.n	800370a <USBH_HID_KeybdDecode+0x92>
  {
    
    keybd_info.lctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0);
 8003696:	2100      	movs	r1, #0
 8003698:	481e      	ldr	r0, [pc, #120]	; (8003714 <USBH_HID_KeybdDecode+0x9c>)
 800369a:	f000 f8bd 	bl	8003818 <HID_ReadItem>
 800369e:	4c1e      	ldr	r4, [pc, #120]	; (8003718 <USBH_HID_KeybdDecode+0xa0>)
 80036a0:	7060      	strb	r0, [r4, #1]
    keybd_info.lshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0);
 80036a2:	2100      	movs	r1, #0
 80036a4:	481d      	ldr	r0, [pc, #116]	; (800371c <USBH_HID_KeybdDecode+0xa4>)
 80036a6:	f000 f8b7 	bl	8003818 <HID_ReadItem>
 80036aa:	70a0      	strb	r0, [r4, #2]
    keybd_info.lalt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0);
 80036ac:	2100      	movs	r1, #0
 80036ae:	481c      	ldr	r0, [pc, #112]	; (8003720 <USBH_HID_KeybdDecode+0xa8>)
 80036b0:	f000 f8b2 	bl	8003818 <HID_ReadItem>
 80036b4:	70e0      	strb	r0, [r4, #3]
    keybd_info.lgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0);
 80036b6:	2100      	movs	r1, #0
 80036b8:	481a      	ldr	r0, [pc, #104]	; (8003724 <USBH_HID_KeybdDecode+0xac>)
 80036ba:	f000 f8ad 	bl	8003818 <HID_ReadItem>
 80036be:	7120      	strb	r0, [r4, #4]
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0);
 80036c0:	2100      	movs	r1, #0
 80036c2:	4819      	ldr	r0, [pc, #100]	; (8003728 <USBH_HID_KeybdDecode+0xb0>)
 80036c4:	f000 f8a8 	bl	8003818 <HID_ReadItem>
 80036c8:	7160      	strb	r0, [r4, #5]
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0);
 80036ca:	2100      	movs	r1, #0
 80036cc:	4817      	ldr	r0, [pc, #92]	; (800372c <USBH_HID_KeybdDecode+0xb4>)
 80036ce:	f000 f8a3 	bl	8003818 <HID_ReadItem>
 80036d2:	71a0      	strb	r0, [r4, #6]
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0);
 80036d4:	2100      	movs	r1, #0
 80036d6:	4816      	ldr	r0, [pc, #88]	; (8003730 <USBH_HID_KeybdDecode+0xb8>)
 80036d8:	f000 f89e 	bl	8003818 <HID_ReadItem>
 80036dc:	71e0      	strb	r0, [r4, #7]
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0);
 80036de:	2100      	movs	r1, #0
 80036e0:	4814      	ldr	r0, [pc, #80]	; (8003734 <USBH_HID_KeybdDecode+0xbc>)
 80036e2:	f000 f899 	bl	8003818 <HID_ReadItem>
 80036e6:	7220      	strb	r0, [r4, #8]
    
    for(x=0; x < sizeof(keybd_info.keys); x++)
 80036e8:	2400      	movs	r4, #0
 80036ea:	e008      	b.n	80036fe <USBH_HID_KeybdDecode+0x86>
    {    
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 80036ec:	4621      	mov	r1, r4
 80036ee:	4812      	ldr	r0, [pc, #72]	; (8003738 <USBH_HID_KeybdDecode+0xc0>)
 80036f0:	f000 f892 	bl	8003818 <HID_ReadItem>
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <USBH_HID_KeybdDecode+0xa0>)
 80036f6:	4423      	add	r3, r4
 80036f8:	7258      	strb	r0, [r3, #9]
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0);
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0);
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0);
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0);
    
    for(x=0; x < sizeof(keybd_info.keys); x++)
 80036fa:	3401      	adds	r4, #1
 80036fc:	b2e4      	uxtb	r4, r4
 80036fe:	2c05      	cmp	r4, #5
 8003700:	d9f4      	bls.n	80036ec <USBH_HID_KeybdDecode+0x74>
    {    
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
    }
    
    return USBH_OK; 
 8003702:	2000      	movs	r0, #0
 8003704:	bd10      	pop	{r4, pc}
  uint8_t x;
  
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
  if(HID_Handle->length == 0)
  {
    return USBH_FAIL;
 8003706:	2002      	movs	r0, #2
 8003708:	bd10      	pop	{r4, pc}
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
    }
    
    return USBH_OK; 
  }
  return   USBH_FAIL;  
 800370a:	2002      	movs	r0, #2
}
 800370c:	bd10      	pop	{r4, pc}
 800370e:	bf00      	nop
 8003710:	200005e4 	.word	0x200005e4
 8003714:	08008a0c 	.word	0x08008a0c
 8003718:	200005ec 	.word	0x200005ec
 800371c:	080088c4 	.word	0x080088c4
 8003720:	08008844 	.word	0x08008844
 8003724:	08008824 	.word	0x08008824
 8003728:	080089ec 	.word	0x080089ec
 800372c:	08008804 	.word	0x08008804
 8003730:	080088a4 	.word	0x080088a4
 8003734:	08008864 	.word	0x08008864
 8003738:	08008884 	.word	0x08008884

0800373c <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800373c:	b538      	push	{r3, r4, r5, lr}
  uint32_t x;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;  
 800373e:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003742:	69dc      	ldr	r4, [r3, #28]
    
  keybd_info.lctrl=keybd_info.lshift= 0;
 8003744:	4a10      	ldr	r2, [pc, #64]	; (8003788 <USBH_HID_KeybdInit+0x4c>)
 8003746:	2300      	movs	r3, #0
 8003748:	7093      	strb	r3, [r2, #2]
 800374a:	7053      	strb	r3, [r2, #1]
  keybd_info.lalt=keybd_info.lgui= 0;
 800374c:	7113      	strb	r3, [r2, #4]
 800374e:	70d3      	strb	r3, [r2, #3]
  keybd_info.rctrl=keybd_info.rshift= 0;
 8003750:	7193      	strb	r3, [r2, #6]
 8003752:	7153      	strb	r3, [r2, #5]
  keybd_info.ralt=keybd_info.rgui=0;
 8003754:	7213      	strb	r3, [r2, #8]
 8003756:	71d3      	strb	r3, [r2, #7]
  
  
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8003758:	e004      	b.n	8003764 <USBH_HID_KeybdInit+0x28>
  {
    keybd_report_data[x]=0;
 800375a:	2500      	movs	r5, #0
 800375c:	4a0b      	ldr	r2, [pc, #44]	; (800378c <USBH_HID_KeybdInit+0x50>)
 800375e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
  keybd_info.lalt=keybd_info.lgui= 0;
  keybd_info.rctrl=keybd_info.rshift= 0;
  keybd_info.ralt=keybd_info.rgui=0;
  
  
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8003762:	3301      	adds	r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d9f8      	bls.n	800375a <USBH_HID_KeybdInit+0x1e>
  {
    keybd_report_data[x]=0;
  }
  
  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
 8003768:	8b23      	ldrh	r3, [r4, #24]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <USBH_HID_KeybdInit+0x36>
  {
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 800376e:	2302      	movs	r3, #2
 8003770:	8323      	strh	r3, [r4, #24]
  }
  HID_Handle->pData = (uint8_t*)keybd_report_data;
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <USBH_HID_KeybdInit+0x50>)
 8003774:	6163      	str	r3, [r4, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8003776:	2250      	movs	r2, #80	; 0x50
 8003778:	f500 718e 	add.w	r1, r0, #284	; 0x11c
 800377c:	f104 0008 	add.w	r0, r4, #8
 8003780:	f7ff feb6 	bl	80034f0 <fifo_init>
  
  return USBH_OK;    
}
 8003784:	2000      	movs	r0, #0
 8003786:	bd38      	pop	{r3, r4, r5, pc}
 8003788:	200005ec 	.word	0x200005ec
 800378c:	200005e4 	.word	0x200005e4

08003790 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8003790:	b508      	push	{r3, lr}
  if(USBH_HID_KeybdDecode(phost) == USBH_OK)
 8003792:	f7ff ff71 	bl	8003678 <USBH_HID_KeybdDecode>
 8003796:	b908      	cbnz	r0, 800379c <USBH_HID_GetKeybdInfo+0xc>
 {
  return &keybd_info;
 8003798:	4801      	ldr	r0, [pc, #4]	; (80037a0 <USBH_HID_GetKeybdInfo+0x10>)
 800379a:	bd08      	pop	{r3, pc}
 }
 else
 {
  return NULL; 
 800379c:	2000      	movs	r0, #0
 }  
}
 800379e:	bd08      	pop	{r3, pc}
 80037a0:	200005ec 	.word	0x200005ec

080037a4 <USBH_HID_GetASCIICode>:
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
  uint8_t   output;  
  if((info->lshift == 1) || (info->rshift))
 80037a4:	7883      	ldrb	r3, [r0, #2]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d001      	beq.n	80037ae <USBH_HID_GetASCIICode+0xa>
 80037aa:	7983      	ldrb	r3, [r0, #6]
 80037ac:	b12b      	cbz	r3, 80037ba <USBH_HID_GetASCIICode+0x16>
  {
  output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 80037ae:	7a43      	ldrb	r3, [r0, #9]
 80037b0:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <USBH_HID_GetASCIICode+0x24>)
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	4a05      	ldr	r2, [pc, #20]	; (80037cc <USBH_HID_GetASCIICode+0x28>)
 80037b6:	5cd0      	ldrb	r0, [r2, r3]
 80037b8:	4770      	bx	lr
  }
  else
  {
  output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 80037ba:	7a43      	ldrb	r3, [r0, #9]
 80037bc:	4a02      	ldr	r2, [pc, #8]	; (80037c8 <USBH_HID_GetASCIICode+0x24>)
 80037be:	5cd3      	ldrb	r3, [r2, r3]
 80037c0:	4a03      	ldr	r2, [pc, #12]	; (80037d0 <USBH_HID_GetASCIICode+0x2c>)
 80037c2:	5cd0      	ldrb	r0, [r2, r3]
  }
  return output;  
}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	08008a2c 	.word	0x08008a2c
 80037cc:	08008968 	.word	0x08008968
 80037d0:	080088e4 	.word	0x080088e4

080037d4 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80037d4:	b510      	push	{r4, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80037d6:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 80037da:	69dc      	ldr	r4, [r3, #28]

  mouse_info.x=0;
 80037dc:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <USBH_HID_MouseInit+0x3c>)
 80037de:	2300      	movs	r3, #0
 80037e0:	7013      	strb	r3, [r2, #0]
  mouse_info.y=0;
 80037e2:	7053      	strb	r3, [r2, #1]
  mouse_info.buttons[0]=0;
 80037e4:	7093      	strb	r3, [r2, #2]
  mouse_info.buttons[1]=0;
 80037e6:	70d3      	strb	r3, [r2, #3]
  mouse_info.buttons[2]=0;
 80037e8:	7113      	strb	r3, [r2, #4]
  
  mouse_report_data[0]=0;
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <USBH_HID_MouseInit+0x40>)
 80037ec:	6013      	str	r3, [r2, #0]
  
  if(HID_Handle->length > sizeof(mouse_report_data))
 80037ee:	8b23      	ldrh	r3, [r4, #24]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d901      	bls.n	80037f8 <USBH_HID_MouseInit+0x24>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 80037f4:	2304      	movs	r3, #4
 80037f6:	8323      	strh	r3, [r4, #24]
  }
  HID_Handle->pData = (uint8_t *)mouse_report_data;
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <USBH_HID_MouseInit+0x40>)
 80037fa:	6163      	str	r3, [r4, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 80037fc:	2228      	movs	r2, #40	; 0x28
 80037fe:	f500 718e 	add.w	r1, r0, #284	; 0x11c
 8003802:	f104 0008 	add.w	r0, r4, #8
 8003806:	f7ff fe73 	bl	80034f0 <fifo_init>

  return USBH_OK;  
}
 800380a:	2000      	movs	r0, #0
 800380c:	bd10      	pop	{r4, pc}
 800380e:	bf00      	nop
 8003810:	200005fc 	.word	0x200005fc
 8003814:	20000604 	.word	0x20000604

08003818 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8003818:	b4f0      	push	{r4, r5, r6, r7}
 800381a:	4606      	mov	r6, r0
  uint32_t val=0;
  uint32_t x=0;
  uint32_t bofs;
  uint8_t *data=ri->data;
 800381c:	6807      	ldr	r7, [r0, #0]
  uint8_t shift=ri->shift;
 800381e:	7a00      	ldrb	r0, [r0, #8]
  
  /* get the logical value of the item */
  
  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0)
 8003820:	7a73      	ldrb	r3, [r6, #9]
 8003822:	b143      	cbz	r3, 8003836 <HID_ReadItem+0x1e>
  { 
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8003824:	428b      	cmp	r3, r1
 8003826:	d93a      	bls.n	800389e <HID_ReadItem+0x86>
    {
      return(0);
    }
    
    /* calculate bit offset */
    bofs = ndx*ri->size;
 8003828:	6874      	ldr	r4, [r6, #4]
    bofs += shift;
 800382a:	fb04 0401 	mla	r4, r4, r1, r0
    /* calculate byte offset + shift pair from bit offset. */    
    data+=bofs/8;
 800382e:	eb07 07d4 	add.w	r7, r7, r4, lsr #3
    shift=(uint8_t)(bofs%8);
 8003832:	f004 0007 	and.w	r0, r4, #7
  }
  /* read data bytes in little endian order */
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 8003836:	2300      	movs	r3, #0
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
  uint32_t val=0;
 8003838:	461c      	mov	r4, r3
    /* calculate byte offset + shift pair from bit offset. */    
    data+=bofs/8;
    shift=(uint8_t)(bofs%8);
  }
  /* read data bytes in little endian order */
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 800383a:	e004      	b.n	8003846 <HID_ReadItem+0x2e>
  {
    val=(uint32_t)(*data << (x*8));
 800383c:	783a      	ldrb	r2, [r7, #0]
 800383e:	00dc      	lsls	r4, r3, #3
 8003840:	fa02 f404 	lsl.w	r4, r2, r4
    /* calculate byte offset + shift pair from bit offset. */    
    data+=bofs/8;
    shift=(uint8_t)(bofs%8);
  }
  /* read data bytes in little endian order */
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 8003844:	3301      	adds	r3, #1
 8003846:	6872      	ldr	r2, [r6, #4]
 8003848:	f012 0f07 	tst.w	r2, #7
 800384c:	d002      	beq.n	8003854 <HID_ReadItem+0x3c>
 800384e:	08d5      	lsrs	r5, r2, #3
 8003850:	3501      	adds	r5, #1
 8003852:	e000      	b.n	8003856 <HID_ReadItem+0x3e>
 8003854:	08d5      	lsrs	r5, r2, #3
 8003856:	42ab      	cmp	r3, r5
 8003858:	d3f0      	bcc.n	800383c <HID_ReadItem+0x24>
  {
    val=(uint32_t)(*data << (x*8));
  }    
  val=(val >> shift) & ((1<<ri->size)-1);
 800385a:	40c4      	lsrs	r4, r0
 800385c:	2301      	movs	r3, #1
 800385e:	4093      	lsls	r3, r2
 8003860:	1e58      	subs	r0, r3, #1
 8003862:	4004      	ands	r4, r0
  
  if (val < ri->logical_min || val > ri->logical_max)
 8003864:	68f1      	ldr	r1, [r6, #12]
 8003866:	428c      	cmp	r4, r1
 8003868:	d31b      	bcc.n	80038a2 <HID_ReadItem+0x8a>
 800386a:	6931      	ldr	r1, [r6, #16]
 800386c:	428c      	cmp	r4, r1
 800386e:	d81a      	bhi.n	80038a6 <HID_ReadItem+0x8e>
    return(0);
  }
  
  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1<<(ri->size-1))))
 8003870:	7ab1      	ldrb	r1, [r6, #10]
 8003872:	b171      	cbz	r1, 8003892 <HID_ReadItem+0x7a>
 8003874:	3a01      	subs	r2, #1
 8003876:	2101      	movs	r1, #1
 8003878:	fa01 f202 	lsl.w	r2, r1, r2
 800387c:	4222      	tst	r2, r4
 800387e:	d008      	beq.n	8003892 <HID_ReadItem+0x7a>
  {
    /* yes, so sign extend value to 32 bits. */
    int vs=(int)((-1 & ~((1<<(ri->size))-1)) | val);
 8003880:	425b      	negs	r3, r3
 8003882:	ea43 0004 	orr.w	r0, r3, r4
    
    if(ri->resolution == 1)
 8003886:	69f3      	ldr	r3, [r6, #28]
 8003888:	428b      	cmp	r3, r1
 800388a:	d00f      	beq.n	80038ac <HID_ReadItem+0x94>
    {
      return((uint32_t)vs);
    }
    return((uint32_t)(vs*ri->resolution));
 800388c:	fb03 f000 	mul.w	r0, r3, r0
 8003890:	e00c      	b.n	80038ac <HID_ReadItem+0x94>
  }
  else
  {
    if(ri->resolution == 1)
 8003892:	69f0      	ldr	r0, [r6, #28]
 8003894:	2801      	cmp	r0, #1
 8003896:	d008      	beq.n	80038aa <HID_ReadItem+0x92>
    {
      return(val);
    }
    return(val*ri->resolution);    
 8003898:	fb00 f004 	mul.w	r0, r0, r4
 800389c:	e006      	b.n	80038ac <HID_ReadItem+0x94>
  if (ri->count > 0)
  { 
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
    {
      return(0);
 800389e:	2000      	movs	r0, #0
 80038a0:	e004      	b.n	80038ac <HID_ReadItem+0x94>
  }    
  val=(val >> shift) & ((1<<ri->size)-1);
  
  if (val < ri->logical_min || val > ri->logical_max)
  {
    return(0);
 80038a2:	2000      	movs	r0, #0
 80038a4:	e002      	b.n	80038ac <HID_ReadItem+0x94>
 80038a6:	2000      	movs	r0, #0
 80038a8:	e000      	b.n	80038ac <HID_ReadItem+0x94>
  }
  else
  {
    if(ri->resolution == 1)
    {
      return(val);
 80038aa:	4620      	mov	r0, r4
    }
    return(val*ri->resolution);    
  }  
}
 80038ac:	bcf0      	pop	{r4, r5, r6, r7}
 80038ae:	4770      	bx	lr

080038b0 <DeInitStateMachine>:
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
  uint32_t i = 0;
 80038b0:	2300      	movs	r3, #0

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80038b2:	e006      	b.n	80038c2 <DeInitStateMachine+0x12>
  {
    phost->Pipes[i] = 0;
 80038b4:	f103 02de 	add.w	r2, r3, #222	; 0xde
 80038b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80038bc:	2100      	movs	r1, #0
 80038be:	6051      	str	r1, [r2, #4]
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80038c0:	3301      	adds	r3, #1
 80038c2:	2b0e      	cmp	r3, #14
 80038c4:	d9f6      	bls.n	80038b4 <DeInitStateMachine+0x4>
 80038c6:	2300      	movs	r3, #0
 80038c8:	e004      	b.n	80038d4 <DeInitStateMachine+0x24>
    phost->Pipes[i] = 0;
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 80038ca:	18c2      	adds	r2, r0, r3
 80038cc:	2100      	movs	r1, #0
 80038ce:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 80038d2:	3301      	adds	r3, #1
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d8:	d3f7      	bcc.n	80038ca <DeInitStateMachine+0x1a>
  {
    phost->device.Data[i] = 0;
  }
  
  phost->gState = HOST_IDLE;
 80038da:	2300      	movs	r3, #0
 80038dc:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80038de:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 80038e0:	2201      	movs	r2, #1
 80038e2:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 80038e4:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  
  phost->Control.state = CTRL_SETUP;
 80038e8:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 80038ea:	2140      	movs	r1, #64	; 0x40
 80038ec:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 80038ee:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80038f0:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80038f4:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d
  
  return USBH_OK;
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	4770      	bx	lr

080038fc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80038fc:	b508      	push	{r3, lr}
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80038fe:	7803      	ldrb	r3, [r0, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b0a      	cmp	r3, #10
 8003904:	d104      	bne.n	8003910 <USBH_HandleSof+0x14>
 8003906:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 800390a:	b10b      	cbz	r3, 8003910 <USBH_HandleSof+0x14>
  {
    phost->pActiveClass->SOFProcess(phost);
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	4798      	blx	r3
 8003910:	bd08      	pop	{r3, pc}
 8003912:	bf00      	nop

08003914 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	4604      	mov	r4, r0
  USBH_StatusTypeDef Status = USBH_BUSY;  
  
  switch (phost->EnumState)
 800391a:	7843      	ldrb	r3, [r0, #1]
 800391c:	2b07      	cmp	r3, #7
 800391e:	f200 80e7 	bhi.w	8003af0 <USBH_HandleEnum+0x1dc>
 8003922:	e8df f003 	tbb	[pc, r3]
 8003926:	2b04      	.short	0x2b04
 8003928:	8a807745 	.word	0x8a807745
 800392c:	caaa      	.short	0xcaaa
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 800392e:	2108      	movs	r1, #8
 8003930:	f000 fd40 	bl	80043b4 <USBH_Get_DevDesc>
 8003934:	2800      	cmp	r0, #0
 8003936:	f040 80dd 	bne.w	8003af4 <USBH_HandleEnum+0x1e0>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800393a:	f894 2327 	ldrb.w	r2, [r4, #807]	; 0x327
 800393e:	71a2      	strb	r2, [r4, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003940:	2501      	movs	r5, #1
 8003942:	7065      	strb	r5, [r4, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8003944:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003948:	7921      	ldrb	r1, [r4, #4]
 800394a:	9202      	str	r2, [sp, #8]
 800394c:	2600      	movs	r6, #0
 800394e:	9601      	str	r6, [sp, #4]
 8003950:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003954:	9200      	str	r2, [sp, #0]
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	4620      	mov	r0, r4
 800395a:	f000 fe01 	bl	8004560 <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800395e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003962:	7961      	ldrb	r1, [r4, #5]
 8003964:	79a2      	ldrb	r2, [r4, #6]
 8003966:	9202      	str	r2, [sp, #8]
 8003968:	9601      	str	r6, [sp, #4]
 800396a:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800396e:	9200      	str	r2, [sp, #0]
 8003970:	4632      	mov	r2, r6
 8003972:	4620      	mov	r0, r4
 8003974:	f000 fdf4 	bl	8004560 <USBH_OpenPipe>
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8003978:	4628      	mov	r0, r5
 800397a:	e0ca      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800397c:	2112      	movs	r1, #18
 800397e:	f000 fd19 	bl	80043b4 <USBH_Get_DevDesc>
 8003982:	2800      	cmp	r0, #0
 8003984:	f040 80b8 	bne.w	8003af8 <USBH_HandleEnum+0x1e4>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
 8003988:	f8b4 132a 	ldrh.w	r1, [r4, #810]	; 0x32a
 800398c:	4862      	ldr	r0, [pc, #392]	; (8003b18 <USBH_HandleEnum+0x204>)
 800398e:	f001 fbd3 	bl	8005138 <printf>
 8003992:	200a      	movs	r0, #10
 8003994:	f001 fbe8 	bl	8005168 <putchar>
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
 8003998:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
 800399c:	485f      	ldr	r0, [pc, #380]	; (8003b1c <USBH_HandleEnum+0x208>)
 800399e:	f001 fbcb 	bl	8005138 <printf>
 80039a2:	200a      	movs	r0, #10
 80039a4:	f001 fbe0 	bl	8005168 <putchar>
      
      phost->EnumState = ENUM_SET_ADDR;
 80039a8:	2302      	movs	r3, #2
 80039aa:	7063      	strb	r3, [r4, #1]
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
 80039ac:	2001      	movs	r0, #1
 80039ae:	e0b0      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
    }
    break;
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80039b0:	2101      	movs	r1, #1
 80039b2:	f000 fd47 	bl	8004444 <USBH_SetAddress>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	f040 80a0 	bne.w	8003afc <USBH_HandleEnum+0x1e8>
    {
      USBH_Delay(2);
 80039bc:	2002      	movs	r0, #2
 80039be:	f001 f95f 	bl	8004c80 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80039c2:	2501      	movs	r5, #1
 80039c4:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 80039c8:	4629      	mov	r1, r5
 80039ca:	4855      	ldr	r0, [pc, #340]	; (8003b20 <USBH_HandleEnum+0x20c>)
 80039cc:	f001 fbb4 	bl	8005138 <printf>
 80039d0:	200a      	movs	r0, #10
 80039d2:	f001 fbc9 	bl	8005168 <putchar>
      phost->EnumState = ENUM_GET_CFG_DESC;
 80039d6:	2303      	movs	r3, #3
 80039d8:	7063      	strb	r3, [r4, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80039da:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80039de:	7921      	ldrb	r1, [r4, #4]
 80039e0:	79a2      	ldrb	r2, [r4, #6]
 80039e2:	9202      	str	r2, [sp, #8]
 80039e4:	2600      	movs	r6, #0
 80039e6:	9601      	str	r6, [sp, #4]
 80039e8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80039ec:	9200      	str	r2, [sp, #0]
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	4620      	mov	r0, r4
 80039f2:	f000 fdb5 	bl	8004560 <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80039f6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80039fa:	7961      	ldrb	r1, [r4, #5]
 80039fc:	79a2      	ldrb	r2, [r4, #6]
 80039fe:	9202      	str	r2, [sp, #8]
 8003a00:	9601      	str	r6, [sp, #4]
 8003a02:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003a06:	9200      	str	r2, [sp, #0]
 8003a08:	4632      	mov	r2, r6
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f000 fda8 	bl	8004560 <USBH_OpenPipe>
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8003a10:	4628      	mov	r0, r5
 8003a12:	e07e      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
    }
    break;
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 8003a14:	2109      	movs	r1, #9
 8003a16:	f000 fce5 	bl	80043e4 <USBH_Get_CfgDesc>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d170      	bne.n	8003b00 <USBH_HandleEnum+0x1ec>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8003a1e:	2304      	movs	r3, #4
 8003a20:	7063      	strb	r3, [r4, #1]
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8003a22:	2001      	movs	r0, #1
 8003a24:	e075      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 8003a26:	f8b0 1334 	ldrh.w	r1, [r0, #820]	; 0x334
 8003a2a:	f000 fcdb 	bl	80043e4 <USBH_Get_CfgDesc>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d168      	bne.n	8003b04 <USBH_HandleEnum+0x1f0>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 8003a32:	2305      	movs	r3, #5
 8003a34:	7063      	strb	r3, [r4, #1]
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8003a36:	2001      	movs	r0, #1
 8003a38:	e06b      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8003a3a:	f890 132e 	ldrb.w	r1, [r0, #814]	; 0x32e
 8003a3e:	b191      	cbz	r1, 8003a66 <USBH_HandleEnum+0x152>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 8003a40:	f500 758e 	add.w	r5, r0, #284	; 0x11c
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8003a44:	23ff      	movs	r3, #255	; 0xff
 8003a46:	462a      	mov	r2, r5
 8003a48:	f000 fce4 	bl	8004414 <USBH_Get_StringDesc>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d15b      	bne.n	8003b08 <USBH_HandleEnum+0x1f4>
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
 8003a50:	4629      	mov	r1, r5
 8003a52:	4834      	ldr	r0, [pc, #208]	; (8003b24 <USBH_HandleEnum+0x210>)
 8003a54:	f001 fb70 	bl	8005138 <printf>
 8003a58:	200a      	movs	r0, #10
 8003a5a:	f001 fb85 	bl	8005168 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003a5e:	2306      	movs	r3, #6
 8003a60:	7063      	strb	r3, [r4, #1]
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8003a62:	2001      	movs	r0, #1
 8003a64:	e055      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
#endif          
      }
    }
    else
    {
     USBH_UsrLog("Manufacturer : N/A");      
 8003a66:	4830      	ldr	r0, [pc, #192]	; (8003b28 <USBH_HandleEnum+0x214>)
 8003a68:	f001 fb66 	bl	8005138 <printf>
 8003a6c:	200a      	movs	r0, #10
 8003a6e:	f001 fb7b 	bl	8005168 <putchar>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 8003a72:	2306      	movs	r3, #6
 8003a74:	7063      	strb	r3, [r4, #1]
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8003a76:	2001      	movs	r0, #1
 8003a78:	e04b      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
#endif       
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 8003a7a:	f890 132f 	ldrb.w	r1, [r0, #815]	; 0x32f
 8003a7e:	b191      	cbz	r1, 8003aa6 <USBH_HandleEnum+0x192>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 8003a80:	f500 758e 	add.w	r5, r0, #284	; 0x11c
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8003a84:	23ff      	movs	r3, #255	; 0xff
 8003a86:	462a      	mov	r2, r5
 8003a88:	f000 fcc4 	bl	8004414 <USBH_Get_StringDesc>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d13d      	bne.n	8003b0c <USBH_HandleEnum+0x1f8>
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
 8003a90:	4629      	mov	r1, r5
 8003a92:	4826      	ldr	r0, [pc, #152]	; (8003b2c <USBH_HandleEnum+0x218>)
 8003a94:	f001 fb50 	bl	8005138 <printf>
 8003a98:	200a      	movs	r0, #10
 8003a9a:	f001 fb65 	bl	8005168 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 8003a9e:	2307      	movs	r3, #7
 8003aa0:	7063      	strb	r3, [r4, #1]
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	e035      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
      }
    }
    else
    {
      USBH_UsrLog("Product : N/A");
 8003aa6:	4822      	ldr	r0, [pc, #136]	; (8003b30 <USBH_HandleEnum+0x21c>)
 8003aa8:	f001 fb46 	bl	8005138 <printf>
 8003aac:	200a      	movs	r0, #10
 8003aae:	f001 fb5b 	bl	8005168 <putchar>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 8003ab2:	2307      	movs	r3, #7
 8003ab4:	7063      	strb	r3, [r4, #1]
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	e02b      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 8003aba:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 8003abe:	b179      	cbz	r1, 8003ae0 <USBH_HandleEnum+0x1cc>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 8003ac0:	f500 758e 	add.w	r5, r0, #284	; 0x11c
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8003ac4:	23ff      	movs	r3, #255	; 0xff
 8003ac6:	462a      	mov	r2, r5
 8003ac8:	f000 fca4 	bl	8004414 <USBH_Get_StringDesc>
 8003acc:	bb00      	cbnz	r0, 8003b10 <USBH_HandleEnum+0x1fc>
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
 8003ace:	4629      	mov	r1, r5
 8003ad0:	4818      	ldr	r0, [pc, #96]	; (8003b34 <USBH_HandleEnum+0x220>)
 8003ad2:	f001 fb31 	bl	8005138 <printf>
 8003ad6:	200a      	movs	r0, #10
 8003ad8:	f001 fb46 	bl	8005168 <putchar>
        Status = USBH_OK;
 8003adc:	2000      	movs	r0, #0
 8003ade:	e018      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
      }
    }
    else
    {
      USBH_UsrLog("Serial Number : N/A"); 
 8003ae0:	4815      	ldr	r0, [pc, #84]	; (8003b38 <USBH_HandleEnum+0x224>)
 8003ae2:	f001 fb29 	bl	8005138 <printf>
 8003ae6:	200a      	movs	r0, #10
 8003ae8:	f001 fb3e 	bl	8005168 <putchar>
      Status = USBH_OK;
 8003aec:	2000      	movs	r0, #0
 8003aee:	e010      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8003af0:	2001      	movs	r0, #1
 8003af2:	e00e      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
 8003af4:	2001      	movs	r0, #1
 8003af6:	e00c      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
 8003af8:	2001      	movs	r0, #1
 8003afa:	e00a      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
 8003afc:	2001      	movs	r0, #1
 8003afe:	e008      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
 8003b00:	2001      	movs	r0, #1
 8003b02:	e006      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
 8003b04:	2001      	movs	r0, #1
 8003b06:	e004      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
 8003b08:	2001      	movs	r0, #1
 8003b0a:	e002      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	e000      	b.n	8003b12 <USBH_HandleEnum+0x1fe>
 8003b10:	2001      	movs	r0, #1
    
  default:
    break;
  }  
  return Status;
}
 8003b12:	b004      	add	sp, #16
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
 8003b16:	bf00      	nop
 8003b18:	08008b14 	.word	0x08008b14
 8003b1c:	08008b20 	.word	0x08008b20
 8003b20:	08008b2c 	.word	0x08008b2c
 8003b24:	08008b44 	.word	0x08008b44
 8003b28:	08008b58 	.word	0x08008b58
 8003b2c:	08008b6c 	.word	0x08008b6c
 8003b30:	08008b7c 	.word	0x08008b7c
 8003b34:	08008b8c 	.word	0x08008b8c
 8003b38:	08008ba0 	.word	0x08008ba0

08003b3c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 8003b3c:	b538      	push	{r3, r4, r5, lr}
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8003b3e:	b950      	cbnz	r0, 8003b56 <USBH_Init+0x1a>
  {
    USBH_ErrLog("Invalid Host handle");
 8003b40:	480e      	ldr	r0, [pc, #56]	; (8003b7c <USBH_Init+0x40>)
 8003b42:	f001 faf9 	bl	8005138 <printf>
 8003b46:	480e      	ldr	r0, [pc, #56]	; (8003b80 <USBH_Init+0x44>)
 8003b48:	f001 faf6 	bl	8005138 <printf>
 8003b4c:	200a      	movs	r0, #10
 8003b4e:	f001 fb0b 	bl	8005168 <putchar>
    return USBH_FAIL; 
 8003b52:	2002      	movs	r0, #2
 8003b54:	bd38      	pop	{r3, r4, r5, pc}
 8003b56:	460d      	mov	r5, r1
 8003b58:	4604      	mov	r4, r0
  }
  
  /* Set DRiver ID */
  phost->id = id;
 8003b5a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
  phost->ClassNumber = 0;
 8003b64:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 8003b68:	f7ff fea2 	bl	80038b0 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 8003b6c:	b10d      	cbz	r5, 8003b72 <USBH_Init+0x36>
  {
    phost->pUser = pUsrFunc;
 8003b6e:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8003b72:	4620      	mov	r0, r4
 8003b74:	f000 ffde 	bl	8004b34 <USBH_LL_Init>
  return USBH_OK;
 8003b78:	2000      	movs	r0, #0
}
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}
 8003b7c:	08008bb4 	.word	0x08008bb4
 8003b80:	08008bbc 	.word	0x08008bbc

08003b84 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8003b84:	b508      	push	{r3, lr}
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 8003b86:	b1b1      	cbz	r1, 8003bb6 <USBH_RegisterClass+0x32>
 8003b88:	460a      	mov	r2, r1
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8003b8a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003b8e:	b93b      	cbnz	r3, 8003ba0 <USBH_RegisterClass+0x1c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8003b90:	1c59      	adds	r1, r3, #1
 8003b92:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
 8003b96:	33dc      	adds	r3, #220	; 0xdc
 8003b98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      status = USBH_OK;
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	bd08      	pop	{r3, pc}
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8003ba0:	480a      	ldr	r0, [pc, #40]	; (8003bcc <USBH_RegisterClass+0x48>)
 8003ba2:	f001 fac9 	bl	8005138 <printf>
 8003ba6:	480a      	ldr	r0, [pc, #40]	; (8003bd0 <USBH_RegisterClass+0x4c>)
 8003ba8:	f001 fac6 	bl	8005138 <printf>
 8003bac:	200a      	movs	r0, #10
 8003bae:	f001 fadb 	bl	8005168 <putchar>
      status = USBH_FAIL; 
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	bd08      	pop	{r3, pc}
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8003bb6:	4805      	ldr	r0, [pc, #20]	; (8003bcc <USBH_RegisterClass+0x48>)
 8003bb8:	f001 fabe 	bl	8005138 <printf>
 8003bbc:	4805      	ldr	r0, [pc, #20]	; (8003bd4 <USBH_RegisterClass+0x50>)
 8003bbe:	f001 fabb 	bl	8005138 <printf>
 8003bc2:	200a      	movs	r0, #10
 8003bc4:	f001 fad0 	bl	8005168 <putchar>
    status = USBH_FAIL; 
 8003bc8:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003bca:	bd08      	pop	{r3, pc}
 8003bcc:	08008bb4 	.word	0x08008bb4
 8003bd0:	08008bd0 	.word	0x08008bd0
 8003bd4:	08008bec 	.word	0x08008bec

08003bd8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8003bd8:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8003bda:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 8003bde:	428b      	cmp	r3, r1
 8003be0:	d926      	bls.n	8003c30 <USBH_SelectInterface+0x58>
 8003be2:	4605      	mov	r5, r0
 8003be4:	460c      	mov	r4, r1
  {
    phost->device.current_interface = interface;
 8003be6:	f885 131f 	strb.w	r1, [r5, #799]	; 0x31f
    USBH_UsrLog ("Switching to Interface (#%d)", interface);
 8003bea:	4817      	ldr	r0, [pc, #92]	; (8003c48 <USBH_SelectInterface+0x70>)
 8003bec:	f001 faa4 	bl	8005138 <printf>
 8003bf0:	200a      	movs	r0, #10
 8003bf2:	f001 fab9 	bl	8005168 <putchar>
    USBH_UsrLog ("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass );
 8003bf6:	231a      	movs	r3, #26
 8003bf8:	fb03 5404 	mla	r4, r3, r4, r5
 8003bfc:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
 8003c00:	4812      	ldr	r0, [pc, #72]	; (8003c4c <USBH_SelectInterface+0x74>)
 8003c02:	f001 fa99 	bl	8005138 <printf>
 8003c06:	200a      	movs	r0, #10
 8003c08:	f001 faae 	bl	8005168 <putchar>
    USBH_UsrLog ("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass );
 8003c0c:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
 8003c10:	480f      	ldr	r0, [pc, #60]	; (8003c50 <USBH_SelectInterface+0x78>)
 8003c12:	f001 fa91 	bl	8005138 <printf>
 8003c16:	200a      	movs	r0, #10
 8003c18:	f001 faa6 	bl	8005168 <putchar>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
 8003c1c:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
 8003c20:	480c      	ldr	r0, [pc, #48]	; (8003c54 <USBH_SelectInterface+0x7c>)
 8003c22:	f001 fa89 	bl	8005138 <printf>
 8003c26:	200a      	movs	r0, #10
 8003c28:	f001 fa9e 	bl	8005168 <putchar>
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	bd38      	pop	{r3, r4, r5, pc}
    USBH_UsrLog ("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass );
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
 8003c30:	4809      	ldr	r0, [pc, #36]	; (8003c58 <USBH_SelectInterface+0x80>)
 8003c32:	f001 fa81 	bl	8005138 <printf>
 8003c36:	4809      	ldr	r0, [pc, #36]	; (8003c5c <USBH_SelectInterface+0x84>)
 8003c38:	f001 fa7e 	bl	8005138 <printf>
 8003c3c:	200a      	movs	r0, #10
 8003c3e:	f001 fa93 	bl	8005168 <putchar>
    status = USBH_FAIL; 
 8003c42:	2002      	movs	r0, #2
  }
  return status;  
}
 8003c44:	bd38      	pop	{r3, r4, r5, pc}
 8003c46:	bf00      	nop
 8003c48:	08008c04 	.word	0x08008c04
 8003c4c:	08008c24 	.word	0x08008c24
 8003c50:	08008c34 	.word	0x08008c34
 8003c54:	08008c44 	.word	0x08008c44
 8003c58:	08008bb4 	.word	0x08008bb4
 8003c5c:	08008c54 	.word	0x08008c54

08003c60 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8003c60:	b470      	push	{r4, r5, r6}
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 8003c62:	2400      	movs	r4, #0
  
  pif = (USBH_InterfaceDescTypeDef *)0;
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003c64:	e01f      	b.n	8003ca6 <USBH_FindInterface+0x46>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8003c66:	4626      	mov	r6, r4
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8003c68:	251a      	movs	r5, #26
 8003c6a:	fb05 0504 	mla	r5, r5, r4, r0
 8003c6e:	f895 5341 	ldrb.w	r5, [r5, #833]	; 0x341
 8003c72:	428d      	cmp	r5, r1
 8003c74:	d001      	beq.n	8003c7a <USBH_FindInterface+0x1a>
 8003c76:	29ff      	cmp	r1, #255	; 0xff
 8003c78:	d113      	bne.n	8003ca2 <USBH_FindInterface+0x42>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8003c7a:	251a      	movs	r5, #26
 8003c7c:	fb05 0506 	mla	r5, r5, r6, r0
 8003c80:	f895 5342 	ldrb.w	r5, [r5, #834]	; 0x342
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8003c84:	4295      	cmp	r5, r2
 8003c86:	d001      	beq.n	8003c8c <USBH_FindInterface+0x2c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8003c88:	2aff      	cmp	r2, #255	; 0xff
 8003c8a:	d10a      	bne.n	8003ca2 <USBH_FindInterface+0x42>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8003c8c:	251a      	movs	r5, #26
 8003c8e:	fb05 0606 	mla	r6, r5, r6, r0
 8003c92:	f896 5343 	ldrb.w	r5, [r6, #835]	; 0x343
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8003c96:	429d      	cmp	r5, r3
 8003c98:	d001      	beq.n	8003c9e <USBH_FindInterface+0x3e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8003c9a:	2bff      	cmp	r3, #255	; 0xff
 8003c9c:	d101      	bne.n	8003ca2 <USBH_FindInterface+0x42>
    {
      return  if_ix;
 8003c9e:	b2e0      	uxtb	r0, r4
 8003ca0:	e004      	b.n	8003cac <USBH_FindInterface+0x4c>
    }
    if_ix++;
 8003ca2:	3401      	adds	r4, #1
 8003ca4:	b264      	sxtb	r4, r4
  int8_t                        if_ix = 0;
  
  pif = (USBH_InterfaceDescTypeDef *)0;
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003ca6:	2c01      	cmp	r4, #1
 8003ca8:	dddd      	ble.n	8003c66 <USBH_FindInterface+0x6>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFF;
 8003caa:	20ff      	movs	r0, #255	; 0xff
}
 8003cac:	bc70      	pop	{r4, r5, r6}
 8003cae:	4770      	bx	lr

08003cb0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003cb4:	f000 ff68 	bl	8004b88 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f000 ffc0 	bl	8004c40 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	bd10      	pop	{r4, pc}

08003cc4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003cc4:	b530      	push	{r4, r5, lr}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 8003cd0:	7803      	ldrb	r3, [r0, #0]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b0a      	cmp	r3, #10
 8003cd6:	f200 8104 	bhi.w	8003ee2 <USBH_Process+0x21e>
 8003cda:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003cde:	000b      	.short	0x000b
 8003ce0:	001a0102 	.word	0x001a0102
 8003ce4:	010200f7 	.word	0x010200f7
 8003ce8:	00d60050 	.word	0x00d60050
 8003cec:	0078006e 	.word	0x0078006e
 8003cf0:	00f10088 	.word	0x00f10088
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8003cf4:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8003cf8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003cfc:	f000 80f1 	beq.w	8003ee2 <USBH_Process+0x21e>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 8003d00:	2301      	movs	r3, #1
 8003d02:	7003      	strb	r3, [r0, #0]
      USBH_Delay(200); 
 8003d04:	20c8      	movs	r0, #200	; 0xc8
 8003d06:	f000 ffbb 	bl	8004c80 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f000 ff5c 	bl	8004bc8 <USBH_LL_ResetPort>
 8003d10:	e0e7      	b.n	8003ee2 <USBH_Process+0x21e>
  case HOST_DEV_WAIT_FOR_ATTACHMENT:
    break;    
    
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
 8003d12:	4875      	ldr	r0, [pc, #468]	; (8003ee8 <USBH_Process+0x224>)
 8003d14:	f001 fa10 	bl	8005138 <printf>
 8003d18:	200a      	movs	r0, #10
 8003d1a:	f001 fa25 	bl	8005168 <putchar>
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 8003d1e:	2064      	movs	r0, #100	; 0x64
 8003d20:	f000 ffae 	bl	8004c80 <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003d24:	4620      	mov	r0, r4
 8003d26:	f000 ff3f 	bl	8004ba8 <USBH_LL_GetSpeed>
 8003d2a:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    
    phost->gState = HOST_ENUMERATION;
 8003d2e:	2305      	movs	r3, #5
 8003d30:	7023      	strb	r3, [r4, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8003d32:	2100      	movs	r1, #0
 8003d34:	4620      	mov	r0, r4
 8003d36:	f000 fc29 	bl	800458c <USBH_AllocPipe>
 8003d3a:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8003d3c:	2180      	movs	r1, #128	; 0x80
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f000 fc24 	bl	800458c <USBH_AllocPipe>
 8003d44:	4601      	mov	r1, r0
 8003d46:	7120      	strb	r0, [r4, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8003d48:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003d4c:	79a2      	ldrb	r2, [r4, #6]
 8003d4e:	9202      	str	r2, [sp, #8]
 8003d50:	2500      	movs	r5, #0
 8003d52:	9501      	str	r5, [sp, #4]
 8003d54:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003d58:	9200      	str	r2, [sp, #0]
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f000 fbff 	bl	8004560 <USBH_OpenPipe>
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8003d62:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003d66:	7961      	ldrb	r1, [r4, #5]
 8003d68:	79a2      	ldrb	r2, [r4, #6]
 8003d6a:	9202      	str	r2, [sp, #8]
 8003d6c:	9501      	str	r5, [sp, #4]
 8003d6e:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003d72:	9200      	str	r2, [sp, #0]
 8003d74:	462a      	mov	r2, r5
 8003d76:	4620      	mov	r0, r4
 8003d78:	f000 fbf2 	bl	8004560 <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif    
    
    break;
 8003d7c:	e0b1      	b.n	8003ee2 <USBH_Process+0x21e>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8003d7e:	f7ff fdc9 	bl	8003914 <USBH_HandleEnum>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	f040 80ad 	bne.w	8003ee2 <USBH_Process+0x21e>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
 8003d88:	4858      	ldr	r0, [pc, #352]	; (8003eec <USBH_Process+0x228>)
 8003d8a:	f001 f9d5 	bl	8005138 <printf>
 8003d8e:	200a      	movs	r0, #10
 8003d90:	f001 f9ea 	bl	8005168 <putchar>
      phost->device.current_interface = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 8003d9a:	f894 3331 	ldrb.w	r3, [r4, #817]	; 0x331
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d108      	bne.n	8003db4 <USBH_Process+0xf0>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
 8003da2:	4853      	ldr	r0, [pc, #332]	; (8003ef0 <USBH_Process+0x22c>)
 8003da4:	f001 f9c8 	bl	8005138 <printf>
 8003da8:	200a      	movs	r0, #10
 8003daa:	f001 f9dd 	bl	8005168 <putchar>
        phost->gState  = HOST_SET_CONFIGURATION;        
 8003dae:	2308      	movs	r3, #8
 8003db0:	7023      	strb	r3, [r4, #0]
 8003db2:	e096      	b.n	8003ee2 <USBH_Process+0x21e>
        
      }
      else
      {
        phost->gState  = HOST_INPUT; 
 8003db4:	2307      	movs	r3, #7
 8003db6:	7023      	strb	r3, [r4, #0]
 8003db8:	e093      	b.n	8003ee2 <USBH_Process+0x21e>
    break;
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8003dba:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 808f 	beq.w	8003ee2 <USBH_Process+0x21e>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8003dc8:	2308      	movs	r3, #8
 8003dca:	7023      	strb	r3, [r4, #0]
 8003dcc:	e089      	b.n	8003ee2 <USBH_Process+0x21e>
    }
    break;
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8003dce:	f890 1337 	ldrb.w	r1, [r0, #823]	; 0x337
 8003dd2:	f000 fb47 	bl	8004464 <USBH_SetCfg>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	f040 8083 	bne.w	8003ee2 <USBH_Process+0x21e>
    {
      phost->gState  = HOST_CHECK_CLASS;
 8003ddc:	2309      	movs	r3, #9
 8003dde:	7023      	strb	r3, [r4, #0]
      USBH_UsrLog ("Default configuration set.");
 8003de0:	4844      	ldr	r0, [pc, #272]	; (8003ef4 <USBH_Process+0x230>)
 8003de2:	f001 f9a9 	bl	8005138 <printf>
 8003de6:	200a      	movs	r0, #10
 8003de8:	f001 f9be 	bl	8005168 <putchar>
 8003dec:	e079      	b.n	8003ee2 <USBH_Process+0x21e>
    
    break;
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 8003dee:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003df2:	b933      	cbnz	r3, 8003e02 <USBH_Process+0x13e>
    {
      USBH_UsrLog ("No Class has been registered.");
 8003df4:	4840      	ldr	r0, [pc, #256]	; (8003ef8 <USBH_Process+0x234>)
 8003df6:	f001 f99f 	bl	8005138 <printf>
 8003dfa:	200a      	movs	r0, #10
 8003dfc:	f001 f9b4 	bl	8005168 <putchar>
 8003e00:	e06f      	b.n	8003ee2 <USBH_Process+0x21e>
    }
    else
    {
      phost->pActiveClass = NULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
      
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 8003e08:	e010      	b.n	8003e2c <USBH_Process+0x168>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8003e0a:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8003e0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e12:	7911      	ldrb	r1, [r2, #4]
 8003e14:	f894 2341 	ldrb.w	r2, [r4, #833]	; 0x341
 8003e18:	4291      	cmp	r1, r2
 8003e1a:	d105      	bne.n	8003e28 <USBH_Process+0x164>
        {
          phost->pActiveClass = phost->pClass[idx];
 8003e1c:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8003e20:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e24:	f8c4 2374 	str.w	r2, [r4, #884]	; 0x374
    }
    else
    {
      phost->pActiveClass = NULL;
      
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 8003e28:	3301      	adds	r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ec      	beq.n	8003e0a <USBH_Process+0x146>
        {
          phost->pActiveClass = phost->pClass[idx];
        }
      }
      
      if(phost->pActiveClass != NULL)
 8003e30:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003e34:	b303      	cbz	r3, 8003e78 <USBH_Process+0x1b4>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4620      	mov	r0, r4
 8003e3a:	4798      	blx	r3
 8003e3c:	b980      	cbnz	r0, 8003e60 <USBH_Process+0x19c>
        {
          phost->gState  = HOST_CLASS_REQUEST; 
 8003e3e:	2306      	movs	r3, #6
 8003e40:	7023      	strb	r3, [r4, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
 8003e42:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003e46:	6819      	ldr	r1, [r3, #0]
 8003e48:	482c      	ldr	r0, [pc, #176]	; (8003efc <USBH_Process+0x238>)
 8003e4a:	f001 f975 	bl	8005138 <printf>
 8003e4e:	200a      	movs	r0, #10
 8003e50:	f001 f98a 	bl	8005168 <putchar>
          
          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8003e54:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8003e58:	2103      	movs	r1, #3
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	4798      	blx	r3
 8003e5e:	e040      	b.n	8003ee2 <USBH_Process+0x21e>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8003e60:	230c      	movs	r3, #12
 8003e62:	7023      	strb	r3, [r4, #0]
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
 8003e64:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	4825      	ldr	r0, [pc, #148]	; (8003f00 <USBH_Process+0x23c>)
 8003e6c:	f001 f964 	bl	8005138 <printf>
 8003e70:	200a      	movs	r0, #10
 8003e72:	f001 f979 	bl	8005168 <putchar>
 8003e76:	e034      	b.n	8003ee2 <USBH_Process+0x21e>
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 8003e78:	230c      	movs	r3, #12
 8003e7a:	7023      	strb	r3, [r4, #0]
        USBH_UsrLog ("No registered class for this device.");
 8003e7c:	4821      	ldr	r0, [pc, #132]	; (8003f04 <USBH_Process+0x240>)
 8003e7e:	f001 f95b 	bl	8005138 <printf>
 8003e82:	200a      	movs	r0, #10
 8003e84:	f001 f970 	bl	8005168 <putchar>
 8003e88:	e02b      	b.n	8003ee2 <USBH_Process+0x21e>
#endif 
    break;    
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8003e8a:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003e8e:	b15b      	cbz	r3, 8003ea8 <USBH_Process+0x1e4>
    {
      status = phost->pActiveClass->Requests(phost);
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	4798      	blx	r3
 8003e94:	f88d 0017 	strb.w	r0, [sp, #23]
      
      if(status == USBH_OK)
 8003e98:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003e9c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003ea0:	d11f      	bne.n	8003ee2 <USBH_Process+0x21e>
      {
        phost->gState  = HOST_CLASS;        
 8003ea2:	230a      	movs	r3, #10
 8003ea4:	7023      	strb	r3, [r4, #0]
 8003ea6:	e01c      	b.n	8003ee2 <USBH_Process+0x21e>
      }  
    }
    else
    {
      phost->gState  = HOST_ABORT_STATE;
 8003ea8:	230c      	movs	r3, #12
 8003eaa:	7003      	strb	r3, [r0, #0]
      USBH_ErrLog ("Invalid Class Driver.");
 8003eac:	4816      	ldr	r0, [pc, #88]	; (8003f08 <USBH_Process+0x244>)
 8003eae:	f001 f943 	bl	8005138 <printf>
 8003eb2:	4816      	ldr	r0, [pc, #88]	; (8003f0c <USBH_Process+0x248>)
 8003eb4:	f001 f940 	bl	8005138 <printf>
 8003eb8:	200a      	movs	r0, #10
 8003eba:	f001 f955 	bl	8005168 <putchar>
 8003ebe:	e010      	b.n	8003ee2 <USBH_Process+0x21e>
    }
    
    break;    
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8003ec0:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003ec4:	b16b      	cbz	r3, 8003ee2 <USBH_Process+0x21e>
    { 
      phost->pActiveClass->BgndProcess(phost);
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	4798      	blx	r3
 8003eca:	e00a      	b.n	8003ee2 <USBH_Process+0x21e>
    }
    break;       

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 8003ecc:	f7ff fcf0 	bl	80038b0 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8003ed0:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003ed4:	b12b      	cbz	r3, 8003ee2 <USBH_Process+0x21e>
    {
      phost->pActiveClass->DeInit(phost); 
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4620      	mov	r0, r4
 8003eda:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	b007      	add	sp, #28
 8003ee6:	bd30      	pop	{r4, r5, pc}
 8003ee8:	08008c74 	.word	0x08008c74
 8003eec:	08008c88 	.word	0x08008c88
 8003ef0:	08008c9c 	.word	0x08008c9c
 8003ef4:	08008cc4 	.word	0x08008cc4
 8003ef8:	08008ce0 	.word	0x08008ce0
 8003efc:	08008d00 	.word	0x08008d00
 8003f00:	08008d14 	.word	0x08008d14
 8003f04:	08008d34 	.word	0x08008d34
 8003f08:	08008bb4 	.word	0x08008bb4
 8003f0c:	08008d5c 	.word	0x08008d5c

08003f10 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8003f10:	f8c0 13b8 	str.w	r1, [r0, #952]	; 0x3b8
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop

08003f18 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8003f18:	b508      	push	{r3, lr}
  phost->Timer ++;
 8003f1a:	f8d0 33b8 	ldr.w	r3, [r0, #952]	; 0x3b8
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  USBH_HandleSof(phost);
 8003f24:	f7ff fcea 	bl	80038fc <USBH_HandleSof>
 8003f28:	bd08      	pop	{r3, pc}
 8003f2a:	bf00      	nop

08003f2c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 8003f2c:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8003f2e:	7803      	ldrb	r3, [r0, #0]
 8003f30:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003f34:	d108      	bne.n	8003f48 <USBH_LL_Connect+0x1c>
  {
    phost->device.is_connected = 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 8003f3c:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8003f40:	b143      	cbz	r3, 8003f54 <USBH_LL_Connect+0x28>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8003f42:	2104      	movs	r1, #4
 8003f44:	4798      	blx	r3
 8003f46:	e005      	b.n	8003f54 <USBH_LL_Connect+0x28>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8003f48:	7803      	ldrb	r3, [r0, #0]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <USBH_LL_Connect+0x28>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 8003f50:	2302      	movs	r3, #2
 8003f52:	7003      	strb	r3, [r0, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8003f54:	2000      	movs	r0, #0
 8003f56:	bd08      	pop	{r3, pc}

08003f58 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8003f58:	b510      	push	{r4, lr}
 8003f5a:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8003f5c:	f000 fe1c 	bl	8004b98 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8003f60:	7921      	ldrb	r1, [r4, #4]
 8003f62:	4620      	mov	r0, r4
 8003f64:	f000 fb24 	bl	80045b0 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8003f68:	7961      	ldrb	r1, [r4, #5]
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f000 fb20 	bl	80045b0 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8003f70:	2300      	movs	r3, #0
 8003f72:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8003f76:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8003f7a:	b113      	cbz	r3, 8003f82 <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8003f7c:	2105      	movs	r1, #5
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
 8003f82:	4806      	ldr	r0, [pc, #24]	; (8003f9c <USBH_LL_Disconnect+0x44>)
 8003f84:	f001 f8d8 	bl	8005138 <printf>
 8003f88:	200a      	movs	r0, #10
 8003f8a:	f001 f8ed 	bl	8005168 <putchar>
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f000 fdfa 	bl	8004b88 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8003f94:	2303      	movs	r3, #3
 8003f96:	7023      	strb	r3, [r4, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8003f98:	2000      	movs	r0, #0
 8003f9a:	bd10      	pop	{r4, pc}
 8003f9c:	08008d74 	.word	0x08008d74

08003fa0 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 8003fa0:	b410      	push	{r4}
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8003fa2:	780b      	ldrb	r3, [r1, #0]
 8003fa4:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8003fa6:	784b      	ldrb	r3, [r1, #1]
 8003fa8:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8003faa:	788b      	ldrb	r3, [r1, #2]
 8003fac:	78cc      	ldrb	r4, [r1, #3]
 8003fae:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8003fb2:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8003fb4:	790b      	ldrb	r3, [r1, #4]
 8003fb6:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8003fb8:	794b      	ldrb	r3, [r1, #5]
 8003fba:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8003fbc:	798b      	ldrb	r3, [r1, #6]
 8003fbe:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8003fc0:	79cb      	ldrb	r3, [r1, #7]
 8003fc2:	71c3      	strb	r3, [r0, #7]
  
  if (length > 8)
 8003fc4:	2a08      	cmp	r2, #8
 8003fc6:	d916      	bls.n	8003ff6 <USBH_ParseDevDesc+0x56>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8003fc8:	7a0b      	ldrb	r3, [r1, #8]
 8003fca:	7a4a      	ldrb	r2, [r1, #9]
 8003fcc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003fd0:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8003fd2:	7a8b      	ldrb	r3, [r1, #10]
 8003fd4:	7aca      	ldrb	r2, [r1, #11]
 8003fd6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003fda:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003fdc:	7b0b      	ldrb	r3, [r1, #12]
 8003fde:	7b4a      	ldrb	r2, [r1, #13]
 8003fe0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003fe4:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8003fe6:	7b8b      	ldrb	r3, [r1, #14]
 8003fe8:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8003fea:	7bcb      	ldrb	r3, [r1, #15]
 8003fec:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8003fee:	7c0b      	ldrb	r3, [r1, #16]
 8003ff0:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8003ff2:	7c4b      	ldrb	r3, [r1, #17]
 8003ff4:	7443      	strb	r3, [r0, #17]
  }
}
 8003ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8003ffc:	780b      	ldrb	r3, [r1, #0]
 8003ffe:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004000:	784b      	ldrb	r3, [r1, #1]
 8004002:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8004004:	788b      	ldrb	r3, [r1, #2]
 8004006:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004008:	78cb      	ldrb	r3, [r1, #3]
 800400a:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800400c:	790b      	ldrb	r3, [r1, #4]
 800400e:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8004010:	794b      	ldrb	r3, [r1, #5]
 8004012:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8004014:	798b      	ldrb	r3, [r1, #6]
 8004016:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8004018:	79cb      	ldrb	r3, [r1, #7]
 800401a:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800401c:	7a0b      	ldrb	r3, [r1, #8]
 800401e:	7203      	strb	r3, [r0, #8]
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop

08004024 <USBH_ParseEPDesc>:
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004024:	780b      	ldrb	r3, [r1, #0]
 8004026:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8004028:	784b      	ldrb	r3, [r1, #1]
 800402a:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800402c:	788b      	ldrb	r3, [r1, #2]
 800402e:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8004030:	78cb      	ldrb	r3, [r1, #3]
 8004032:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8004034:	790b      	ldrb	r3, [r1, #4]
 8004036:	794a      	ldrb	r2, [r1, #5]
 8004038:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800403c:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800403e:	798b      	ldrb	r3, [r1, #6]
 8004040:	7183      	strb	r3, [r0, #6]
 8004042:	4770      	bx	lr

08004044 <USBH_ParseStringDesc>:
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8004044:	7843      	ldrb	r3, [r0, #1]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d114      	bne.n	8004074 <USBH_ParseStringDesc+0x30>
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 800404a:	b410      	push	{r4}
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 800404c:	7803      	ldrb	r3, [r0, #0]
 800404e:	3b02      	subs	r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	bfa8      	it	ge
 8004054:	461a      	movge	r2, r3
 8004056:	b292      	uxth	r2, r2
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 8004058:	2300      	movs	r3, #0
 800405a:	e005      	b.n	8004068 <USBH_ParseStringDesc+0x24>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800405c:	18c4      	adds	r4, r0, r3
 800405e:	78a4      	ldrb	r4, [r4, #2]
 8004060:	f801 4b01 	strb.w	r4, [r1], #1
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 8004064:	3302      	adds	r3, #2
 8004066:	b29b      	uxth	r3, r3
 8004068:	4293      	cmp	r3, r2
 800406a:	d3f7      	bcc.n	800405c <USBH_ParseStringDesc+0x18>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
      pdest++;
    }  
    *pdest = 0; /* mark end of string */  
 800406c:	2300      	movs	r3, #0
 800406e:	700b      	strb	r3, [r1, #0]
  }
}
 8004070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop

08004078 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8004078:	b530      	push	{r4, r5, lr}
 800407a:	b083      	sub	sp, #12
 800407c:	4604      	mov	r4, r0
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  
  switch (phost->Control.state)
 800407e:	7e03      	ldrb	r3, [r0, #24]
 8004080:	3b01      	subs	r3, #1
 8004082:	2b0a      	cmp	r3, #10
 8004084:	f200 80d7 	bhi.w	8004236 <USBH_HandleControl+0x1be>
 8004088:	e8df f003 	tbb	[pc, r3]
 800408c:	3d310f06 	.word	0x3d310f06
 8004090:	82765c4e 	.word	0x82765c4e
 8004094:	a395      	.short	0xa395
 8004096:	b8          	.byte	0xb8
 8004097:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
 8004098:	7942      	ldrb	r2, [r0, #5]
 800409a:	f100 0110 	add.w	r1, r0, #16
 800409e:	f000 fa03 	bl	80044a8 <USBH_CtlSendSetup>
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 80040a2:	2302      	movs	r3, #2
 80040a4:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80040a6:	2001      	movs	r0, #1
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
    break; 
 80040a8:	e0d2      	b.n	8004250 <USBH_HandleControl+0x1d8>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 80040aa:	7941      	ldrb	r1, [r0, #5]
 80040ac:	f000 fdc2 	bl	8004c34 <USBH_LL_GetURBState>
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80040b0:	2801      	cmp	r0, #1
 80040b2:	d115      	bne.n	80040e0 <USBH_HandleControl+0x68>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80040b4:	7c23      	ldrb	r3, [r4, #16]
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 80040ba:	8ae2      	ldrh	r2, [r4, #22]
 80040bc:	b13a      	cbz	r2, 80040ce <USBH_HandleControl+0x56>
      {        
        if (direction == USB_D2H)
 80040be:	b113      	cbz	r3, 80040c6 <USBH_HandleControl+0x4e>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80040c0:	2303      	movs	r3, #3
 80040c2:	7623      	strb	r3, [r4, #24]
 80040c4:	e0c4      	b.n	8004250 <USBH_HandleControl+0x1d8>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80040c6:	2305      	movs	r3, #5
 80040c8:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80040ca:	2001      	movs	r0, #1
 80040cc:	e0c0      	b.n	8004250 <USBH_HandleControl+0x1d8>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80040ce:	b11b      	cbz	r3, 80040d8 <USBH_HandleControl+0x60>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 80040d0:	2309      	movs	r3, #9
 80040d2:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80040d4:	2001      	movs	r0, #1
 80040d6:	e0bb      	b.n	8004250 <USBH_HandleControl+0x1d8>
          phost->Control.state = CTRL_STATUS_OUT;
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 80040d8:	2307      	movs	r3, #7
 80040da:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80040dc:	2001      	movs	r0, #1
 80040de:	e0b7      	b.n	8004250 <USBH_HandleControl+0x1d8>
      }          
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif
    }
    else if(URB_Status == USBH_URB_ERROR)
 80040e0:	2804      	cmp	r0, #4
 80040e2:	f040 80aa 	bne.w	800423a <USBH_HandleControl+0x1c2>
    {
      phost->Control.state = CTRL_ERROR;
 80040e6:	230b      	movs	r3, #11
 80040e8:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80040ea:	2001      	movs	r0, #1
 80040ec:	e0b0      	b.n	8004250 <USBH_HandleControl+0x1d8>
    }    
    break;
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 80040ee:	f8d0 33b8 	ldr.w	r3, [r0, #952]	; 0x3b8
 80040f2:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 80040f4:	7903      	ldrb	r3, [r0, #4]
 80040f6:	8982      	ldrh	r2, [r0, #12]
 80040f8:	6881      	ldr	r1, [r0, #8]
 80040fa:	f000 f9fd 	bl	80044f8 <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80040fe:	2304      	movs	r3, #4
 8004100:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8004102:	2001      	movs	r0, #1
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
    break;    
 8004104:	e0a4      	b.n	8004250 <USBH_HandleControl+0x1d8>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8004106:	7901      	ldrb	r1, [r0, #4]
 8004108:	f000 fd94 	bl	8004c34 <USBH_LL_GetURBState>
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800410c:	2801      	cmp	r0, #1
 800410e:	d101      	bne.n	8004114 <USBH_HandleControl+0x9c>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8004110:	2309      	movs	r3, #9
 8004112:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8004114:	2805      	cmp	r0, #5
 8004116:	f000 8092 	beq.w	800423e <USBH_HandleControl+0x1c6>
      status = USBH_NOT_SUPPORTED;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }   
    else if (URB_Status == USBH_URB_ERROR)
 800411a:	2804      	cmp	r0, #4
 800411c:	f040 8091 	bne.w	8004242 <USBH_HandleControl+0x1ca>
    {
      /* Device error */
      phost->Control.state = CTRL_ERROR;  
 8004120:	230b      	movs	r3, #11
 8004122:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8004124:	2001      	movs	r0, #1
 8004126:	e093      	b.n	8004250 <USBH_HandleControl+0x1d8>
    }
    break;
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 8004128:	7943      	ldrb	r3, [r0, #5]
 800412a:	8982      	ldrh	r2, [r0, #12]
 800412c:	2501      	movs	r5, #1
 800412e:	9500      	str	r5, [sp, #0]
 8004130:	6881      	ldr	r1, [r0, #8]
 8004132:	f000 f9cb 	bl	80044cc <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8004136:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 800413a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800413c:	2306      	movs	r3, #6
 800413e:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8004140:	4628      	mov	r0, r5
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
    phost->Control.state = CTRL_DATA_OUT_WAIT;
    break;
 8004142:	e085      	b.n	8004250 <USBH_HandleControl+0x1d8>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8004144:	7941      	ldrb	r1, [r0, #5]
 8004146:	f000 fd75 	bl	8004c34 <USBH_LL_GetURBState>
    
    if  (URB_Status == USBH_URB_DONE)
 800414a:	2801      	cmp	r0, #1
 800414c:	d102      	bne.n	8004154 <USBH_HandleControl+0xdc>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800414e:	2307      	movs	r3, #7
 8004150:	7623      	strb	r3, [r4, #24]
 8004152:	e07d      	b.n	8004250 <USBH_HandleControl+0x1d8>
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    /* handle error cases */
    else if  (URB_Status == USBH_URB_STALL) 
 8004154:	2805      	cmp	r0, #5
 8004156:	d103      	bne.n	8004160 <USBH_HandleControl+0xe8>
    { 
      /* In stall case, return to previous machine state*/
      phost->Control.state = CTRL_STALLED; 
 8004158:	230c      	movs	r3, #12
 800415a:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 800415c:	2003      	movs	r0, #3
 800415e:	e077      	b.n	8004250 <USBH_HandleControl+0x1d8>
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004160:	2802      	cmp	r0, #2
 8004162:	d103      	bne.n	800416c <USBH_HandleControl+0xf4>
    { 
      /* Nack received from device */
      phost->Control.state = CTRL_DATA_OUT;
 8004164:	2305      	movs	r3, #5
 8004166:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8004168:	2001      	movs	r0, #1
 800416a:	e071      	b.n	8004250 <USBH_HandleControl+0x1d8>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    else if (URB_Status == USBH_URB_ERROR)
 800416c:	2804      	cmp	r0, #4
 800416e:	d16a      	bne.n	8004246 <USBH_HandleControl+0x1ce>
    {
      /* device error */
      phost->Control.state = CTRL_ERROR;  
 8004170:	230b      	movs	r3, #11
 8004172:	7623      	strb	r3, [r4, #24]
      status = USBH_FAIL;    
 8004174:	2002      	movs	r0, #2
 8004176:	e06b      	b.n	8004250 <USBH_HandleControl+0x1d8>
    break;
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8004178:	7903      	ldrb	r3, [r0, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	4611      	mov	r1, r2
 800417e:	f000 f9bb 	bl	80044f8 <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 8004182:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8004186:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004188:	2308      	movs	r3, #8
 800418a:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 800418c:	2001      	movs	r0, #1
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
    phost->Control.state = CTRL_STATUS_IN_WAIT;
    
    break;
 800418e:	e05f      	b.n	8004250 <USBH_HandleControl+0x1d8>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8004190:	7901      	ldrb	r1, [r0, #4]
 8004192:	f000 fd4f 	bl	8004c34 <USBH_LL_GetURBState>
    
    if  ( URB_Status == USBH_URB_DONE)
 8004196:	2801      	cmp	r0, #1
 8004198:	d103      	bne.n	80041a2 <USBH_HandleControl+0x12a>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800419a:	230d      	movs	r3, #13
 800419c:	7623      	strb	r3, [r4, #24]
      status = USBH_OK;
 800419e:	2000      	movs	r0, #0
 80041a0:	e056      	b.n	8004250 <USBH_HandleControl+0x1d8>
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    else if (URB_Status == USBH_URB_ERROR)
 80041a2:	2804      	cmp	r0, #4
 80041a4:	d103      	bne.n	80041ae <USBH_HandleControl+0x136>
    {
      phost->Control.state = CTRL_ERROR;
 80041a6:	230b      	movs	r3, #11
 80041a8:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80041aa:	2001      	movs	r0, #1
 80041ac:	e050      	b.n	8004250 <USBH_HandleControl+0x1d8>
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
 80041ae:	2805      	cmp	r0, #5
 80041b0:	d04b      	beq.n	800424a <USBH_HandleControl+0x1d2>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80041b2:	2001      	movs	r0, #1
 80041b4:	e04c      	b.n	8004250 <USBH_HandleControl+0x1d8>
#endif      
    }
    break;
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80041b6:	7943      	ldrb	r3, [r0, #5]
 80041b8:	2501      	movs	r5, #1
 80041ba:	9500      	str	r5, [sp, #0]
 80041bc:	2200      	movs	r2, #0
 80041be:	4611      	mov	r1, r2
 80041c0:	f000 f984 	bl	80044cc <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 80041c4:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 80041c8:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80041ca:	230a      	movs	r3, #10
 80041cc:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80041ce:	4628      	mov	r0, r5
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
    break;
 80041d0:	e03e      	b.n	8004250 <USBH_HandleControl+0x1d8>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 80041d2:	7941      	ldrb	r1, [r0, #5]
 80041d4:	f000 fd2e 	bl	8004c34 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80041d8:	2801      	cmp	r0, #1
 80041da:	d103      	bne.n	80041e4 <USBH_HandleControl+0x16c>
    { 
      status = USBH_OK;      
      phost->Control.state = CTRL_COMPLETE; 
 80041dc:	230d      	movs	r3, #13
 80041de:	7623      	strb	r3, [r4, #24]
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
    if  (URB_Status == USBH_URB_DONE)
    { 
      status = USBH_OK;      
 80041e0:	2000      	movs	r0, #0
 80041e2:	e035      	b.n	8004250 <USBH_HandleControl+0x1d8>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
 80041e4:	2802      	cmp	r0, #2
 80041e6:	d103      	bne.n	80041f0 <USBH_HandleControl+0x178>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 80041e8:	2309      	movs	r3, #9
 80041ea:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80041ec:	2001      	movs	r0, #1
 80041ee:	e02f      	b.n	8004250 <USBH_HandleControl+0x1d8>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }      
    else if (URB_Status == USBH_URB_ERROR)
 80041f0:	2804      	cmp	r0, #4
 80041f2:	d12c      	bne.n	800424e <USBH_HandleControl+0x1d6>
    {
      phost->Control.state = CTRL_ERROR; 
 80041f4:	230b      	movs	r3, #11
 80041f6:	7623      	strb	r3, [r4, #24]
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80041f8:	2001      	movs	r0, #1
 80041fa:	e029      	b.n	8004250 <USBH_HandleControl+0x1d8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80041fc:	7e43      	ldrb	r3, [r0, #25]
 80041fe:	3301      	adds	r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	7643      	strb	r3, [r0, #25]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d805      	bhi.n	8004214 <USBH_HandleControl+0x19c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8004208:	f000 fcc6 	bl	8004b98 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 800420c:	2001      	movs	r0, #1
 800420e:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8004210:	70a0      	strb	r0, [r4, #2]
 8004212:	e01d      	b.n	8004250 <USBH_HandleControl+0x1d8>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004214:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8004218:	2106      	movs	r1, #6
 800421a:	4798      	blx	r3
      phost->Control.errorcount = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	7663      	strb	r3, [r4, #25]
      USBH_ErrLog("Control error");
 8004220:	480c      	ldr	r0, [pc, #48]	; (8004254 <USBH_HandleControl+0x1dc>)
 8004222:	f000 ff89 	bl	8005138 <printf>
 8004226:	480c      	ldr	r0, [pc, #48]	; (8004258 <USBH_HandleControl+0x1e0>)
 8004228:	f000 ff86 	bl	8005138 <printf>
 800422c:	200a      	movs	r0, #10
 800422e:	f000 ff9b 	bl	8005168 <putchar>
      status = USBH_FAIL;
 8004232:	2002      	movs	r0, #2
 8004234:	e00c      	b.n	8004250 <USBH_HandleControl+0x1d8>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8004236:	2001      	movs	r0, #1
 8004238:	e00a      	b.n	8004250 <USBH_HandleControl+0x1d8>
 800423a:	2001      	movs	r0, #1
 800423c:	e008      	b.n	8004250 <USBH_HandleControl+0x1d8>
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800423e:	2003      	movs	r0, #3
 8004240:	e006      	b.n	8004250 <USBH_HandleControl+0x1d8>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8004242:	2001      	movs	r0, #1
 8004244:	e004      	b.n	8004250 <USBH_HandleControl+0x1d8>
 8004246:	2001      	movs	r0, #1
 8004248:	e002      	b.n	8004250 <USBH_HandleControl+0x1d8>
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      status = USBH_NOT_SUPPORTED;
 800424a:	2003      	movs	r0, #3
 800424c:	e000      	b.n	8004250 <USBH_HandleControl+0x1d8>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 800424e:	2001      	movs	r0, #1
    
  default:
    break;
  }
  return status;
}
 8004250:	b003      	add	sp, #12
 8004252:	bd30      	pop	{r4, r5, pc}
 8004254:	08008bb4 	.word	0x08008bb4
 8004258:	08008d8c 	.word	0x08008d8c

0800425c <USBH_GetNextDesc>:
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800425c:	7802      	ldrb	r2, [r0, #0]
 800425e:	880b      	ldrh	r3, [r1, #0]
 8004260:	4413      	add	r3, r2
 8004262:	800b      	strh	r3, [r1, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 8004264:	7803      	ldrb	r3, [r0, #0]
 
  return(pnext);
}
 8004266:	4418      	add	r0, r3
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop

0800426c <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 800426c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004270:	b083      	sub	sp, #12
 8004272:	460c      	mov	r4, r1
  int8_t                        ep_ix = 0;  
  
  pdesc   = (USBH_DescHeader_t *)buf;
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8004274:	780b      	ldrb	r3, [r1, #0]
 8004276:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8004278:	784b      	ldrb	r3, [r1, #1]
 800427a:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800427c:	788b      	ldrb	r3, [r1, #2]
 800427e:	78c9      	ldrb	r1, [r1, #3]
 8004280:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8004284:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8004286:	7923      	ldrb	r3, [r4, #4]
 8004288:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800428a:	7963      	ldrb	r3, [r4, #5]
 800428c:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800428e:	79a3      	ldrb	r3, [r4, #6]
 8004290:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004292:	79e3      	ldrb	r3, [r4, #7]
 8004294:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8004296:	7a23      	ldrb	r3, [r4, #8]
 8004298:	7203      	strb	r3, [r0, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800429a:	2a09      	cmp	r2, #9
 800429c:	d947      	bls.n	800432e <USBH_ParseCfgDesc+0xc2>
 800429e:	4605      	mov	r5, r0
  {
    ptr = USB_LEN_CFG_DESC;
 80042a0:	2309      	movs	r3, #9
 80042a2:	f8ad 3006 	strh.w	r3, [sp, #6]
{  
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 80042a6:	2600      	movs	r6, #0
  {
    ptr = USB_LEN_CFG_DESC;
    pif = (USBH_InterfaceDescTypeDef *)0;
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80042a8:	e03a      	b.n	8004320 <USBH_ParseCfgDesc+0xb4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80042aa:	f10d 0106 	add.w	r1, sp, #6
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7ff ffd4 	bl	800425c <USBH_GetNextDesc>
 80042b4:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80042b6:	7843      	ldrb	r3, [r0, #1]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d131      	bne.n	8004320 <USBH_ParseCfgDesc+0xb4>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80042bc:	46b1      	mov	r9, r6
 80042be:	201a      	movs	r0, #26
 80042c0:	fb00 f006 	mul.w	r0, r0, r6
 80042c4:	3008      	adds	r0, #8
 80042c6:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 80042c8:	4621      	mov	r1, r4
 80042ca:	3002      	adds	r0, #2
 80042cc:	f7ff fe96 	bl	8003ffc <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 80042d0:	2700      	movs	r7, #0
        pep = (USBH_EpDescTypeDef *)0;        
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80042d2:	e017      	b.n	8004304 <USBH_ParseCfgDesc+0x98>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 80042d4:	f10d 0106 	add.w	r1, sp, #6
 80042d8:	4620      	mov	r0, r4
 80042da:	f7ff ffbf 	bl	800425c <USBH_GetNextDesc>
 80042de:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 80042e0:	7843      	ldrb	r3, [r0, #1]
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d10e      	bne.n	8004304 <USBH_ParseCfgDesc+0x98>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80042e6:	f108 0001 	add.w	r0, r8, #1
 80042ea:	231a      	movs	r3, #26
 80042ec:	fb03 f309 	mul.w	r3, r3, r9
 80042f0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80042f4:	3008      	adds	r0, #8
 80042f6:	4428      	add	r0, r5
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 80042f8:	4621      	mov	r1, r4
 80042fa:	3004      	adds	r0, #4
 80042fc:	f7ff fe92 	bl	8004024 <USBH_ParseEPDesc>
            ep_ix++;
 8004300:	3701      	adds	r7, #1
 8004302:	b27f      	sxtb	r7, r7
        pif = &cfg_desc->Itf_Desc[if_ix];
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
        
        ep_ix = 0;
        pep = (USBH_EpDescTypeDef *)0;        
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004304:	46b8      	mov	r8, r7
 8004306:	231a      	movs	r3, #26
 8004308:	fb03 5309 	mla	r3, r3, r9, r5
 800430c:	7b9b      	ldrb	r3, [r3, #14]
 800430e:	429f      	cmp	r7, r3
 8004310:	da04      	bge.n	800431c <USBH_ParseCfgDesc+0xb0>
 8004312:	886a      	ldrh	r2, [r5, #2]
 8004314:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004318:	429a      	cmp	r2, r3
 800431a:	d8db      	bhi.n	80042d4 <USBH_ParseCfgDesc+0x68>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
            ep_ix++;
          }
        }
        if_ix++;
 800431c:	3601      	adds	r6, #1
 800431e:	b276      	sxtb	r6, r6
  {
    ptr = USB_LEN_CFG_DESC;
    pif = (USBH_InterfaceDescTypeDef *)0;
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8004320:	2e01      	cmp	r6, #1
 8004322:	dc04      	bgt.n	800432e <USBH_ParseCfgDesc+0xc2>
 8004324:	886a      	ldrh	r2, [r5, #2]
 8004326:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800432a:	429a      	cmp	r2, r3
 800432c:	d8bd      	bhi.n	80042aa <USBH_ParseCfgDesc+0x3e>
        }
        if_ix++;
      }
    }
  }  
}
 800432e:	b003      	add	sp, #12
 8004330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004334 <USBH_CtlReq>:
                             uint16_t            length)
{
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8004334:	7883      	ldrb	r3, [r0, #2]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d002      	beq.n	8004340 <USBH_CtlReq+0xc>
 800433a:	2b02      	cmp	r3, #2
 800433c:	d007      	beq.n	800434e <USBH_CtlReq+0x1a>
 800433e:	e016      	b.n	800436e <USBH_CtlReq+0x3a>
  {
  case CMD_SEND:
    /* Start a SETUP transfer */
    phost->Control.buff = buff; 
 8004340:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 8004342:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;  
 8004344:	2301      	movs	r3, #1
 8004346:	7603      	strb	r3, [r0, #24]
    phost->RequestState = CMD_WAIT;
 8004348:	2202      	movs	r2, #2
 800434a:	7082      	strb	r2, [r0, #2]
    status = USBH_BUSY;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    break;
 800434c:	e010      	b.n	8004370 <USBH_CtlReq+0x3c>
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 800434e:	b510      	push	{r4, lr}
 8004350:	4604      	mov	r4, r0
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    break;
    
  case CMD_WAIT:
    status = USBH_HandleControl(phost);
 8004352:	f7ff fe91 	bl	8004078 <USBH_HandleControl>
     if (status == USBH_OK) 
 8004356:	4603      	mov	r3, r0
 8004358:	b920      	cbnz	r0, 8004364 <USBH_CtlReq+0x30>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 800435a:	2201      	movs	r2, #1
 800435c:	70a2      	strb	r2, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 800435e:	2200      	movs	r2, #0
 8004360:	7622      	strb	r2, [r4, #24]
 8004362:	e007      	b.n	8004374 <USBH_CtlReq+0x40>
      status = USBH_OK;      
    }
    else if  (status == USBH_FAIL)
 8004364:	2802      	cmp	r0, #2
 8004366:	d105      	bne.n	8004374 <USBH_CtlReq+0x40>
    {
      /* Failure Mode */
      phost->RequestState = CMD_SEND;
 8004368:	2201      	movs	r2, #1
 800436a:	70a2      	strb	r2, [r4, #2]
 800436c:	e002      	b.n	8004374 <USBH_CtlReq+0x40>
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800436e:	2301      	movs	r3, #1
    
  default:
    break; 
  }
  return status;
}
 8004370:	4618      	mov	r0, r3
 8004372:	4770      	bx	lr
 8004374:	4618      	mov	r0, r3
 8004376:	bd10      	pop	{r4, pc}

08004378 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if(phost->RequestState == CMD_SEND)
 800437e:	7884      	ldrb	r4, [r0, #2]
 8004380:	2c01      	cmp	r4, #1
 8004382:	d111      	bne.n	80043a8 <USBH_GetDescriptor+0x30>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004384:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8004388:	7404      	strb	r4, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800438a:	2106      	movs	r1, #6
 800438c:	7441      	strb	r1, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800438e:	8242      	strh	r2, [r0, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8004390:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8004394:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8004398:	d103      	bne.n	80043a2 <USBH_GetDescriptor+0x2a>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 800439a:	f240 4209 	movw	r2, #1033	; 0x409
 800439e:	8282      	strh	r2, [r0, #20]
 80043a0:	e001      	b.n	80043a6 <USBH_GetDescriptor+0x2e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 80043a2:	2200      	movs	r2, #0
 80043a4:	8282      	strh	r2, [r0, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 80043a6:	82c5      	strh	r5, [r0, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 80043a8:	462a      	mov	r2, r5
 80043aa:	4619      	mov	r1, r3
 80043ac:	f7ff ffc2 	bl	8004334 <USBH_CtlReq>
}
 80043b0:	bd38      	pop	{r3, r4, r5, pc}
 80043b2:	bf00      	nop

080043b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80043b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b6:	b083      	sub	sp, #12
 80043b8:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 80043ba:	f500 758e 	add.w	r5, r0, #284	; 0x11c
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
 80043be:	460e      	mov	r6, r1
 80043c0:	9100      	str	r1, [sp, #0]
 80043c2:	462b      	mov	r3, r5
 80043c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043c8:	2100      	movs	r1, #0
 80043ca:	f7ff ffd5 	bl	8004378 <USBH_GetDescriptor>
 80043ce:	4607      	mov	r7, r0
 80043d0:	b928      	cbnz	r0, 80043de <USBH_Get_DevDesc+0x2a>
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 80043d2:	4632      	mov	r2, r6
 80043d4:	4629      	mov	r1, r5
 80043d6:	f504 7048 	add.w	r0, r4, #800	; 0x320
 80043da:	f7ff fde1 	bl	8003fa0 <USBH_ParseDevDesc>
  }
  return status;      
}
 80043de:	4638      	mov	r0, r7
 80043e0:	b003      	add	sp, #12
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b083      	sub	sp, #12
 80043e8:	4604      	mov	r4, r0
 80043ea:	460e      	mov	r6, r1
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 80043ec:	f100 051c 	add.w	r5, r0, #28
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 80043f0:	9100      	str	r1, [sp, #0]
 80043f2:	462b      	mov	r3, r5
 80043f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f8:	2100      	movs	r1, #0
 80043fa:	f7ff ffbd 	bl	8004378 <USBH_GetDescriptor>
 80043fe:	4607      	mov	r7, r0
 8004400:	b928      	cbnz	r0, 800440e <USBH_Get_CfgDesc+0x2a>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8004402:	4632      	mov	r2, r6
 8004404:	4629      	mov	r1, r5
 8004406:	f204 3032 	addw	r0, r4, #818	; 0x332
 800440a:	f7ff ff2f 	bl	800426c <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
}
 800440e:	4638      	mov	r0, r7
 8004410:	b003      	add	sp, #12
 8004412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004414 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8004414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004416:	b083      	sub	sp, #12
 8004418:	4617      	mov	r7, r2
 800441a:	461d      	mov	r5, r3
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 800441c:	f500 748e 	add.w	r4, r0, #284	; 0x11c
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	4623      	mov	r3, r4
 8004424:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004428:	2100      	movs	r1, #0
 800442a:	f7ff ffa5 	bl	8004378 <USBH_GetDescriptor>
 800442e:	4606      	mov	r6, r0
 8004430:	b920      	cbnz	r0, 800443c <USBH_Get_StringDesc+0x28>
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 8004432:	462a      	mov	r2, r5
 8004434:	4639      	mov	r1, r7
 8004436:	4620      	mov	r0, r4
 8004438:	f7ff fe04 	bl	8004044 <USBH_ParseStringDesc>
  }
  return status;
}
 800443c:	4630      	mov	r0, r6
 800443e:	b003      	add	sp, #12
 8004440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004442:	bf00      	nop

08004444 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 8004444:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8004446:	7883      	ldrb	r3, [r0, #2]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d106      	bne.n	800445a <USBH_SetAddress+0x16>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800444c:	2300      	movs	r3, #0
 800444e:	7403      	strb	r3, [r0, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004450:	2205      	movs	r2, #5
 8004452:	7442      	strb	r2, [r0, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004454:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8004456:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;
 8004458:	82c3      	strh	r3, [r0, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 800445a:	2200      	movs	r2, #0
 800445c:	4611      	mov	r1, r2
 800445e:	f7ff ff69 	bl	8004334 <USBH_CtlReq>
}
 8004462:	bd08      	pop	{r3, pc}

08004464 <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 8004464:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8004466:	7883      	ldrb	r3, [r0, #2]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d106      	bne.n	800447a <USBH_SetCfg+0x16>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 800446c:	2300      	movs	r3, #0
 800446e:	7403      	strb	r3, [r0, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004470:	2209      	movs	r2, #9
 8004472:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004474:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8004476:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0; 
 8004478:	82c3      	strh	r3, [r0, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 800447a:	2200      	movs	r2, #0
 800447c:	4611      	mov	r1, r2
 800447e:	f7ff ff59 	bl	8004334 <USBH_CtlReq>
}
 8004482:	bd08      	pop	{r3, pc}

08004484 <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 8004484:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8004486:	7883      	ldrb	r3, [r0, #2]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d107      	bne.n	800449c <USBH_ClrFeature+0x18>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800448c:	2302      	movs	r3, #2
 800448e:	7403      	strb	r3, [r0, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004490:	2301      	movs	r3, #1
 8004492:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004494:	2300      	movs	r3, #0
 8004496:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004498:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 800449a:	82c3      	strh	r3, [r0, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 800449c:	2200      	movs	r2, #0
 800449e:	4611      	mov	r1, r2
 80044a0:	f7ff ff48 	bl	8004334 <USBH_CtlReq>
}
 80044a4:	bd08      	pop	{r3, pc}
 80044a6:	bf00      	nop

080044a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 80044a8:	b530      	push	{r4, r5, lr}
 80044aa:	b085      	sub	sp, #20
 80044ac:	4615      	mov	r5, r2

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80044ae:	2400      	movs	r4, #0
 80044b0:	9403      	str	r4, [sp, #12]
 80044b2:	2308      	movs	r3, #8
 80044b4:	9302      	str	r3, [sp, #8]
 80044b6:	9101      	str	r1, [sp, #4]
 80044b8:	9400      	str	r4, [sp, #0]
 80044ba:	4623      	mov	r3, r4
 80044bc:	4622      	mov	r2, r4
 80044be:	4629      	mov	r1, r5
 80044c0:	f000 fba4 	bl	8004c0c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 80044c4:	4620      	mov	r0, r4
 80044c6:	b005      	add	sp, #20
 80044c8:	bd30      	pop	{r4, r5, pc}
 80044ca:	bf00      	nop

080044cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80044cc:	b530      	push	{r4, r5, lr}
 80044ce:	b085      	sub	sp, #20
 80044d0:	460c      	mov	r4, r1
 80044d2:	4619      	mov	r1, r3
 80044d4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80044d8:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 80044dc:	b105      	cbz	r5, 80044e0 <USBH_CtlSendData+0x14>
  {
    do_ping = 0;
 80044de:	2300      	movs	r3, #0
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80044e0:	9303      	str	r3, [sp, #12]
 80044e2:	9202      	str	r2, [sp, #8]
 80044e4:	9401      	str	r4, [sp, #4]
 80044e6:	2301      	movs	r3, #1
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2300      	movs	r3, #0
 80044ec:	461a      	mov	r2, r3
 80044ee:	f000 fb8d 	bl	8004c0c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 80044f2:	2000      	movs	r0, #0
 80044f4:	b005      	add	sp, #20
 80044f6:	bd30      	pop	{r4, r5, pc}

080044f8 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 80044f8:	b530      	push	{r4, r5, lr}
 80044fa:	b085      	sub	sp, #20
 80044fc:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80044fe:	2400      	movs	r4, #0
 8004500:	9403      	str	r4, [sp, #12]
 8004502:	9202      	str	r2, [sp, #8]
 8004504:	9101      	str	r1, [sp, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	9200      	str	r2, [sp, #0]
 800450a:	4623      	mov	r3, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f000 fb7d 	bl	8004c0c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 8004512:	4620      	mov	r0, r4
 8004514:	b005      	add	sp, #20
 8004516:	bd30      	pop	{r4, r5, pc}

08004518 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t pipe_num)
{
 8004518:	b530      	push	{r4, r5, lr}
 800451a:	b085      	sub	sp, #20
 800451c:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800451e:	2400      	movs	r4, #0
 8004520:	9403      	str	r4, [sp, #12]
 8004522:	9202      	str	r2, [sp, #8]
 8004524:	9101      	str	r1, [sp, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	9200      	str	r2, [sp, #0]
 800452a:	2303      	movs	r3, #3
 800452c:	4629      	mov	r1, r5
 800452e:	f000 fb6d 	bl	8004c0c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0); 
  
  return USBH_OK;
}
 8004532:	4620      	mov	r0, r4
 8004534:	b005      	add	sp, #20
 8004536:	bd30      	pop	{r4, r5, pc}

08004538 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
 8004538:	2300      	movs	r3, #0
 800453a:	e00b      	b.n	8004554 <USBH_GetFreePipe+0x1c>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 800453c:	f103 02de 	add.w	r2, r3, #222	; 0xde
 8004540:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004544:	6852      	ldr	r2, [r2, #4]
 8004546:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800454a:	d101      	bne.n	8004550 <USBH_GetFreePipe+0x18>
	{
	   return idx;
 800454c:	b298      	uxth	r0, r3
 800454e:	4770      	bx	lr
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
 8004550:	3301      	adds	r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b0a      	cmp	r3, #10
 8004556:	d9f1      	bls.n	800453c <USBH_GetFreePipe+0x4>
	if ((phost->Pipes[idx] & 0x8000) == 0)
	{
	   return idx;
	} 
  }
  return 0xFFFF;
 8004558:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop

08004560 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8004560:	b510      	push	{r4, lr}
 8004562:	b084      	sub	sp, #16

  USBH_LL_OpenPipe(phost,
 8004564:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004568:	9402      	str	r4, [sp, #8]
 800456a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800456e:	9401      	str	r4, [sp, #4]
 8004570:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004574:	9400      	str	r4, [sp, #0]
 8004576:	f000 fb2f 	bl	8004bd8 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 800457a:	2000      	movs	r0, #0
 800457c:	b004      	add	sp, #16
 800457e:	bd10      	pop	{r4, pc}

08004580 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8004580:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004582:	f000 fb3b 	bl	8004bfc <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 8004586:	2000      	movs	r0, #0
 8004588:	bd08      	pop	{r3, pc}
 800458a:	bf00      	nop

0800458c <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4604      	mov	r4, r0
 8004590:	460d      	mov	r5, r1
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 8004592:	f7ff ffd1 	bl	8004538 <USBH_GetFreePipe>

  if (pipe != 0xFFFF)
 8004596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800459a:	4298      	cmp	r0, r3
 800459c:	d006      	beq.n	80045ac <USBH_AllocPipe+0x20>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800459e:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80045a2:	f100 03de 	add.w	r3, r0, #222	; 0xde
 80045a6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80045aa:	6065      	str	r5, [r4, #4]
  }
  return pipe;
}
 80045ac:	b2c0      	uxtb	r0, r0
 80045ae:	bd38      	pop	{r3, r4, r5, pc}

080045b0 <USBH_FreePipe>:
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
   if(idx < 11)
 80045b0:	290a      	cmp	r1, #10
 80045b2:	d806      	bhi.n	80045c2 <USBH_FreePipe+0x12>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 80045b4:	31de      	adds	r1, #222	; 0xde
 80045b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80045ba:	684b      	ldr	r3, [r1, #4]
 80045bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80045c0:	604b      	str	r3, [r1, #4]
   }
   return USBH_OK;
}
 80045c2:	2000      	movs	r0, #0
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop

080045c8 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
static void MX_GPIO_Init(void)
{
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045ce:	2400      	movs	r4, #0
 80045d0:	9401      	str	r4, [sp, #4]
 80045d2:	4b6e      	ldr	r3, [pc, #440]	; (800478c <MX_GPIO_Init+0x1c4>)
 80045d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d6:	f042 0210 	orr.w	r2, r2, #16
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
 80045dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045de:	f002 0210 	and.w	r2, r2, #16
 80045e2:	9201      	str	r2, [sp, #4]
 80045e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045e6:	9402      	str	r4, [sp, #8]
 80045e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ea:	f042 0204 	orr.w	r2, r2, #4
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
 80045f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f2:	f002 0204 	and.w	r2, r2, #4
 80045f6:	9202      	str	r2, [sp, #8]
 80045f8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045fa:	9403      	str	r4, [sp, #12]
 80045fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
 8004604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004606:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800460a:	9203      	str	r2, [sp, #12]
 800460c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800460e:	9404      	str	r4, [sp, #16]
 8004610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
 8004618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461a:	f002 0201 	and.w	r2, r2, #1
 800461e:	9204      	str	r2, [sp, #16]
 8004620:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004622:	9405      	str	r4, [sp, #20]
 8004624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004626:	f042 0202 	orr.w	r2, r2, #2
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
 800462c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800462e:	f002 0202 	and.w	r2, r2, #2
 8004632:	9205      	str	r2, [sp, #20]
 8004634:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004636:	9406      	str	r4, [sp, #24]
 8004638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463a:	f042 0208 	orr.w	r2, r2, #8
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	9306      	str	r3, [sp, #24]
 8004648:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800464a:	4f51      	ldr	r7, [pc, #324]	; (8004790 <MX_GPIO_Init+0x1c8>)
 800464c:	4622      	mov	r2, r4
 800464e:	2108      	movs	r1, #8
 8004650:	4638      	mov	r0, r7
 8004652:	f7fc fe29 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004656:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80047a4 <MX_GPIO_Init+0x1dc>
 800465a:	2201      	movs	r2, #1
 800465c:	4611      	mov	r1, r2
 800465e:	4640      	mov	r0, r8
 8004660:	f7fc fe22 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8004664:	4622      	mov	r2, r4
 8004666:	f24f 0110 	movw	r1, #61456	; 0xf010
 800466a:	484a      	ldr	r0, [pc, #296]	; (8004794 <MX_GPIO_Init+0x1cc>)
 800466c:	f7fc fe1c 	bl	80012a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004670:	2508      	movs	r5, #8
 8004672:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004674:	2601      	movs	r6, #1
 8004676:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004678:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800467c:	a907      	add	r1, sp, #28
 800467e:	4638      	mov	r0, r7
 8004680:	f7fc fd32 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004684:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004686:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004688:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800468c:	a907      	add	r1, sp, #28
 800468e:	4640      	mov	r0, r8
 8004690:	f7fc fd2a 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004694:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004696:	2502      	movs	r5, #2
 8004698:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800469c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800469e:	f04f 0905 	mov.w	r9, #5
 80046a2:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80046a6:	a907      	add	r1, sp, #28
 80046a8:	4640      	mov	r0, r8
 80046aa:	f7fc fd1d 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80046ae:	2310      	movs	r3, #16
 80046b0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80046b8:	f04f 0b06 	mov.w	fp, #6
 80046bc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c0:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047a8 <MX_GPIO_Init+0x1e0>
 80046c4:	a907      	add	r1, sp, #28
 80046c6:	4650      	mov	r0, sl
 80046c8:	f7fc fd0e 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80046cc:	23e0      	movs	r3, #224	; 0xe0
 80046ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046d6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046da:	a907      	add	r1, sp, #28
 80046dc:	4650      	mov	r0, sl
 80046de:	f7fc fd03 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80046e2:	f04f 0a04 	mov.w	sl, #4
 80046e6:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046ea:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80046ee:	a907      	add	r1, sp, #28
 80046f0:	4829      	ldr	r0, [pc, #164]	; (8004798 <MX_GPIO_Init+0x1d0>)
 80046f2:	f7fc fcf9 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80046f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046fa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fe:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004700:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004702:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8004706:	a907      	add	r1, sp, #28
 8004708:	4823      	ldr	r0, [pc, #140]	; (8004798 <MX_GPIO_Init+0x1d0>)
 800470a:	f7fc fced 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800470e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8004712:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004714:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004716:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004718:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800471a:	a907      	add	r1, sp, #28
 800471c:	481d      	ldr	r0, [pc, #116]	; (8004794 <MX_GPIO_Init+0x1cc>)
 800471e:	f7fc fce3 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 I2S3_SCK_Pin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 8004722:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8004726:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004728:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800472e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004732:	a907      	add	r1, sp, #28
 8004734:	4640      	mov	r0, r8
 8004736:	f7fc fcd7 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800473a:	2320      	movs	r3, #32
 800473c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800473e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004740:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004742:	a907      	add	r1, sp, #28
 8004744:	4813      	ldr	r0, [pc, #76]	; (8004794 <MX_GPIO_Init+0x1cc>)
 8004746:	f7fc fccf 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800474a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800474e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004750:	2312      	movs	r3, #18
 8004752:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004754:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004756:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004758:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800475c:	a907      	add	r1, sp, #28
 800475e:	480e      	ldr	r0, [pc, #56]	; (8004798 <MX_GPIO_Init+0x1d0>)
 8004760:	f7fc fcc2 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
 8004764:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <MX_GPIO_Init+0x1d4>)
 8004768:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 800476c:	a907      	add	r1, sp, #28
 800476e:	4638      	mov	r0, r7
 8004770:	f7fc fcba 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004774:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <MX_GPIO_Init+0x1d8>)
 8004778:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800477c:	a907      	add	r1, sp, #28
 800477e:	4638      	mov	r0, r7
 8004780:	f7fc fcb2 	bl	80010e8 <HAL_GPIO_Init>

}
 8004784:	b00d      	add	sp, #52	; 0x34
 8004786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	40021000 	.word	0x40021000
 8004794:	40020c00 	.word	0x40020c00
 8004798:	40020400 	.word	0x40020400
 800479c:	10110000 	.word	0x10110000
 80047a0:	10120000 	.word	0x10120000
 80047a4:	40020800 	.word	0x40020800
 80047a8:	40020000 	.word	0x40020000

080047ac <__io_putchar>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
  while (!(USART2->SR & USART_SR_TXE)) {}
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <__io_putchar+0x10>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80047b4:	d0fa      	beq.n	80047ac <__io_putchar>
  USART2->DR = (uint32_t)ch;
 80047b6:	4b01      	ldr	r3, [pc, #4]	; (80047bc <__io_putchar+0x10>)
 80047b8:	6058      	str	r0, [r3, #4]
  return ch;
}
 80047ba:	4770      	bx	lr
 80047bc:	40004400 	.word	0x40004400

080047c0 <_write>:

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	4616      	mov	r6, r2
  int i;
  for (i=0; i<len; i++)
 80047c4:	2400      	movs	r4, #0
 80047c6:	e005      	b.n	80047d4 <_write+0x14>
  {
    __io_putchar(*(ptr++));
 80047c8:	1c4d      	adds	r5, r1, #1
 80047ca:	7808      	ldrb	r0, [r1, #0]
 80047cc:	f7ff ffee 	bl	80047ac <__io_putchar>
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
  int i;
  for (i=0; i<len; i++)
 80047d0:	3401      	adds	r4, #1
  {
    __io_putchar(*(ptr++));
 80047d2:	4629      	mov	r1, r5
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
  int i;
  for (i=0; i<len; i++)
 80047d4:	42b4      	cmp	r4, r6
 80047d6:	dbf7      	blt.n	80047c8 <_write+0x8>
  {
    __io_putchar(*(ptr++));
  }
  /* Implement your write code here, this is used by puts and printf for example */
  return len;
}
 80047d8:	4630      	mov	r0, r6
 80047da:	bd70      	pop	{r4, r5, r6, pc}

080047dc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80047dc:	e7fe      	b.n	80047dc <Error_Handler>
 80047de:	bf00      	nop

080047e0 <MX_USART2_UART_Init>:
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80047e0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80047e2:	480a      	ldr	r0, [pc, #40]	; (800480c <MX_USART2_UART_Init+0x2c>)
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <MX_USART2_UART_Init+0x30>)
 80047e6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80047e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80047ec:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047ee:	2300      	movs	r3, #0
 80047f0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047f2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047f4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047f6:	220c      	movs	r2, #12
 80047f8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047fa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047fc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047fe:	f7fd ff85 	bl	800270c <HAL_UART_Init>
 8004802:	b108      	cbz	r0, 8004808 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
 8004804:	f7ff ffea 	bl	80047dc <Error_Handler>
 8004808:	bd08      	pop	{r3, pc}
 800480a:	bf00      	nop
 800480c:	20000608 	.word	0x20000608
 8004810:	40004400 	.word	0x40004400

08004814 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8004814:	b500      	push	{lr}
 8004816:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004818:	2100      	movs	r1, #0
 800481a:	9101      	str	r1, [sp, #4]
 800481c:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <SystemClock_Config+0xac>)
 800481e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004820:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004830:	9102      	str	r1, [sp, #8]
 8004832:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <SystemClock_Config+0xb0>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004842:	9302      	str	r3, [sp, #8]
 8004844:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004846:	2301      	movs	r3, #1
 8004848:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800484a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800484c:	2302      	movs	r3, #2
 800484e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004850:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004854:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004856:	2208      	movs	r2, #8
 8004858:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800485a:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800485e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004860:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004862:	2307      	movs	r3, #7
 8004864:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004866:	a808      	add	r0, sp, #32
 8004868:	f7fd faa6 	bl	8001db8 <HAL_RCC_OscConfig>
 800486c:	b108      	cbz	r0, 8004872 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800486e:	f7ff ffb5 	bl	80047dc <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004872:	230f      	movs	r3, #15
 8004874:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004876:	2302      	movs	r3, #2
 8004878:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800487a:	2300      	movs	r3, #0
 800487c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800487e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004882:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004888:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800488a:	2105      	movs	r1, #5
 800488c:	a803      	add	r0, sp, #12
 800488e:	f7fd fc99 	bl	80021c4 <HAL_RCC_ClockConfig>
 8004892:	b108      	cbz	r0, 8004898 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8004894:	f7ff ffa2 	bl	80047dc <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004898:	f7fd fd6c 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <SystemClock_Config+0xb4>)
 800489e:	fba3 3000 	umull	r3, r0, r3, r0
 80048a2:	0980      	lsrs	r0, r0, #6
 80048a4:	f7fc fbf4 	bl	8001090 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80048a8:	2004      	movs	r0, #4
 80048aa:	f7fc fc07 	bl	80010bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80048ae:	2200      	movs	r2, #0
 80048b0:	4611      	mov	r1, r2
 80048b2:	f04f 30ff 	mov.w	r0, #4294967295
 80048b6:	f7fc fbad 	bl	8001014 <HAL_NVIC_SetPriority>
}
 80048ba:	b015      	add	sp, #84	; 0x54
 80048bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40007000 	.word	0x40007000
 80048c8:	10624dd3 	.word	0x10624dd3

080048cc <main>:
  return len;
}
/* USER CODE END 0 */

int main(void)
{
 80048cc:	b510      	push	{r4, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048ce:	f7fc fb59 	bl	8000f84 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80048d2:	f7ff ff9f 	bl	8004814 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048d6:	f7ff fe77 	bl	80045c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80048da:	f7ff ff81 	bl	80047e0 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80048de:	f000 f8bb 	bl	8004a58 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 80048e2:	4c15      	ldr	r4, [pc, #84]	; (8004938 <main+0x6c>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048ea:	4620      	mov	r0, r4
 80048ec:	f7fc fcdc 	bl	80012a8 <HAL_GPIO_WritePin>
  printf("hello world!\n");
 80048f0:	4812      	ldr	r0, [pc, #72]	; (800493c <main+0x70>)
 80048f2:	f000 fc99 	bl	8005228 <puts>
  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 80048f6:	2201      	movs	r2, #1
 80048f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048fc:	4620      	mov	r0, r4
 80048fe:	f7fc fcd3 	bl	80012a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // Enable usb VBUS
 8004902:	2200      	movs	r2, #0
 8004904:	2101      	movs	r1, #1
 8004906:	480e      	ldr	r0, [pc, #56]	; (8004940 <main+0x74>)
 8004908:	f7fc fcce 	bl	80012a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 800490c:	2201      	movs	r2, #1
 800490e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004912:	4620      	mov	r0, r4
 8004914:	f7fc fcc8 	bl	80012a8 <HAL_GPIO_WritePin>
  return len;
}
/* USER CODE END 0 */

int main(void)
{
 8004918:	2400      	movs	r4, #0
 800491a:	e000      	b.n	800491e <main+0x52>
  while (1)
  {
  /* USER CODE END WHILE */
    MX_USB_HOST_Process();
  /* USER CODE BEGIN 3 */
    if (i++ == 0x10000)
 800491c:	461c      	mov	r4, r3
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800491e:	f000 f8b1 	bl	8004a84 <MX_USB_HOST_Process>
  /* USER CODE BEGIN 3 */
    if (i++ == 0x10000)
 8004922:	1c63      	adds	r3, r4, #1
 8004924:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8004928:	d1f8      	bne.n	800491c <main+0x50>
    {
//      GPIOC->ODR ^= GPIO_Pin_1;
      HAL_GPIO_TogglePin(GPIOD, LD5_Pin|LD6_Pin);
 800492a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800492e:	4802      	ldr	r0, [pc, #8]	; (8004938 <main+0x6c>)
 8004930:	f7fc fcc0 	bl	80012b4 <HAL_GPIO_TogglePin>
 8004934:	e7f0      	b.n	8004918 <main+0x4c>
 8004936:	bf00      	nop
 8004938:	40020c00 	.word	0x40020c00
 800493c:	08008d9c 	.word	0x08008d9c
 8004940:	40020800 	.word	0x40020800

08004944 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004944:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004946:	2007      	movs	r0, #7
 8004948:	f7fc fb52 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800494c:	2200      	movs	r2, #0
 800494e:	4611      	mov	r1, r2
 8004950:	f06f 000b 	mvn.w	r0, #11
 8004954:	f7fc fb5e 	bl	8001014 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004958:	2200      	movs	r2, #0
 800495a:	4611      	mov	r1, r2
 800495c:	f06f 000a 	mvn.w	r0, #10
 8004960:	f7fc fb58 	bl	8001014 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004964:	2200      	movs	r2, #0
 8004966:	4611      	mov	r1, r2
 8004968:	f06f 0009 	mvn.w	r0, #9
 800496c:	f7fc fb52 	bl	8001014 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004970:	2200      	movs	r2, #0
 8004972:	4611      	mov	r1, r2
 8004974:	f06f 0004 	mvn.w	r0, #4
 8004978:	f7fc fb4c 	bl	8001014 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800497c:	2200      	movs	r2, #0
 800497e:	4611      	mov	r1, r2
 8004980:	f06f 0003 	mvn.w	r0, #3
 8004984:	f7fc fb46 	bl	8001014 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004988:	2200      	movs	r2, #0
 800498a:	4611      	mov	r1, r2
 800498c:	f06f 0001 	mvn.w	r0, #1
 8004990:	f7fc fb40 	bl	8001014 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004994:	2200      	movs	r2, #0
 8004996:	4611      	mov	r1, r2
 8004998:	f04f 30ff 	mov.w	r0, #4294967295
 800499c:	f7fc fb3a 	bl	8001014 <HAL_NVIC_SetPriority>
 80049a0:	bd08      	pop	{r3, pc}
 80049a2:	bf00      	nop

080049a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80049a4:	6802      	ldr	r2, [r0, #0]
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <HAL_UART_MspInit+0x48>)
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d11e      	bne.n	80049ea <HAL_UART_MspInit+0x46>

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049ac:	b500      	push	{lr}
 80049ae:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049b0:	2300      	movs	r3, #0
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <HAL_UART_MspInit+0x4c>)
 80049b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049c8:	230c      	movs	r3, #12
 80049ca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049cc:	2302      	movs	r3, #2
 80049ce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049d0:	2301      	movs	r3, #1
 80049d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d4:	2303      	movs	r3, #3
 80049d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049d8:	2307      	movs	r3, #7
 80049da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049dc:	a901      	add	r1, sp, #4
 80049de:	4805      	ldr	r0, [pc, #20]	; (80049f4 <HAL_UART_MspInit+0x50>)
 80049e0:	f7fc fb82 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80049e4:	b007      	add	sp, #28
 80049e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40004400 	.word	0x40004400
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40020000 	.word	0x40020000

080049f8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80049f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049fa:	f7fc fadd 	bl	8000fb8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80049fe:	f7fc fb6f 	bl	80010e0 <HAL_SYSTICK_IRQHandler>
 8004a02:	bd08      	pop	{r3, pc}

08004a04 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8004a04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004a06:	4802      	ldr	r0, [pc, #8]	; (8004a10 <OTG_FS_IRQHandler+0xc>)
 8004a08:	f7fd f8f6 	bl	8001bf8 <HAL_HCD_IRQHandler>
 8004a0c:	bd08      	pop	{r3, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000a10 	.word	0x20000a10

08004a14 <USBH_UserProcess>:
*/ 
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{

  /* USER CODE BEGIN 2 */
  switch(id)
 8004a14:	2904      	cmp	r1, #4
 8004a16:	d00c      	beq.n	8004a32 <USBH_UserProcess+0x1e>
 8004a18:	2905      	cmp	r1, #5
 8004a1a:	d002      	beq.n	8004a22 <USBH_UserProcess+0xe>
 8004a1c:	2902      	cmp	r1, #2
 8004a1e:	d10b      	bne.n	8004a38 <USBH_UserProcess+0x24>
 8004a20:	e003      	b.n	8004a2a <USBH_UserProcess+0x16>
  { 
  case HOST_USER_SELECT_CONFIGURATION:
  break;
    
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8004a22:	2203      	movs	r2, #3
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <USBH_UserProcess+0x28>)
 8004a26:	701a      	strb	r2, [r3, #0]
  break;
 8004a28:	4770      	bx	lr
    
  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <USBH_UserProcess+0x28>)
 8004a2e:	701a      	strb	r2, [r3, #0]
  break;
 8004a30:	4770      	bx	lr

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8004a32:	2201      	movs	r2, #1
 8004a34:	4b01      	ldr	r3, [pc, #4]	; (8004a3c <USBH_UserProcess+0x28>)
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	200005a4 	.word	0x200005a4

08004a40 <USBH_HID_EventCallback>:
/**
* -- Insert your external function declaration here --
*/ 
/* USER CODE BEGIN 1 */

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) {
 8004a40:	b508      	push	{r3, lr}
    printf("key %c\n", USBH_HID_GetASCIICode(USBH_HID_GetKeybdInfo(phost)));
 8004a42:	f7fe fea5 	bl	8003790 <USBH_HID_GetKeybdInfo>
 8004a46:	f7fe fead 	bl	80037a4 <USBH_HID_GetASCIICode>
 8004a4a:	4601      	mov	r1, r0
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <USBH_HID_EventCallback+0x14>)
 8004a4e:	f000 fb73 	bl	8005138 <printf>
 8004a52:	bd08      	pop	{r3, pc}
 8004a54:	08008dac 	.word	0x08008dac

08004a58 <MX_USB_HOST_Init>:
}
/* USER CODE END 1 */

/* init function */				        
void MX_USB_HOST_Init(void)
{
 8004a58:	b510      	push	{r4, lr}
  /* Init Host Library,Add Supported Class and Start the library*/
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8004a5a:	4c07      	ldr	r4, [pc, #28]	; (8004a78 <MX_USB_HOST_Init+0x20>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4907      	ldr	r1, [pc, #28]	; (8004a7c <MX_USB_HOST_Init+0x24>)
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7ff f86b 	bl	8003b3c <USBH_Init>

  USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS);
 8004a66:	4906      	ldr	r1, [pc, #24]	; (8004a80 <MX_USB_HOST_Init+0x28>)
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f7ff f88b 	bl	8003b84 <USBH_RegisterClass>

  USBH_Start(&hUsbHostFS);
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7ff f91e 	bl	8003cb0 <USBH_Start>
 8004a74:	bd10      	pop	{r4, pc}
 8004a76:	bf00      	nop
 8004a78:	20000648 	.word	0x20000648
 8004a7c:	08004a15 	.word	0x08004a15
 8004a80:	20000004 	.word	0x20000004

08004a84 <MX_USB_HOST_Process>:

/*
 * Background task
*/ 
void MX_USB_HOST_Process(void) 
{
 8004a84:	b508      	push	{r3, lr}
  /* USB Host Background task */
    USBH_Process(&hUsbHostFS); 						
 8004a86:	4802      	ldr	r0, [pc, #8]	; (8004a90 <MX_USB_HOST_Process+0xc>)
 8004a88:	f7ff f91c 	bl	8003cc4 <USBH_Process>
 8004a8c:	bd08      	pop	{r3, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000648 	.word	0x20000648

08004a94 <HAL_HCD_MspInit>:
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8004a94:	6803      	ldr	r3, [r0, #0]
 8004a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a9a:	d132      	bne.n	8004b02 <HAL_HCD_MspInit+0x6e>
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004a9c:	b530      	push	{r4, r5, lr}
 8004a9e:	b087      	sub	sp, #28
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aa4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aa6:	2400      	movs	r4, #0
 8004aa8:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aaa:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004aac:	4d15      	ldr	r5, [pc, #84]	; (8004b04 <HAL_HCD_MspInit+0x70>)
 8004aae:	a901      	add	r1, sp, #4
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7fc fb19 	bl	80010e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004ab6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004aba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abc:	2302      	movs	r3, #2
 8004abe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004ac4:	230a      	movs	r3, #10
 8004ac6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac8:	a901      	add	r1, sp, #4
 8004aca:	4628      	mov	r0, r5
 8004acc:	f7fc fb0c 	bl	80010e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <HAL_HCD_MspInit+0x74>)
 8004ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8004ada:	9400      	str	r4, [sp, #0]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ae2:	645a      	str	r2, [r3, #68]	; 0x44
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	9b00      	ldr	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004aee:	4622      	mov	r2, r4
 8004af0:	4621      	mov	r1, r4
 8004af2:	2043      	movs	r0, #67	; 0x43
 8004af4:	f7fc fa8e 	bl	8001014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004af8:	2043      	movs	r0, #67	; 0x43
 8004afa:	f7fc fabd 	bl	8001078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004afe:	b007      	add	sp, #28
 8004b00:	bd30      	pop	{r4, r5, pc}
 8004b02:	4770      	bx	lr
 8004b04:	40020000 	.word	0x40020000
 8004b08:	40023800 	.word	0x40023800

08004b0c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b0c:	b508      	push	{r3, lr}
  USBH_LL_IncTimer (hhcd->pData);
 8004b0e:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8004b12:	f7ff fa01 	bl	8003f18 <USBH_LL_IncTimer>
 8004b16:	bd08      	pop	{r3, pc}

08004b18 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b18:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8004b1a:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8004b1e:	f7ff fa05 	bl	8003f2c <USBH_LL_Connect>
 8004b22:	bd08      	pop	{r3, pc}

08004b24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b24:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 8004b26:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8004b2a:	f7ff fa15 	bl	8003f58 <USBH_LL_Disconnect>
 8004b2e:	bd08      	pop	{r3, pc}

08004b30 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @brief  Notify URB state change callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop

08004b34 <USBH_LL_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Init (USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004b34:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d120      	bne.n	8004b7e <USBH_LL_Init+0x4a>
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Init (USBH_HandleTypeDef *phost)
{
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	4604      	mov	r4, r0
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
  /* Link The driver to the stack */
  hhcd_USB_OTG_FS.pData = phost;
 8004b40:	4810      	ldr	r0, [pc, #64]	; (8004b84 <USBH_LL_Init+0x50>)
 8004b42:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_FS;
 8004b46:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004b4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b4e:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004b50:	2308      	movs	r3, #8
 8004b52:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004b54:	2303      	movs	r3, #3
 8004b56:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004b60:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004b62:	f7fc fc35 	bl	80013d0 <HAL_HCD_Init>
 8004b66:	b108      	cbz	r0, 8004b6c <USBH_LL_Init+0x38>
  {
    Error_Handler();
 8004b68:	f7ff fe38 	bl	80047dc <Error_Handler>
  }

  USBH_LL_SetTimer (phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004b6c:	4805      	ldr	r0, [pc, #20]	; (8004b84 <USBH_LL_Init+0x50>)
 8004b6e:	f7fd f917 	bl	8001da0 <HAL_HCD_GetCurrentFrame>
 8004b72:	4601      	mov	r1, r0
 8004b74:	4620      	mov	r0, r4
 8004b76:	f7ff f9cb 	bl	8003f10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	2000      	movs	r0, #0
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000a10 	.word	0x20000a10

08004b88 <USBH_LL_Start>:
  *         Start the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004b88:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
 8004b8a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8004b8e:	f7fd f8d1 	bl	8001d34 <HAL_HCD_Start>
  return USBH_OK; 
}
 8004b92:	2000      	movs	r0, #0
 8004b94:	bd08      	pop	{r3, pc}
 8004b96:	bf00      	nop

08004b98 <USBH_LL_Stop>:
  *         Stop the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Stop (USBH_HandleTypeDef *phost)
{
 8004b98:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 8004b9a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8004b9e:	f7fd f8df 	bl	8001d60 <HAL_HCD_Stop>
  return USBH_OK; 
}
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	bd08      	pop	{r3, pc}
 8004ba6:	bf00      	nop

08004ba8 <USBH_LL_GetSpeed>:
  *         Return the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed  (USBH_HandleTypeDef *phost)
{
 8004ba8:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
    
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004baa:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8004bae:	f7fd f8fd 	bl	8001dac <HAL_HCD_GetCurrentSpeed>
 8004bb2:	b110      	cbz	r0, 8004bba <USBH_LL_GetSpeed+0x12>
 8004bb4:	2802      	cmp	r0, #2
 8004bb6:	d002      	beq.n	8004bbe <USBH_LL_GetSpeed+0x16>
 8004bb8:	e003      	b.n	8004bc2 <USBH_LL_GetSpeed+0x1a>
  {
  case 0 : 
    speed = USBH_SPEED_HIGH;
 8004bba:	2000      	movs	r0, #0
 8004bbc:	bd08      	pop	{r3, pc}
  case 1 : 
    speed = USBH_SPEED_FULL;    
    break;
    
  case 2 : 
    speed = USBH_SPEED_LOW;    
 8004bbe:	2002      	movs	r0, #2
    break;
 8004bc0:	bd08      	pop	{r3, pc}
  case 0 : 
    speed = USBH_SPEED_HIGH;
    break;
    
  case 1 : 
    speed = USBH_SPEED_FULL;    
 8004bc2:	2001      	movs	r0, #1
  default:  
   speed = USBH_SPEED_FULL;    
    break;  
  }
  return  speed;
}
 8004bc4:	bd08      	pop	{r3, pc}
 8004bc6:	bf00      	nop

08004bc8 <USBH_LL_ResetPort>:
  *         Reset the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
 8004bc8:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
 8004bca:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8004bce:	f7fd f8d9 	bl	8001d84 <HAL_HCD_ResetPort>
  return USBH_OK; 
}
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	bd08      	pop	{r3, pc}
 8004bd6:	bf00      	nop

08004bd8 <USBH_LL_OpenPipe>:
                                      uint8_t epnum,                                      
                                      uint8_t dev_address,
                                      uint8_t speed,
                                      uint8_t ep_type,
                                      uint16_t mps)
{
 8004bd8:	b510      	push	{r4, lr}
 8004bda:	b084      	sub	sp, #16
  HAL_HCD_HC_Init(phost->pData,
 8004bdc:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8004be0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004be4:	9402      	str	r4, [sp, #8]
 8004be6:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004bea:	9401      	str	r4, [sp, #4]
 8004bec:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004bf0:	9400      	str	r4, [sp, #0]
 8004bf2:	f7fc fba1 	bl	8001338 <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	b004      	add	sp, #16
 8004bfa:	bd10      	pop	{r4, pc}

08004bfc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe_num: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef   USBH_LL_ClosePipe   (USBH_HandleTypeDef *phost, uint8_t pipe)   
{
 8004bfc:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe);
 8004bfe:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8004c02:	f7fc fbd3 	bl	80013ac <HAL_HCD_HC_Halt>
  return USBH_OK; 
}
 8004c06:	2000      	movs	r0, #0
 8004c08:	bd08      	pop	{r3, pc}
 8004c0a:	bf00      	nop

08004c0c <USBH_LL_SubmitURB>:
                                            uint8_t ep_type,  
                                            uint8_t token, 
                                            uint8_t* pbuff, 
                                            uint16_t length,
                                            uint8_t do_ping ) 
{
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	b084      	sub	sp, #16
  HAL_HCD_HC_SubmitRequest (phost->pData,
 8004c10:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8004c14:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004c18:	9403      	str	r4, [sp, #12]
 8004c1a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004c1e:	9402      	str	r4, [sp, #8]
 8004c20:	9c07      	ldr	r4, [sp, #28]
 8004c22:	9401      	str	r4, [sp, #4]
 8004c24:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004c28:	9400      	str	r4, [sp, #0]
 8004c2a:	f7fc fc0f 	bl	800144c <HAL_HCD_HC_SubmitRequest>
                            token, 
                            pbuff, 
                            length,
                            do_ping);
  return USBH_OK;   
}
 8004c2e:	2000      	movs	r0, #0
 8004c30:	b004      	add	sp, #16
 8004c32:	bd10      	pop	{r4, pc}

08004c34 <USBH_LL_GetURBState>:
  *            @arg URB_NYET 
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef  USBH_LL_GetURBState (USBH_HandleTypeDef *phost, uint8_t pipe) 
{
 8004c34:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004c36:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8004c3a:	f7fd f8a9 	bl	8001d90 <HAL_HCD_HC_GetURBState>
}
 8004c3e:	bd08      	pop	{r3, pc}

08004c40 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef  USBH_LL_DriverVBUS (USBH_HandleTypeDef *phost, uint8_t state)
{ 
 8004c40:	b508      	push	{r3, lr}
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */
   
      /* USER CODE END DRIVE_HIGH_CHARGE_FOR_FS */ 
    }
  }	
  HAL_Delay(200);
 8004c42:	20c8      	movs	r0, #200	; 0xc8
 8004c44:	f7fc f9c6 	bl	8000fd4 <HAL_Delay>
  return USBH_OK;  
}
 8004c48:	2000      	movs	r0, #0
 8004c4a:	bd08      	pop	{r3, pc}

08004c4c <USBH_LL_SetToggle>:
  * @param  pipe_num: Pipe index     
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef   USBH_LL_SetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
 8004c4c:	b410      	push	{r4}
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004c4e:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
  
  if(pHandle->hc[pipe].ep_is_in)
 8004c52:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8004c56:	00e3      	lsls	r3, r4, #3
 8004c58:	461c      	mov	r4, r3
 8004c5a:	4403      	add	r3, r0
 8004c5c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004c60:	b123      	cbz	r3, 8004c6c <USBH_LL_SetToggle+0x20>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004c62:	4623      	mov	r3, r4
 8004c64:	4403      	add	r3, r0
 8004c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c6a:	e005      	b.n	8004c78 <USBH_LL_SetToggle+0x2c>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8004c6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004c70:	00cb      	lsls	r3, r1, #3
 8004c72:	4403      	add	r3, r0
 8004c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
  return USBH_OK; 
}
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <USBH_Delay>:
  *         Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBH_Delay (uint32_t Delay)
{
 8004c80:	b508      	push	{r3, lr}
  HAL_Delay(Delay);  
 8004c82:	f7fc f9a7 	bl	8000fd4 <HAL_Delay>
 8004c86:	bd08      	pop	{r3, pc}

08004c88 <__libc_init_array>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <__libc_init_array+0x3c>)
 8004c8c:	4c0e      	ldr	r4, [pc, #56]	; (8004cc8 <__libc_init_array+0x40>)
 8004c8e:	1ae4      	subs	r4, r4, r3
 8004c90:	10a4      	asrs	r4, r4, #2
 8004c92:	2500      	movs	r5, #0
 8004c94:	461e      	mov	r6, r3
 8004c96:	42a5      	cmp	r5, r4
 8004c98:	d004      	beq.n	8004ca4 <__libc_init_array+0x1c>
 8004c9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c9e:	4798      	blx	r3
 8004ca0:	3501      	adds	r5, #1
 8004ca2:	e7f8      	b.n	8004c96 <__libc_init_array+0xe>
 8004ca4:	f003 fd5c 	bl	8008760 <_init>
 8004ca8:	4c08      	ldr	r4, [pc, #32]	; (8004ccc <__libc_init_array+0x44>)
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <__libc_init_array+0x48>)
 8004cac:	1ae4      	subs	r4, r4, r3
 8004cae:	10a4      	asrs	r4, r4, #2
 8004cb0:	2500      	movs	r5, #0
 8004cb2:	461e      	mov	r6, r3
 8004cb4:	42a5      	cmp	r5, r4
 8004cb6:	d004      	beq.n	8004cc2 <__libc_init_array+0x3a>
 8004cb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cbc:	4798      	blx	r3
 8004cbe:	3501      	adds	r5, #1
 8004cc0:	e7f8      	b.n	8004cb4 <__libc_init_array+0x2c>
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	08008f8c 	.word	0x08008f8c
 8004cc8:	08008f8c 	.word	0x08008f8c
 8004ccc:	08008f90 	.word	0x08008f90
 8004cd0:	08008f8c 	.word	0x08008f8c

08004cd4 <malloc>:
 8004cd4:	4b02      	ldr	r3, [pc, #8]	; (8004ce0 <malloc+0xc>)
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	f000 b80b 	b.w	8004cf4 <_malloc_r>
 8004cde:	bf00      	nop
 8004ce0:	20000524 	.word	0x20000524

08004ce4 <free>:
 8004ce4:	4b02      	ldr	r3, [pc, #8]	; (8004cf0 <free+0xc>)
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	f002 bb47 	b.w	800737c <_free_r>
 8004cee:	bf00      	nop
 8004cf0:	20000524 	.word	0x20000524

08004cf4 <_malloc_r>:
 8004cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf8:	f101 040b 	add.w	r4, r1, #11
 8004cfc:	2c16      	cmp	r4, #22
 8004cfe:	b085      	sub	sp, #20
 8004d00:	4681      	mov	r9, r0
 8004d02:	d903      	bls.n	8004d0c <_malloc_r+0x18>
 8004d04:	f034 0407 	bics.w	r4, r4, #7
 8004d08:	d501      	bpl.n	8004d0e <_malloc_r+0x1a>
 8004d0a:	e002      	b.n	8004d12 <_malloc_r+0x1e>
 8004d0c:	2410      	movs	r4, #16
 8004d0e:	428c      	cmp	r4, r1
 8004d10:	d203      	bcs.n	8004d1a <_malloc_r+0x26>
 8004d12:	230c      	movs	r3, #12
 8004d14:	f8c9 3000 	str.w	r3, [r9]
 8004d18:	e1ea      	b.n	80050f0 <_malloc_r+0x3fc>
 8004d1a:	4648      	mov	r0, r9
 8004d1c:	f000 fa0a 	bl	8005134 <__malloc_lock>
 8004d20:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004d24:	4d9e      	ldr	r5, [pc, #632]	; (8004fa0 <_malloc_r+0x2ac>)
 8004d26:	d217      	bcs.n	8004d58 <_malloc_r+0x64>
 8004d28:	f104 0208 	add.w	r2, r4, #8
 8004d2c:	442a      	add	r2, r5
 8004d2e:	f1a2 0108 	sub.w	r1, r2, #8
 8004d32:	6856      	ldr	r6, [r2, #4]
 8004d34:	428e      	cmp	r6, r1
 8004d36:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004d3a:	d102      	bne.n	8004d42 <_malloc_r+0x4e>
 8004d3c:	68d6      	ldr	r6, [r2, #12]
 8004d3e:	42b2      	cmp	r2, r6
 8004d40:	d008      	beq.n	8004d54 <_malloc_r+0x60>
 8004d42:	6873      	ldr	r3, [r6, #4]
 8004d44:	68f2      	ldr	r2, [r6, #12]
 8004d46:	68b1      	ldr	r1, [r6, #8]
 8004d48:	f023 0303 	bic.w	r3, r3, #3
 8004d4c:	60ca      	str	r2, [r1, #12]
 8004d4e:	4433      	add	r3, r6
 8004d50:	6091      	str	r1, [r2, #8]
 8004d52:	e02f      	b.n	8004db4 <_malloc_r+0xc0>
 8004d54:	3302      	adds	r3, #2
 8004d56:	e03d      	b.n	8004dd4 <_malloc_r+0xe0>
 8004d58:	0a63      	lsrs	r3, r4, #9
 8004d5a:	d01a      	beq.n	8004d92 <_malloc_r+0x9e>
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d802      	bhi.n	8004d66 <_malloc_r+0x72>
 8004d60:	09a3      	lsrs	r3, r4, #6
 8004d62:	3338      	adds	r3, #56	; 0x38
 8004d64:	e018      	b.n	8004d98 <_malloc_r+0xa4>
 8004d66:	2b14      	cmp	r3, #20
 8004d68:	d801      	bhi.n	8004d6e <_malloc_r+0x7a>
 8004d6a:	335b      	adds	r3, #91	; 0x5b
 8004d6c:	e014      	b.n	8004d98 <_malloc_r+0xa4>
 8004d6e:	2b54      	cmp	r3, #84	; 0x54
 8004d70:	d802      	bhi.n	8004d78 <_malloc_r+0x84>
 8004d72:	0b23      	lsrs	r3, r4, #12
 8004d74:	336e      	adds	r3, #110	; 0x6e
 8004d76:	e00f      	b.n	8004d98 <_malloc_r+0xa4>
 8004d78:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004d7c:	d802      	bhi.n	8004d84 <_malloc_r+0x90>
 8004d7e:	0be3      	lsrs	r3, r4, #15
 8004d80:	3377      	adds	r3, #119	; 0x77
 8004d82:	e009      	b.n	8004d98 <_malloc_r+0xa4>
 8004d84:	f240 5254 	movw	r2, #1364	; 0x554
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d804      	bhi.n	8004d96 <_malloc_r+0xa2>
 8004d8c:	0ca3      	lsrs	r3, r4, #18
 8004d8e:	337c      	adds	r3, #124	; 0x7c
 8004d90:	e002      	b.n	8004d98 <_malloc_r+0xa4>
 8004d92:	233f      	movs	r3, #63	; 0x3f
 8004d94:	e000      	b.n	8004d98 <_malloc_r+0xa4>
 8004d96:	237e      	movs	r3, #126	; 0x7e
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004d9e:	f1a2 0008 	sub.w	r0, r2, #8
 8004da2:	6856      	ldr	r6, [r2, #4]
 8004da4:	e00c      	b.n	8004dc0 <_malloc_r+0xcc>
 8004da6:	2900      	cmp	r1, #0
 8004da8:	68f1      	ldr	r1, [r6, #12]
 8004daa:	db08      	blt.n	8004dbe <_malloc_r+0xca>
 8004dac:	68b3      	ldr	r3, [r6, #8]
 8004dae:	60d9      	str	r1, [r3, #12]
 8004db0:	608b      	str	r3, [r1, #8]
 8004db2:	18b3      	adds	r3, r6, r2
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	e1a3      	b.n	8005106 <_malloc_r+0x412>
 8004dbe:	460e      	mov	r6, r1
 8004dc0:	4286      	cmp	r6, r0
 8004dc2:	d006      	beq.n	8004dd2 <_malloc_r+0xde>
 8004dc4:	6872      	ldr	r2, [r6, #4]
 8004dc6:	f022 0203 	bic.w	r2, r2, #3
 8004dca:	1b11      	subs	r1, r2, r4
 8004dcc:	290f      	cmp	r1, #15
 8004dce:	ddea      	ble.n	8004da6 <_malloc_r+0xb2>
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	4a72      	ldr	r2, [pc, #456]	; (8004fa0 <_malloc_r+0x2ac>)
 8004dd6:	692e      	ldr	r6, [r5, #16]
 8004dd8:	f102 0708 	add.w	r7, r2, #8
 8004ddc:	42be      	cmp	r6, r7
 8004dde:	4639      	mov	r1, r7
 8004de0:	d079      	beq.n	8004ed6 <_malloc_r+0x1e2>
 8004de2:	6870      	ldr	r0, [r6, #4]
 8004de4:	f020 0003 	bic.w	r0, r0, #3
 8004de8:	ebc4 0e00 	rsb	lr, r4, r0
 8004dec:	f1be 0f0f 	cmp.w	lr, #15
 8004df0:	dd0d      	ble.n	8004e0e <_malloc_r+0x11a>
 8004df2:	1933      	adds	r3, r6, r4
 8004df4:	f044 0401 	orr.w	r4, r4, #1
 8004df8:	6074      	str	r4, [r6, #4]
 8004dfa:	6153      	str	r3, [r2, #20]
 8004dfc:	6113      	str	r3, [r2, #16]
 8004dfe:	f04e 0201 	orr.w	r2, lr, #1
 8004e02:	60df      	str	r7, [r3, #12]
 8004e04:	609f      	str	r7, [r3, #8]
 8004e06:	605a      	str	r2, [r3, #4]
 8004e08:	f843 e00e 	str.w	lr, [r3, lr]
 8004e0c:	e17b      	b.n	8005106 <_malloc_r+0x412>
 8004e0e:	f1be 0f00 	cmp.w	lr, #0
 8004e12:	6157      	str	r7, [r2, #20]
 8004e14:	6117      	str	r7, [r2, #16]
 8004e16:	db05      	blt.n	8004e24 <_malloc_r+0x130>
 8004e18:	4430      	add	r0, r6
 8004e1a:	6843      	ldr	r3, [r0, #4]
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	6043      	str	r3, [r0, #4]
 8004e22:	e170      	b.n	8005106 <_malloc_r+0x412>
 8004e24:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004e28:	d215      	bcs.n	8004e56 <_malloc_r+0x162>
 8004e2a:	08c0      	lsrs	r0, r0, #3
 8004e2c:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8004e30:	2701      	movs	r7, #1
 8004e32:	fa07 fe0e 	lsl.w	lr, r7, lr
 8004e36:	6857      	ldr	r7, [r2, #4]
 8004e38:	3001      	adds	r0, #1
 8004e3a:	ea4e 0707 	orr.w	r7, lr, r7
 8004e3e:	6057      	str	r7, [r2, #4]
 8004e40:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8004e44:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8004e48:	f8c6 e008 	str.w	lr, [r6, #8]
 8004e4c:	3f08      	subs	r7, #8
 8004e4e:	60f7      	str	r7, [r6, #12]
 8004e50:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8004e54:	e03d      	b.n	8004ed2 <_malloc_r+0x1de>
 8004e56:	0a42      	lsrs	r2, r0, #9
 8004e58:	2a04      	cmp	r2, #4
 8004e5a:	d802      	bhi.n	8004e62 <_malloc_r+0x16e>
 8004e5c:	0982      	lsrs	r2, r0, #6
 8004e5e:	3238      	adds	r2, #56	; 0x38
 8004e60:	e015      	b.n	8004e8e <_malloc_r+0x19a>
 8004e62:	2a14      	cmp	r2, #20
 8004e64:	d801      	bhi.n	8004e6a <_malloc_r+0x176>
 8004e66:	325b      	adds	r2, #91	; 0x5b
 8004e68:	e011      	b.n	8004e8e <_malloc_r+0x19a>
 8004e6a:	2a54      	cmp	r2, #84	; 0x54
 8004e6c:	d802      	bhi.n	8004e74 <_malloc_r+0x180>
 8004e6e:	0b02      	lsrs	r2, r0, #12
 8004e70:	326e      	adds	r2, #110	; 0x6e
 8004e72:	e00c      	b.n	8004e8e <_malloc_r+0x19a>
 8004e74:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004e78:	d802      	bhi.n	8004e80 <_malloc_r+0x18c>
 8004e7a:	0bc2      	lsrs	r2, r0, #15
 8004e7c:	3277      	adds	r2, #119	; 0x77
 8004e7e:	e006      	b.n	8004e8e <_malloc_r+0x19a>
 8004e80:	f240 5754 	movw	r7, #1364	; 0x554
 8004e84:	42ba      	cmp	r2, r7
 8004e86:	bf9a      	itte	ls
 8004e88:	0c82      	lsrls	r2, r0, #18
 8004e8a:	327c      	addls	r2, #124	; 0x7c
 8004e8c:	227e      	movhi	r2, #126	; 0x7e
 8004e8e:	1c57      	adds	r7, r2, #1
 8004e90:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004e94:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004e98:	f8df c104 	ldr.w	ip, [pc, #260]	; 8004fa0 <_malloc_r+0x2ac>
 8004e9c:	45be      	cmp	lr, r7
 8004e9e:	d10d      	bne.n	8004ebc <_malloc_r+0x1c8>
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	1092      	asrs	r2, r2, #2
 8004ea4:	fa00 f202 	lsl.w	r2, r0, r2
 8004ea8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8004eac:	4310      	orrs	r0, r2
 8004eae:	f8cc 0004 	str.w	r0, [ip, #4]
 8004eb2:	4672      	mov	r2, lr
 8004eb4:	e009      	b.n	8004eca <_malloc_r+0x1d6>
 8004eb6:	68bf      	ldr	r7, [r7, #8]
 8004eb8:	45be      	cmp	lr, r7
 8004eba:	d004      	beq.n	8004ec6 <_malloc_r+0x1d2>
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	f022 0203 	bic.w	r2, r2, #3
 8004ec2:	4290      	cmp	r0, r2
 8004ec4:	d3f7      	bcc.n	8004eb6 <_malloc_r+0x1c2>
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	46be      	mov	lr, r7
 8004eca:	60f2      	str	r2, [r6, #12]
 8004ecc:	f8c6 e008 	str.w	lr, [r6, #8]
 8004ed0:	6096      	str	r6, [r2, #8]
 8004ed2:	f8ce 600c 	str.w	r6, [lr, #12]
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	109a      	asrs	r2, r3, #2
 8004eda:	fa00 f202 	lsl.w	r2, r0, r2
 8004ede:	6868      	ldr	r0, [r5, #4]
 8004ee0:	4282      	cmp	r2, r0
 8004ee2:	d85f      	bhi.n	8004fa4 <_malloc_r+0x2b0>
 8004ee4:	4202      	tst	r2, r0
 8004ee6:	d106      	bne.n	8004ef6 <_malloc_r+0x202>
 8004ee8:	f023 0303 	bic.w	r3, r3, #3
 8004eec:	0052      	lsls	r2, r2, #1
 8004eee:	4202      	tst	r2, r0
 8004ef0:	f103 0304 	add.w	r3, r3, #4
 8004ef4:	d0fa      	beq.n	8004eec <_malloc_r+0x1f8>
 8004ef6:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8004efa:	46c2      	mov	sl, r8
 8004efc:	469c      	mov	ip, r3
 8004efe:	f8da 600c 	ldr.w	r6, [sl, #12]
 8004f02:	4556      	cmp	r6, sl
 8004f04:	d02c      	beq.n	8004f60 <_malloc_r+0x26c>
 8004f06:	6870      	ldr	r0, [r6, #4]
 8004f08:	68f7      	ldr	r7, [r6, #12]
 8004f0a:	f020 0003 	bic.w	r0, r0, #3
 8004f0e:	ebc4 0e00 	rsb	lr, r4, r0
 8004f12:	f1be 0f0f 	cmp.w	lr, #15
 8004f16:	dd11      	ble.n	8004f3c <_malloc_r+0x248>
 8004f18:	1933      	adds	r3, r6, r4
 8004f1a:	f044 0401 	orr.w	r4, r4, #1
 8004f1e:	6074      	str	r4, [r6, #4]
 8004f20:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8004f24:	60d7      	str	r7, [r2, #12]
 8004f26:	60ba      	str	r2, [r7, #8]
 8004f28:	f04e 0201 	orr.w	r2, lr, #1
 8004f2c:	616b      	str	r3, [r5, #20]
 8004f2e:	612b      	str	r3, [r5, #16]
 8004f30:	60d9      	str	r1, [r3, #12]
 8004f32:	6099      	str	r1, [r3, #8]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	f843 e00e 	str.w	lr, [r3, lr]
 8004f3a:	e00b      	b.n	8004f54 <_malloc_r+0x260>
 8004f3c:	f1be 0f00 	cmp.w	lr, #0
 8004f40:	db0c      	blt.n	8004f5c <_malloc_r+0x268>
 8004f42:	1833      	adds	r3, r6, r0
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	605a      	str	r2, [r3, #4]
 8004f4c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004f50:	60df      	str	r7, [r3, #12]
 8004f52:	60bb      	str	r3, [r7, #8]
 8004f54:	4648      	mov	r0, r9
 8004f56:	f000 f8ee 	bl	8005136 <__malloc_unlock>
 8004f5a:	e0d8      	b.n	800510e <_malloc_r+0x41a>
 8004f5c:	463e      	mov	r6, r7
 8004f5e:	e7d0      	b.n	8004f02 <_malloc_r+0x20e>
 8004f60:	f10c 0c01 	add.w	ip, ip, #1
 8004f64:	f01c 0f03 	tst.w	ip, #3
 8004f68:	f10a 0a08 	add.w	sl, sl, #8
 8004f6c:	d1c7      	bne.n	8004efe <_malloc_r+0x20a>
 8004f6e:	0798      	lsls	r0, r3, #30
 8004f70:	d104      	bne.n	8004f7c <_malloc_r+0x288>
 8004f72:	686b      	ldr	r3, [r5, #4]
 8004f74:	ea23 0302 	bic.w	r3, r3, r2
 8004f78:	606b      	str	r3, [r5, #4]
 8004f7a:	e005      	b.n	8004f88 <_malloc_r+0x294>
 8004f7c:	f858 0908 	ldr.w	r0, [r8], #-8
 8004f80:	4580      	cmp	r8, r0
 8004f82:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f86:	d0f2      	beq.n	8004f6e <_malloc_r+0x27a>
 8004f88:	6868      	ldr	r0, [r5, #4]
 8004f8a:	0052      	lsls	r2, r2, #1
 8004f8c:	4282      	cmp	r2, r0
 8004f8e:	d809      	bhi.n	8004fa4 <_malloc_r+0x2b0>
 8004f90:	b142      	cbz	r2, 8004fa4 <_malloc_r+0x2b0>
 8004f92:	4663      	mov	r3, ip
 8004f94:	4202      	tst	r2, r0
 8004f96:	d1ae      	bne.n	8004ef6 <_malloc_r+0x202>
 8004f98:	3304      	adds	r3, #4
 8004f9a:	0052      	lsls	r2, r2, #1
 8004f9c:	e7fa      	b.n	8004f94 <_malloc_r+0x2a0>
 8004f9e:	bf00      	nop
 8004fa0:	20000024 	.word	0x20000024
 8004fa4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8004fa8:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004fac:	f026 0603 	bic.w	r6, r6, #3
 8004fb0:	42b4      	cmp	r4, r6
 8004fb2:	d803      	bhi.n	8004fbc <_malloc_r+0x2c8>
 8004fb4:	1b33      	subs	r3, r6, r4
 8004fb6:	2b0f      	cmp	r3, #15
 8004fb8:	f300 809c 	bgt.w	80050f4 <_malloc_r+0x400>
 8004fbc:	4a56      	ldr	r2, [pc, #344]	; (8005118 <_malloc_r+0x424>)
 8004fbe:	4957      	ldr	r1, [pc, #348]	; (800511c <_malloc_r+0x428>)
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	6808      	ldr	r0, [r1, #0]
 8004fc4:	9101      	str	r1, [sp, #4]
 8004fc6:	f102 0810 	add.w	r8, r2, #16
 8004fca:	4a55      	ldr	r2, [pc, #340]	; (8005120 <_malloc_r+0x42c>)
 8004fcc:	9203      	str	r2, [sp, #12]
 8004fce:	3001      	adds	r0, #1
 8004fd0:	bf18      	it	ne
 8004fd2:	f102 31ff 	addne.w	r1, r2, #4294967295
 8004fd6:	44a0      	add	r8, r4
 8004fd8:	bf1e      	ittt	ne
 8004fda:	4488      	addne	r8, r1
 8004fdc:	4251      	negne	r1, r2
 8004fde:	ea01 0808 	andne.w	r8, r1, r8
 8004fe2:	eb0b 0306 	add.w	r3, fp, r6
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	4648      	mov	r0, r9
 8004fea:	9302      	str	r3, [sp, #8]
 8004fec:	f000 f924 	bl	8005238 <_sbrk_r>
 8004ff0:	1c42      	adds	r2, r0, #1
 8004ff2:	4607      	mov	r7, r0
 8004ff4:	d06f      	beq.n	80050d6 <_malloc_r+0x3e2>
 8004ff6:	9b02      	ldr	r3, [sp, #8]
 8004ff8:	9a03      	ldr	r2, [sp, #12]
 8004ffa:	4283      	cmp	r3, r0
 8004ffc:	d901      	bls.n	8005002 <_malloc_r+0x30e>
 8004ffe:	45ab      	cmp	fp, r5
 8005000:	d169      	bne.n	80050d6 <_malloc_r+0x3e2>
 8005002:	f8df a128 	ldr.w	sl, [pc, #296]	; 800512c <_malloc_r+0x438>
 8005006:	f8df c128 	ldr.w	ip, [pc, #296]	; 8005130 <_malloc_r+0x43c>
 800500a:	f8da 0000 	ldr.w	r0, [sl]
 800500e:	42bb      	cmp	r3, r7
 8005010:	4440      	add	r0, r8
 8005012:	f8ca 0000 	str.w	r0, [sl]
 8005016:	d108      	bne.n	800502a <_malloc_r+0x336>
 8005018:	ea13 0f0c 	tst.w	r3, ip
 800501c:	d105      	bne.n	800502a <_malloc_r+0x336>
 800501e:	68ab      	ldr	r3, [r5, #8]
 8005020:	4446      	add	r6, r8
 8005022:	f046 0601 	orr.w	r6, r6, #1
 8005026:	605e      	str	r6, [r3, #4]
 8005028:	e049      	b.n	80050be <_malloc_r+0x3ca>
 800502a:	9901      	ldr	r1, [sp, #4]
 800502c:	f8d1 e000 	ldr.w	lr, [r1]
 8005030:	f1be 3fff 	cmp.w	lr, #4294967295
 8005034:	bf15      	itete	ne
 8005036:	1afb      	subne	r3, r7, r3
 8005038:	4b38      	ldreq	r3, [pc, #224]	; (800511c <_malloc_r+0x428>)
 800503a:	181b      	addne	r3, r3, r0
 800503c:	601f      	streq	r7, [r3, #0]
 800503e:	bf18      	it	ne
 8005040:	f8ca 3000 	strne.w	r3, [sl]
 8005044:	f017 0307 	ands.w	r3, r7, #7
 8005048:	bf1c      	itt	ne
 800504a:	f1c3 0308 	rsbne	r3, r3, #8
 800504e:	18ff      	addne	r7, r7, r3
 8005050:	44b8      	add	r8, r7
 8005052:	441a      	add	r2, r3
 8005054:	ea08 080c 	and.w	r8, r8, ip
 8005058:	ebc8 0802 	rsb	r8, r8, r2
 800505c:	4641      	mov	r1, r8
 800505e:	4648      	mov	r0, r9
 8005060:	f000 f8ea 	bl	8005238 <_sbrk_r>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	bf04      	itt	eq
 8005068:	4638      	moveq	r0, r7
 800506a:	f04f 0800 	moveq.w	r8, #0
 800506e:	f8da 3000 	ldr.w	r3, [sl]
 8005072:	60af      	str	r7, [r5, #8]
 8005074:	1bc2      	subs	r2, r0, r7
 8005076:	4442      	add	r2, r8
 8005078:	4443      	add	r3, r8
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	45ab      	cmp	fp, r5
 8005080:	f8ca 3000 	str.w	r3, [sl]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	d01a      	beq.n	80050be <_malloc_r+0x3ca>
 8005088:	2e0f      	cmp	r6, #15
 800508a:	d802      	bhi.n	8005092 <_malloc_r+0x39e>
 800508c:	2301      	movs	r3, #1
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	e021      	b.n	80050d6 <_malloc_r+0x3e2>
 8005092:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005096:	3e0c      	subs	r6, #12
 8005098:	f026 0607 	bic.w	r6, r6, #7
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	4333      	orrs	r3, r6
 80050a2:	f8cb 3004 	str.w	r3, [fp, #4]
 80050a6:	eb0b 0306 	add.w	r3, fp, r6
 80050aa:	2205      	movs	r2, #5
 80050ac:	2e0f      	cmp	r6, #15
 80050ae:	605a      	str	r2, [r3, #4]
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	d904      	bls.n	80050be <_malloc_r+0x3ca>
 80050b4:	f10b 0108 	add.w	r1, fp, #8
 80050b8:	4648      	mov	r0, r9
 80050ba:	f002 f95f 	bl	800737c <_free_r>
 80050be:	4a19      	ldr	r2, [pc, #100]	; (8005124 <_malloc_r+0x430>)
 80050c0:	f8da 3000 	ldr.w	r3, [sl]
 80050c4:	6811      	ldr	r1, [r2, #0]
 80050c6:	428b      	cmp	r3, r1
 80050c8:	bf88      	it	hi
 80050ca:	6013      	strhi	r3, [r2, #0]
 80050cc:	4a16      	ldr	r2, [pc, #88]	; (8005128 <_malloc_r+0x434>)
 80050ce:	6811      	ldr	r1, [r2, #0]
 80050d0:	428b      	cmp	r3, r1
 80050d2:	bf88      	it	hi
 80050d4:	6013      	strhi	r3, [r2, #0]
 80050d6:	68ab      	ldr	r3, [r5, #8]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	f022 0203 	bic.w	r2, r2, #3
 80050de:	4294      	cmp	r4, r2
 80050e0:	eba2 0304 	sub.w	r3, r2, r4
 80050e4:	d801      	bhi.n	80050ea <_malloc_r+0x3f6>
 80050e6:	2b0f      	cmp	r3, #15
 80050e8:	dc04      	bgt.n	80050f4 <_malloc_r+0x400>
 80050ea:	4648      	mov	r0, r9
 80050ec:	f000 f823 	bl	8005136 <__malloc_unlock>
 80050f0:	2600      	movs	r6, #0
 80050f2:	e00c      	b.n	800510e <_malloc_r+0x41a>
 80050f4:	68ae      	ldr	r6, [r5, #8]
 80050f6:	f044 0201 	orr.w	r2, r4, #1
 80050fa:	4434      	add	r4, r6
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	6072      	str	r2, [r6, #4]
 8005102:	60ac      	str	r4, [r5, #8]
 8005104:	6063      	str	r3, [r4, #4]
 8005106:	4648      	mov	r0, r9
 8005108:	f000 f815 	bl	8005136 <__malloc_unlock>
 800510c:	3608      	adds	r6, #8
 800510e:	4630      	mov	r0, r6
 8005110:	b005      	add	sp, #20
 8005112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005116:	bf00      	nop
 8005118:	200005b0 	.word	0x200005b0
 800511c:	20000430 	.word	0x20000430
 8005120:	00000080 	.word	0x00000080
 8005124:	200005ac 	.word	0x200005ac
 8005128:	200005a8 	.word	0x200005a8
 800512c:	200005b4 	.word	0x200005b4
 8005130:	0000007f 	.word	0x0000007f

08005134 <__malloc_lock>:
 8005134:	4770      	bx	lr

08005136 <__malloc_unlock>:
 8005136:	4770      	bx	lr

08005138 <printf>:
 8005138:	b40f      	push	{r0, r1, r2, r3}
 800513a:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <printf+0x2c>)
 800513c:	b513      	push	{r0, r1, r4, lr}
 800513e:	681c      	ldr	r4, [r3, #0]
 8005140:	b124      	cbz	r4, 800514c <printf+0x14>
 8005142:	69a3      	ldr	r3, [r4, #24]
 8005144:	b913      	cbnz	r3, 800514c <printf+0x14>
 8005146:	4620      	mov	r0, r4
 8005148:	f002 f850 	bl	80071ec <__sinit>
 800514c:	ab05      	add	r3, sp, #20
 800514e:	9a04      	ldr	r2, [sp, #16]
 8005150:	68a1      	ldr	r1, [r4, #8]
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	4620      	mov	r0, r4
 8005156:	f000 f87f 	bl	8005258 <_vfprintf_r>
 800515a:	b002      	add	sp, #8
 800515c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005160:	b004      	add	sp, #16
 8005162:	4770      	bx	lr
 8005164:	20000524 	.word	0x20000524

08005168 <putchar>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <putchar+0x24>)
 800516c:	681c      	ldr	r4, [r3, #0]
 800516e:	4605      	mov	r5, r0
 8005170:	b124      	cbz	r4, 800517c <putchar+0x14>
 8005172:	69a3      	ldr	r3, [r4, #24]
 8005174:	b913      	cbnz	r3, 800517c <putchar+0x14>
 8005176:	4620      	mov	r0, r4
 8005178:	f002 f838 	bl	80071ec <__sinit>
 800517c:	68a2      	ldr	r2, [r4, #8]
 800517e:	4629      	mov	r1, r5
 8005180:	4620      	mov	r0, r4
 8005182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005186:	f002 be99 	b.w	8007ebc <_putc_r>
 800518a:	bf00      	nop
 800518c:	20000524 	.word	0x20000524

08005190 <_puts_r>:
 8005190:	b530      	push	{r4, r5, lr}
 8005192:	4605      	mov	r5, r0
 8005194:	b089      	sub	sp, #36	; 0x24
 8005196:	4608      	mov	r0, r1
 8005198:	460c      	mov	r4, r1
 800519a:	f7fb f819 	bl	80001d0 <strlen>
 800519e:	4b1e      	ldr	r3, [pc, #120]	; (8005218 <_puts_r+0x88>)
 80051a0:	9306      	str	r3, [sp, #24]
 80051a2:	2301      	movs	r3, #1
 80051a4:	9005      	str	r0, [sp, #20]
 80051a6:	9307      	str	r3, [sp, #28]
 80051a8:	4418      	add	r0, r3
 80051aa:	ab04      	add	r3, sp, #16
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	2302      	movs	r3, #2
 80051b0:	9404      	str	r4, [sp, #16]
 80051b2:	9003      	str	r0, [sp, #12]
 80051b4:	9302      	str	r3, [sp, #8]
 80051b6:	b125      	cbz	r5, 80051c2 <_puts_r+0x32>
 80051b8:	69ab      	ldr	r3, [r5, #24]
 80051ba:	b913      	cbnz	r3, 80051c2 <_puts_r+0x32>
 80051bc:	4628      	mov	r0, r5
 80051be:	f002 f815 	bl	80071ec <__sinit>
 80051c2:	69ab      	ldr	r3, [r5, #24]
 80051c4:	68ac      	ldr	r4, [r5, #8]
 80051c6:	b913      	cbnz	r3, 80051ce <_puts_r+0x3e>
 80051c8:	4628      	mov	r0, r5
 80051ca:	f002 f80f 	bl	80071ec <__sinit>
 80051ce:	4b13      	ldr	r3, [pc, #76]	; (800521c <_puts_r+0x8c>)
 80051d0:	429c      	cmp	r4, r3
 80051d2:	d101      	bne.n	80051d8 <_puts_r+0x48>
 80051d4:	686c      	ldr	r4, [r5, #4]
 80051d6:	e008      	b.n	80051ea <_puts_r+0x5a>
 80051d8:	4b11      	ldr	r3, [pc, #68]	; (8005220 <_puts_r+0x90>)
 80051da:	429c      	cmp	r4, r3
 80051dc:	d101      	bne.n	80051e2 <_puts_r+0x52>
 80051de:	68ac      	ldr	r4, [r5, #8]
 80051e0:	e003      	b.n	80051ea <_puts_r+0x5a>
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <_puts_r+0x94>)
 80051e4:	429c      	cmp	r4, r3
 80051e6:	bf08      	it	eq
 80051e8:	68ec      	ldreq	r4, [r5, #12]
 80051ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ee:	049a      	lsls	r2, r3, #18
 80051f0:	d406      	bmi.n	8005200 <_puts_r+0x70>
 80051f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	6662      	str	r2, [r4, #100]	; 0x64
 8005200:	aa01      	add	r2, sp, #4
 8005202:	4621      	mov	r1, r4
 8005204:	4628      	mov	r0, r5
 8005206:	f002 f977 	bl	80074f8 <__sfvwrite_r>
 800520a:	2800      	cmp	r0, #0
 800520c:	bf14      	ite	ne
 800520e:	f04f 30ff 	movne.w	r0, #4294967295
 8005212:	200a      	moveq	r0, #10
 8005214:	b009      	add	sp, #36	; 0x24
 8005216:	bd30      	pop	{r4, r5, pc}
 8005218:	08008db4 	.word	0x08008db4
 800521c:	08008e18 	.word	0x08008e18
 8005220:	08008e38 	.word	0x08008e38
 8005224:	08008e58 	.word	0x08008e58

08005228 <puts>:
 8005228:	4b02      	ldr	r3, [pc, #8]	; (8005234 <puts+0xc>)
 800522a:	4601      	mov	r1, r0
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	f7ff bfaf 	b.w	8005190 <_puts_r>
 8005232:	bf00      	nop
 8005234:	20000524 	.word	0x20000524

08005238 <_sbrk_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4c06      	ldr	r4, [pc, #24]	; (8005254 <_sbrk_r+0x1c>)
 800523c:	2300      	movs	r3, #0
 800523e:	4605      	mov	r5, r0
 8005240:	4608      	mov	r0, r1
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	f003 fa7e 	bl	8008744 <_sbrk>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_sbrk_r+0x1a>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	b103      	cbz	r3, 8005252 <_sbrk_r+0x1a>
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	20000ca8 	.word	0x20000ca8

08005258 <_vfprintf_r>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	b0bd      	sub	sp, #244	; 0xf4
 800525e:	468b      	mov	fp, r1
 8005260:	9205      	str	r2, [sp, #20]
 8005262:	461c      	mov	r4, r3
 8005264:	461f      	mov	r7, r3
 8005266:	4682      	mov	sl, r0
 8005268:	f002 fab8 	bl	80077dc <_localeconv_r>
 800526c:	6803      	ldr	r3, [r0, #0]
 800526e:	930d      	str	r3, [sp, #52]	; 0x34
 8005270:	4618      	mov	r0, r3
 8005272:	f7fa ffad 	bl	80001d0 <strlen>
 8005276:	9008      	str	r0, [sp, #32]
 8005278:	f1ba 0f00 	cmp.w	sl, #0
 800527c:	d005      	beq.n	800528a <_vfprintf_r+0x32>
 800527e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005282:	b913      	cbnz	r3, 800528a <_vfprintf_r+0x32>
 8005284:	4650      	mov	r0, sl
 8005286:	f001 ffb1 	bl	80071ec <__sinit>
 800528a:	4b9d      	ldr	r3, [pc, #628]	; (8005500 <_vfprintf_r+0x2a8>)
 800528c:	459b      	cmp	fp, r3
 800528e:	d102      	bne.n	8005296 <_vfprintf_r+0x3e>
 8005290:	f8da b004 	ldr.w	fp, [sl, #4]
 8005294:	e00a      	b.n	80052ac <_vfprintf_r+0x54>
 8005296:	4b9b      	ldr	r3, [pc, #620]	; (8005504 <_vfprintf_r+0x2ac>)
 8005298:	459b      	cmp	fp, r3
 800529a:	d102      	bne.n	80052a2 <_vfprintf_r+0x4a>
 800529c:	f8da b008 	ldr.w	fp, [sl, #8]
 80052a0:	e004      	b.n	80052ac <_vfprintf_r+0x54>
 80052a2:	4b99      	ldr	r3, [pc, #612]	; (8005508 <_vfprintf_r+0x2b0>)
 80052a4:	459b      	cmp	fp, r3
 80052a6:	bf08      	it	eq
 80052a8:	f8da b00c 	ldreq.w	fp, [sl, #12]
 80052ac:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80052b0:	0498      	lsls	r0, r3, #18
 80052b2:	d409      	bmi.n	80052c8 <_vfprintf_r+0x70>
 80052b4:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 80052b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052c0:	f8ab 300c 	strh.w	r3, [fp, #12]
 80052c4:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 80052c8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80052cc:	0719      	lsls	r1, r3, #28
 80052ce:	d509      	bpl.n	80052e4 <_vfprintf_r+0x8c>
 80052d0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80052d4:	b133      	cbz	r3, 80052e4 <_vfprintf_r+0x8c>
 80052d6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80052da:	f003 031a 	and.w	r3, r3, #26
 80052de:	2b0a      	cmp	r3, #10
 80052e0:	d116      	bne.n	8005310 <_vfprintf_r+0xb8>
 80052e2:	e009      	b.n	80052f8 <_vfprintf_r+0xa0>
 80052e4:	4659      	mov	r1, fp
 80052e6:	4650      	mov	r0, sl
 80052e8:	f000 ffe6 	bl	80062b8 <__swsetup_r>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d0f2      	beq.n	80052d6 <_vfprintf_r+0x7e>
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
 80052f4:	f000 bfa3 	b.w	800623e <_vfprintf_r+0xfe6>
 80052f8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	db07      	blt.n	8005310 <_vfprintf_r+0xb8>
 8005300:	4623      	mov	r3, r4
 8005302:	9a05      	ldr	r2, [sp, #20]
 8005304:	4659      	mov	r1, fp
 8005306:	4650      	mov	r0, sl
 8005308:	f000 ffa0 	bl	800624c <__sbprintf>
 800530c:	f000 bf97 	b.w	800623e <_vfprintf_r+0xfe6>
 8005310:	ed9f 7b79 	vldr	d7, [pc, #484]	; 80054f8 <_vfprintf_r+0x2a0>
 8005314:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005318:	2300      	movs	r3, #0
 800531a:	ac2c      	add	r4, sp, #176	; 0xb0
 800531c:	941f      	str	r4, [sp, #124]	; 0x7c
 800531e:	9321      	str	r3, [sp, #132]	; 0x84
 8005320:	9320      	str	r3, [sp, #128]	; 0x80
 8005322:	9304      	str	r3, [sp, #16]
 8005324:	9311      	str	r3, [sp, #68]	; 0x44
 8005326:	9310      	str	r3, [sp, #64]	; 0x40
 8005328:	930a      	str	r3, [sp, #40]	; 0x28
 800532a:	9d05      	ldr	r5, [sp, #20]
 800532c:	462b      	mov	r3, r5
 800532e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005332:	b11a      	cbz	r2, 800533c <_vfprintf_r+0xe4>
 8005334:	2a25      	cmp	r2, #37	; 0x25
 8005336:	d001      	beq.n	800533c <_vfprintf_r+0xe4>
 8005338:	461d      	mov	r5, r3
 800533a:	e7f7      	b.n	800532c <_vfprintf_r+0xd4>
 800533c:	9b05      	ldr	r3, [sp, #20]
 800533e:	1aee      	subs	r6, r5, r3
 8005340:	d017      	beq.n	8005372 <_vfprintf_r+0x11a>
 8005342:	e884 0048 	stmia.w	r4, {r3, r6}
 8005346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005348:	4433      	add	r3, r6
 800534a:	9321      	str	r3, [sp, #132]	; 0x84
 800534c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800534e:	3301      	adds	r3, #1
 8005350:	2b07      	cmp	r3, #7
 8005352:	9320      	str	r3, [sp, #128]	; 0x80
 8005354:	dc01      	bgt.n	800535a <_vfprintf_r+0x102>
 8005356:	3408      	adds	r4, #8
 8005358:	e008      	b.n	800536c <_vfprintf_r+0x114>
 800535a:	aa1f      	add	r2, sp, #124	; 0x7c
 800535c:	4659      	mov	r1, fp
 800535e:	4650      	mov	r0, sl
 8005360:	f002 ffcd 	bl	80082fe <__sprint_r>
 8005364:	2800      	cmp	r0, #0
 8005366:	f040 8633 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 800536a:	ac2c      	add	r4, sp, #176	; 0xb0
 800536c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800536e:	4433      	add	r3, r6
 8005370:	930a      	str	r3, [sp, #40]	; 0x28
 8005372:	782b      	ldrb	r3, [r5, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8624 	beq.w	8005fc2 <_vfprintf_r+0xd6a>
 800537a:	2200      	movs	r2, #0
 800537c:	1c6b      	adds	r3, r5, #1
 800537e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005382:	4611      	mov	r1, r2
 8005384:	f04f 39ff 	mov.w	r9, #4294967295
 8005388:	9209      	str	r2, [sp, #36]	; 0x24
 800538a:	4615      	mov	r5, r2
 800538c:	200a      	movs	r0, #10
 800538e:	1c5e      	adds	r6, r3, #1
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	9605      	str	r6, [sp, #20]
 8005394:	9302      	str	r3, [sp, #8]
 8005396:	9b02      	ldr	r3, [sp, #8]
 8005398:	3b20      	subs	r3, #32
 800539a:	2b58      	cmp	r3, #88	; 0x58
 800539c:	f200 826a 	bhi.w	8005874 <_vfprintf_r+0x61c>
 80053a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80053a4:	0268005c 	.word	0x0268005c
 80053a8:	006c0268 	.word	0x006c0268
 80053ac:	02680268 	.word	0x02680268
 80053b0:	02680268 	.word	0x02680268
 80053b4:	02680268 	.word	0x02680268
 80053b8:	0059006f 	.word	0x0059006f
 80053bc:	007a0268 	.word	0x007a0268
 80053c0:	0268007d 	.word	0x0268007d
 80053c4:	00b600a4 	.word	0x00b600a4
 80053c8:	00b600b6 	.word	0x00b600b6
 80053cc:	00b600b6 	.word	0x00b600b6
 80053d0:	00b600b6 	.word	0x00b600b6
 80053d4:	00b600b6 	.word	0x00b600b6
 80053d8:	02680268 	.word	0x02680268
 80053dc:	02680268 	.word	0x02680268
 80053e0:	02680268 	.word	0x02680268
 80053e4:	02680268 	.word	0x02680268
 80053e8:	02680268 	.word	0x02680268
 80053ec:	011200e6 	.word	0x011200e6
 80053f0:	01120268 	.word	0x01120268
 80053f4:	02680268 	.word	0x02680268
 80053f8:	02680268 	.word	0x02680268
 80053fc:	026800c9 	.word	0x026800c9
 8005400:	01590268 	.word	0x01590268
 8005404:	02680268 	.word	0x02680268
 8005408:	02680268 	.word	0x02680268
 800540c:	01a00268 	.word	0x01a00268
 8005410:	02680268 	.word	0x02680268
 8005414:	02680067 	.word	0x02680067
 8005418:	02680268 	.word	0x02680268
 800541c:	02680268 	.word	0x02680268
 8005420:	02680268 	.word	0x02680268
 8005424:	02680268 	.word	0x02680268
 8005428:	00dd0268 	.word	0x00dd0268
 800542c:	01120061 	.word	0x01120061
 8005430:	01120112 	.word	0x01120112
 8005434:	006100cc 	.word	0x006100cc
 8005438:	02680268 	.word	0x02680268
 800543c:	026800cf 	.word	0x026800cf
 8005440:	015b013b 	.word	0x015b013b
 8005444:	00da0176 	.word	0x00da0176
 8005448:	01870268 	.word	0x01870268
 800544c:	01a20268 	.word	0x01a20268
 8005450:	02680268 	.word	0x02680268
 8005454:	01ba      	.short	0x01ba
 8005456:	2201      	movs	r2, #1
 8005458:	212b      	movs	r1, #43	; 0x2b
 800545a:	e002      	b.n	8005462 <_vfprintf_r+0x20a>
 800545c:	b909      	cbnz	r1, 8005462 <_vfprintf_r+0x20a>
 800545e:	2201      	movs	r2, #1
 8005460:	2120      	movs	r1, #32
 8005462:	9b05      	ldr	r3, [sp, #20]
 8005464:	e793      	b.n	800538e <_vfprintf_r+0x136>
 8005466:	2a00      	cmp	r2, #0
 8005468:	f000 8087 	beq.w	800557a <_vfprintf_r+0x322>
 800546c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005470:	e083      	b.n	800557a <_vfprintf_r+0x322>
 8005472:	b10a      	cbz	r2, 8005478 <_vfprintf_r+0x220>
 8005474:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005478:	4b24      	ldr	r3, [pc, #144]	; (800550c <_vfprintf_r+0x2b4>)
 800547a:	e151      	b.n	8005720 <_vfprintf_r+0x4c8>
 800547c:	f045 0501 	orr.w	r5, r5, #1
 8005480:	e7ef      	b.n	8005462 <_vfprintf_r+0x20a>
 8005482:	683e      	ldr	r6, [r7, #0]
 8005484:	9609      	str	r6, [sp, #36]	; 0x24
 8005486:	2e00      	cmp	r6, #0
 8005488:	f107 0304 	add.w	r3, r7, #4
 800548c:	db01      	blt.n	8005492 <_vfprintf_r+0x23a>
 800548e:	461f      	mov	r7, r3
 8005490:	e7e7      	b.n	8005462 <_vfprintf_r+0x20a>
 8005492:	4276      	negs	r6, r6
 8005494:	9609      	str	r6, [sp, #36]	; 0x24
 8005496:	461f      	mov	r7, r3
 8005498:	f045 0504 	orr.w	r5, r5, #4
 800549c:	e7e1      	b.n	8005462 <_vfprintf_r+0x20a>
 800549e:	9e05      	ldr	r6, [sp, #20]
 80054a0:	9b05      	ldr	r3, [sp, #20]
 80054a2:	7836      	ldrb	r6, [r6, #0]
 80054a4:	9602      	str	r6, [sp, #8]
 80054a6:	2e2a      	cmp	r6, #42	; 0x2a
 80054a8:	f103 0301 	add.w	r3, r3, #1
 80054ac:	d002      	beq.n	80054b4 <_vfprintf_r+0x25c>
 80054ae:	f04f 0900 	mov.w	r9, #0
 80054b2:	e00a      	b.n	80054ca <_vfprintf_r+0x272>
 80054b4:	f8d7 9000 	ldr.w	r9, [r7]
 80054b8:	9305      	str	r3, [sp, #20]
 80054ba:	1d3e      	adds	r6, r7, #4
 80054bc:	f1b9 0f00 	cmp.w	r9, #0
 80054c0:	4637      	mov	r7, r6
 80054c2:	dace      	bge.n	8005462 <_vfprintf_r+0x20a>
 80054c4:	f04f 39ff 	mov.w	r9, #4294967295
 80054c8:	e7cb      	b.n	8005462 <_vfprintf_r+0x20a>
 80054ca:	9305      	str	r3, [sp, #20]
 80054cc:	9b02      	ldr	r3, [sp, #8]
 80054ce:	3b30      	subs	r3, #48	; 0x30
 80054d0:	2b09      	cmp	r3, #9
 80054d2:	d808      	bhi.n	80054e6 <_vfprintf_r+0x28e>
 80054d4:	fb00 3909 	mla	r9, r0, r9, r3
 80054d8:	9b05      	ldr	r3, [sp, #20]
 80054da:	461e      	mov	r6, r3
 80054dc:	f816 3b01 	ldrb.w	r3, [r6], #1
 80054e0:	9302      	str	r3, [sp, #8]
 80054e2:	4633      	mov	r3, r6
 80054e4:	e7f1      	b.n	80054ca <_vfprintf_r+0x272>
 80054e6:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 80054ea:	e754      	b.n	8005396 <_vfprintf_r+0x13e>
 80054ec:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80054f0:	e7b7      	b.n	8005462 <_vfprintf_r+0x20a>
 80054f2:	bf00      	nop
 80054f4:	f3af 8000 	nop.w
	...
 8005500:	08008e18 	.word	0x08008e18
 8005504:	08008e38 	.word	0x08008e38
 8005508:	08008e58 	.word	0x08008e58
 800550c:	08008dd6 	.word	0x08008dd6
 8005510:	2300      	movs	r3, #0
 8005512:	9309      	str	r3, [sp, #36]	; 0x24
 8005514:	9b02      	ldr	r3, [sp, #8]
 8005516:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005518:	3b30      	subs	r3, #48	; 0x30
 800551a:	fb00 3306 	mla	r3, r0, r6, r3
 800551e:	9309      	str	r3, [sp, #36]	; 0x24
 8005520:	9b05      	ldr	r3, [sp, #20]
 8005522:	461e      	mov	r6, r3
 8005524:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005528:	9302      	str	r3, [sp, #8]
 800552a:	9b02      	ldr	r3, [sp, #8]
 800552c:	9605      	str	r6, [sp, #20]
 800552e:	3b30      	subs	r3, #48	; 0x30
 8005530:	2b09      	cmp	r3, #9
 8005532:	d9ef      	bls.n	8005514 <_vfprintf_r+0x2bc>
 8005534:	e72f      	b.n	8005396 <_vfprintf_r+0x13e>
 8005536:	f045 0508 	orr.w	r5, r5, #8
 800553a:	e792      	b.n	8005462 <_vfprintf_r+0x20a>
 800553c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8005540:	e78f      	b.n	8005462 <_vfprintf_r+0x20a>
 8005542:	9b05      	ldr	r3, [sp, #20]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b6c      	cmp	r3, #108	; 0x6c
 8005548:	d103      	bne.n	8005552 <_vfprintf_r+0x2fa>
 800554a:	9b05      	ldr	r3, [sp, #20]
 800554c:	3301      	adds	r3, #1
 800554e:	9305      	str	r3, [sp, #20]
 8005550:	e002      	b.n	8005558 <_vfprintf_r+0x300>
 8005552:	f045 0510 	orr.w	r5, r5, #16
 8005556:	e784      	b.n	8005462 <_vfprintf_r+0x20a>
 8005558:	f045 0520 	orr.w	r5, r5, #32
 800555c:	e781      	b.n	8005462 <_vfprintf_r+0x20a>
 800555e:	1d3b      	adds	r3, r7, #4
 8005560:	9303      	str	r3, [sp, #12]
 8005562:	2600      	movs	r6, #0
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800556a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800556e:	e190      	b.n	8005892 <_vfprintf_r+0x63a>
 8005570:	b10a      	cbz	r2, 8005576 <_vfprintf_r+0x31e>
 8005572:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005576:	f045 0510 	orr.w	r5, r5, #16
 800557a:	06aa      	lsls	r2, r5, #26
 800557c:	d508      	bpl.n	8005590 <_vfprintf_r+0x338>
 800557e:	3707      	adds	r7, #7
 8005580:	f027 0707 	bic.w	r7, r7, #7
 8005584:	f107 0308 	add.w	r3, r7, #8
 8005588:	9303      	str	r3, [sp, #12]
 800558a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800558e:	e00e      	b.n	80055ae <_vfprintf_r+0x356>
 8005590:	f015 0f10 	tst.w	r5, #16
 8005594:	f107 0304 	add.w	r3, r7, #4
 8005598:	d002      	beq.n	80055a0 <_vfprintf_r+0x348>
 800559a:	9303      	str	r3, [sp, #12]
 800559c:	683e      	ldr	r6, [r7, #0]
 800559e:	e005      	b.n	80055ac <_vfprintf_r+0x354>
 80055a0:	683e      	ldr	r6, [r7, #0]
 80055a2:	9303      	str	r3, [sp, #12]
 80055a4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055a8:	bf18      	it	ne
 80055aa:	b236      	sxthne	r6, r6
 80055ac:	17f7      	asrs	r7, r6, #31
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	f177 0300 	sbcs.w	r3, r7, #0
 80055b4:	f280 80de 	bge.w	8005774 <_vfprintf_r+0x51c>
 80055b8:	4276      	negs	r6, r6
 80055ba:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80055be:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80055c2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80055c6:	e0d5      	b.n	8005774 <_vfprintf_r+0x51c>
 80055c8:	b10a      	cbz	r2, 80055ce <_vfprintf_r+0x376>
 80055ca:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80055ce:	3707      	adds	r7, #7
 80055d0:	f027 0707 	bic.w	r7, r7, #7
 80055d4:	f107 0308 	add.w	r3, r7, #8
 80055d8:	9303      	str	r3, [sp, #12]
 80055da:	ed97 7b00 	vldr	d7, [r7]
 80055de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80055e2:	9b06      	ldr	r3, [sp, #24]
 80055e4:	9312      	str	r3, [sp, #72]	; 0x48
 80055e6:	9b07      	ldr	r3, [sp, #28]
 80055e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80055ee:	f04f 32ff 	mov.w	r2, #4294967295
 80055f2:	4bab      	ldr	r3, [pc, #684]	; (80058a0 <_vfprintf_r+0x648>)
 80055f4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80055f8:	f7fb fa94 	bl	8000b24 <__aeabi_dcmpun>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	f040 84ee 	bne.w	8005fde <_vfprintf_r+0xd86>
 8005602:	f04f 32ff 	mov.w	r2, #4294967295
 8005606:	4ba6      	ldr	r3, [pc, #664]	; (80058a0 <_vfprintf_r+0x648>)
 8005608:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800560c:	f7fb fa6c 	bl	8000ae8 <__aeabi_dcmple>
 8005610:	2800      	cmp	r0, #0
 8005612:	f040 84e4 	bne.w	8005fde <_vfprintf_r+0xd86>
 8005616:	f000 bdfb 	b.w	8006210 <_vfprintf_r+0xfb8>
 800561a:	b10a      	cbz	r2, 8005620 <_vfprintf_r+0x3c8>
 800561c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005620:	f015 0f20 	tst.w	r5, #32
 8005624:	f107 0304 	add.w	r3, r7, #4
 8005628:	d007      	beq.n	800563a <_vfprintf_r+0x3e2>
 800562a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	17ce      	asrs	r6, r1, #31
 8005630:	4608      	mov	r0, r1
 8005632:	4631      	mov	r1, r6
 8005634:	e9c2 0100 	strd	r0, r1, [r2]
 8005638:	e00b      	b.n	8005652 <_vfprintf_r+0x3fa>
 800563a:	06e9      	lsls	r1, r5, #27
 800563c:	d406      	bmi.n	800564c <_vfprintf_r+0x3f4>
 800563e:	066a      	lsls	r2, r5, #25
 8005640:	d504      	bpl.n	800564c <_vfprintf_r+0x3f4>
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8005648:	8011      	strh	r1, [r2, #0]
 800564a:	e002      	b.n	8005652 <_vfprintf_r+0x3fa>
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005650:	6011      	str	r1, [r2, #0]
 8005652:	461f      	mov	r7, r3
 8005654:	e669      	b.n	800532a <_vfprintf_r+0xd2>
 8005656:	f045 0510 	orr.w	r5, r5, #16
 800565a:	f015 0320 	ands.w	r3, r5, #32
 800565e:	d009      	beq.n	8005674 <_vfprintf_r+0x41c>
 8005660:	3707      	adds	r7, #7
 8005662:	f027 0707 	bic.w	r7, r7, #7
 8005666:	f107 0308 	add.w	r3, r7, #8
 800566a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800566e:	9303      	str	r3, [sp, #12]
 8005670:	2300      	movs	r3, #0
 8005672:	e07b      	b.n	800576c <_vfprintf_r+0x514>
 8005674:	1d3a      	adds	r2, r7, #4
 8005676:	f015 0110 	ands.w	r1, r5, #16
 800567a:	9203      	str	r2, [sp, #12]
 800567c:	d105      	bne.n	800568a <_vfprintf_r+0x432>
 800567e:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005682:	d002      	beq.n	800568a <_vfprintf_r+0x432>
 8005684:	883e      	ldrh	r6, [r7, #0]
 8005686:	2700      	movs	r7, #0
 8005688:	e7f2      	b.n	8005670 <_vfprintf_r+0x418>
 800568a:	683e      	ldr	r6, [r7, #0]
 800568c:	2700      	movs	r7, #0
 800568e:	e06d      	b.n	800576c <_vfprintf_r+0x514>
 8005690:	1d3b      	adds	r3, r7, #4
 8005692:	9303      	str	r3, [sp, #12]
 8005694:	2330      	movs	r3, #48	; 0x30
 8005696:	2278      	movs	r2, #120	; 0x78
 8005698:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800569c:	4b81      	ldr	r3, [pc, #516]	; (80058a4 <_vfprintf_r+0x64c>)
 800569e:	683e      	ldr	r6, [r7, #0]
 80056a0:	9311      	str	r3, [sp, #68]	; 0x44
 80056a2:	2700      	movs	r7, #0
 80056a4:	f045 0502 	orr.w	r5, r5, #2
 80056a8:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80056ac:	2302      	movs	r3, #2
 80056ae:	9202      	str	r2, [sp, #8]
 80056b0:	e05c      	b.n	800576c <_vfprintf_r+0x514>
 80056b2:	2600      	movs	r6, #0
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	45b1      	cmp	r9, r6
 80056b8:	9303      	str	r3, [sp, #12]
 80056ba:	f8d7 8000 	ldr.w	r8, [r7]
 80056be:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80056c2:	db0a      	blt.n	80056da <_vfprintf_r+0x482>
 80056c4:	464a      	mov	r2, r9
 80056c6:	4631      	mov	r1, r6
 80056c8:	4640      	mov	r0, r8
 80056ca:	f7fa fd89 	bl	80001e0 <memchr>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	f000 80ea 	beq.w	80058a8 <_vfprintf_r+0x650>
 80056d4:	ebc8 0900 	rsb	r9, r8, r0
 80056d8:	e0e7      	b.n	80058aa <_vfprintf_r+0x652>
 80056da:	4640      	mov	r0, r8
 80056dc:	f7fa fd78 	bl	80001d0 <strlen>
 80056e0:	4681      	mov	r9, r0
 80056e2:	e0e2      	b.n	80058aa <_vfprintf_r+0x652>
 80056e4:	f045 0510 	orr.w	r5, r5, #16
 80056e8:	06ae      	lsls	r6, r5, #26
 80056ea:	d508      	bpl.n	80056fe <_vfprintf_r+0x4a6>
 80056ec:	3707      	adds	r7, #7
 80056ee:	f027 0707 	bic.w	r7, r7, #7
 80056f2:	f107 0308 	add.w	r3, r7, #8
 80056f6:	9303      	str	r3, [sp, #12]
 80056f8:	e9d7 6700 	ldrd	r6, r7, [r7]
 80056fc:	e00a      	b.n	8005714 <_vfprintf_r+0x4bc>
 80056fe:	1d3b      	adds	r3, r7, #4
 8005700:	f015 0f10 	tst.w	r5, #16
 8005704:	9303      	str	r3, [sp, #12]
 8005706:	d103      	bne.n	8005710 <_vfprintf_r+0x4b8>
 8005708:	0668      	lsls	r0, r5, #25
 800570a:	d501      	bpl.n	8005710 <_vfprintf_r+0x4b8>
 800570c:	883e      	ldrh	r6, [r7, #0]
 800570e:	e000      	b.n	8005712 <_vfprintf_r+0x4ba>
 8005710:	683e      	ldr	r6, [r7, #0]
 8005712:	2700      	movs	r7, #0
 8005714:	2301      	movs	r3, #1
 8005716:	e029      	b.n	800576c <_vfprintf_r+0x514>
 8005718:	b10a      	cbz	r2, 800571e <_vfprintf_r+0x4c6>
 800571a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800571e:	4b61      	ldr	r3, [pc, #388]	; (80058a4 <_vfprintf_r+0x64c>)
 8005720:	9311      	str	r3, [sp, #68]	; 0x44
 8005722:	06a9      	lsls	r1, r5, #26
 8005724:	d508      	bpl.n	8005738 <_vfprintf_r+0x4e0>
 8005726:	3707      	adds	r7, #7
 8005728:	f027 0707 	bic.w	r7, r7, #7
 800572c:	f107 0308 	add.w	r3, r7, #8
 8005730:	9303      	str	r3, [sp, #12]
 8005732:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005736:	e00a      	b.n	800574e <_vfprintf_r+0x4f6>
 8005738:	1d3b      	adds	r3, r7, #4
 800573a:	f015 0f10 	tst.w	r5, #16
 800573e:	9303      	str	r3, [sp, #12]
 8005740:	d103      	bne.n	800574a <_vfprintf_r+0x4f2>
 8005742:	066a      	lsls	r2, r5, #25
 8005744:	d501      	bpl.n	800574a <_vfprintf_r+0x4f2>
 8005746:	883e      	ldrh	r6, [r7, #0]
 8005748:	e000      	b.n	800574c <_vfprintf_r+0x4f4>
 800574a:	683e      	ldr	r6, [r7, #0]
 800574c:	2700      	movs	r7, #0
 800574e:	07eb      	lsls	r3, r5, #31
 8005750:	d50b      	bpl.n	800576a <_vfprintf_r+0x512>
 8005752:	ea56 0307 	orrs.w	r3, r6, r7
 8005756:	d008      	beq.n	800576a <_vfprintf_r+0x512>
 8005758:	2330      	movs	r3, #48	; 0x30
 800575a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800575e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005762:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8005766:	f045 0502 	orr.w	r5, r5, #2
 800576a:	2302      	movs	r3, #2
 800576c:	2200      	movs	r2, #0
 800576e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005772:	e000      	b.n	8005776 <_vfprintf_r+0x51e>
 8005774:	2301      	movs	r3, #1
 8005776:	f1b9 0f00 	cmp.w	r9, #0
 800577a:	f2c0 855a 	blt.w	8006232 <_vfprintf_r+0xfda>
 800577e:	ea56 0207 	orrs.w	r2, r6, r7
 8005782:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8005786:	d103      	bne.n	8005790 <_vfprintf_r+0x538>
 8005788:	f1b9 0f00 	cmp.w	r9, #0
 800578c:	d05f      	beq.n	800584e <_vfprintf_r+0x5f6>
 800578e:	e006      	b.n	800579e <_vfprintf_r+0x546>
 8005790:	460d      	mov	r5, r1
 8005792:	2b01      	cmp	r3, #1
 8005794:	d025      	beq.n	80057e2 <_vfprintf_r+0x58a>
 8005796:	2b02      	cmp	r3, #2
 8005798:	d046      	beq.n	8005828 <_vfprintf_r+0x5d0>
 800579a:	4629      	mov	r1, r5
 800579c:	e007      	b.n	80057ae <_vfprintf_r+0x556>
 800579e:	460d      	mov	r5, r1
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d022      	beq.n	80057ea <_vfprintf_r+0x592>
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d03d      	beq.n	8005824 <_vfprintf_r+0x5cc>
 80057a8:	4629      	mov	r1, r5
 80057aa:	2600      	movs	r6, #0
 80057ac:	2700      	movs	r7, #0
 80057ae:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80057b2:	08f2      	lsrs	r2, r6, #3
 80057b4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80057b8:	08f8      	lsrs	r0, r7, #3
 80057ba:	f006 0307 	and.w	r3, r6, #7
 80057be:	4607      	mov	r7, r0
 80057c0:	4616      	mov	r6, r2
 80057c2:	3330      	adds	r3, #48	; 0x30
 80057c4:	ea56 0207 	orrs.w	r2, r6, r7
 80057c8:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80057cc:	d1f1      	bne.n	80057b2 <_vfprintf_r+0x55a>
 80057ce:	07e8      	lsls	r0, r5, #31
 80057d0:	d548      	bpl.n	8005864 <_vfprintf_r+0x60c>
 80057d2:	2b30      	cmp	r3, #48	; 0x30
 80057d4:	d046      	beq.n	8005864 <_vfprintf_r+0x60c>
 80057d6:	2330      	movs	r3, #48	; 0x30
 80057d8:	f808 3c01 	strb.w	r3, [r8, #-1]
 80057dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80057e0:	e040      	b.n	8005864 <_vfprintf_r+0x60c>
 80057e2:	2f00      	cmp	r7, #0
 80057e4:	bf08      	it	eq
 80057e6:	2e0a      	cmpeq	r6, #10
 80057e8:	d205      	bcs.n	80057f6 <_vfprintf_r+0x59e>
 80057ea:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80057ee:	3630      	adds	r6, #48	; 0x30
 80057f0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80057f4:	e029      	b.n	800584a <_vfprintf_r+0x5f2>
 80057f6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80057fa:	4630      	mov	r0, r6
 80057fc:	4639      	mov	r1, r7
 80057fe:	220a      	movs	r2, #10
 8005800:	2300      	movs	r3, #0
 8005802:	f7fb f9cd 	bl	8000ba0 <__aeabi_uldivmod>
 8005806:	3230      	adds	r2, #48	; 0x30
 8005808:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800580c:	2300      	movs	r3, #0
 800580e:	4630      	mov	r0, r6
 8005810:	4639      	mov	r1, r7
 8005812:	220a      	movs	r2, #10
 8005814:	f7fb f9c4 	bl	8000ba0 <__aeabi_uldivmod>
 8005818:	4606      	mov	r6, r0
 800581a:	460f      	mov	r7, r1
 800581c:	ea56 0307 	orrs.w	r3, r6, r7
 8005820:	d1eb      	bne.n	80057fa <_vfprintf_r+0x5a2>
 8005822:	e012      	b.n	800584a <_vfprintf_r+0x5f2>
 8005824:	2600      	movs	r6, #0
 8005826:	2700      	movs	r7, #0
 8005828:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800582c:	f006 030f 	and.w	r3, r6, #15
 8005830:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005832:	5cd3      	ldrb	r3, [r2, r3]
 8005834:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005838:	0933      	lsrs	r3, r6, #4
 800583a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800583e:	093a      	lsrs	r2, r7, #4
 8005840:	461e      	mov	r6, r3
 8005842:	4617      	mov	r7, r2
 8005844:	ea56 0307 	orrs.w	r3, r6, r7
 8005848:	d1f0      	bne.n	800582c <_vfprintf_r+0x5d4>
 800584a:	4629      	mov	r1, r5
 800584c:	e00a      	b.n	8005864 <_vfprintf_r+0x60c>
 800584e:	b93b      	cbnz	r3, 8005860 <_vfprintf_r+0x608>
 8005850:	07ea      	lsls	r2, r5, #31
 8005852:	d505      	bpl.n	8005860 <_vfprintf_r+0x608>
 8005854:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005858:	2330      	movs	r3, #48	; 0x30
 800585a:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800585e:	e001      	b.n	8005864 <_vfprintf_r+0x60c>
 8005860:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005864:	464e      	mov	r6, r9
 8005866:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800586a:	ebc8 0909 	rsb	r9, r8, r9
 800586e:	460d      	mov	r5, r1
 8005870:	2700      	movs	r7, #0
 8005872:	e01b      	b.n	80058ac <_vfprintf_r+0x654>
 8005874:	b10a      	cbz	r2, 800587a <_vfprintf_r+0x622>
 8005876:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800587a:	9b02      	ldr	r3, [sp, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 83a0 	beq.w	8005fc2 <_vfprintf_r+0xd6a>
 8005882:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005886:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800588a:	2600      	movs	r6, #0
 800588c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005890:	9703      	str	r7, [sp, #12]
 8005892:	f04f 0901 	mov.w	r9, #1
 8005896:	4637      	mov	r7, r6
 8005898:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800589c:	e006      	b.n	80058ac <_vfprintf_r+0x654>
 800589e:	bf00      	nop
 80058a0:	7fefffff 	.word	0x7fefffff
 80058a4:	08008de7 	.word	0x08008de7
 80058a8:	4606      	mov	r6, r0
 80058aa:	4637      	mov	r7, r6
 80058ac:	454e      	cmp	r6, r9
 80058ae:	4633      	mov	r3, r6
 80058b0:	bfb8      	it	lt
 80058b2:	464b      	movlt	r3, r9
 80058b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80058b6:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80058ba:	b113      	cbz	r3, 80058c2 <_vfprintf_r+0x66a>
 80058bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058be:	3301      	adds	r3, #1
 80058c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80058c2:	f015 0302 	ands.w	r3, r5, #2
 80058c6:	9314      	str	r3, [sp, #80]	; 0x50
 80058c8:	bf1e      	ittt	ne
 80058ca:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80058cc:	3302      	addne	r3, #2
 80058ce:	930b      	strne	r3, [sp, #44]	; 0x2c
 80058d0:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80058d4:	9315      	str	r3, [sp, #84]	; 0x54
 80058d6:	d139      	bne.n	800594c <_vfprintf_r+0x6f4>
 80058d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	930c      	str	r3, [sp, #48]	; 0x30
 80058e2:	dd33      	ble.n	800594c <_vfprintf_r+0x6f4>
 80058e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	4ba6      	ldr	r3, [pc, #664]	; (8005b84 <_vfprintf_r+0x92c>)
 80058ea:	6023      	str	r3, [r4, #0]
 80058ec:	dd18      	ble.n	8005920 <_vfprintf_r+0x6c8>
 80058ee:	2310      	movs	r3, #16
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058f4:	3310      	adds	r3, #16
 80058f6:	9321      	str	r3, [sp, #132]	; 0x84
 80058f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058fa:	3301      	adds	r3, #1
 80058fc:	2b07      	cmp	r3, #7
 80058fe:	9320      	str	r3, [sp, #128]	; 0x80
 8005900:	dc01      	bgt.n	8005906 <_vfprintf_r+0x6ae>
 8005902:	3408      	adds	r4, #8
 8005904:	e008      	b.n	8005918 <_vfprintf_r+0x6c0>
 8005906:	aa1f      	add	r2, sp, #124	; 0x7c
 8005908:	4659      	mov	r1, fp
 800590a:	4650      	mov	r0, sl
 800590c:	f002 fcf7 	bl	80082fe <__sprint_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	f040 835d 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005916:	ac2c      	add	r4, sp, #176	; 0xb0
 8005918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800591a:	3b10      	subs	r3, #16
 800591c:	930c      	str	r3, [sp, #48]	; 0x30
 800591e:	e7e1      	b.n	80058e4 <_vfprintf_r+0x68c>
 8005920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005922:	6063      	str	r3, [r4, #4]
 8005924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005928:	4413      	add	r3, r2
 800592a:	9321      	str	r3, [sp, #132]	; 0x84
 800592c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800592e:	3301      	adds	r3, #1
 8005930:	2b07      	cmp	r3, #7
 8005932:	9320      	str	r3, [sp, #128]	; 0x80
 8005934:	dc01      	bgt.n	800593a <_vfprintf_r+0x6e2>
 8005936:	3408      	adds	r4, #8
 8005938:	e008      	b.n	800594c <_vfprintf_r+0x6f4>
 800593a:	aa1f      	add	r2, sp, #124	; 0x7c
 800593c:	4659      	mov	r1, fp
 800593e:	4650      	mov	r0, sl
 8005940:	f002 fcdd 	bl	80082fe <__sprint_r>
 8005944:	2800      	cmp	r0, #0
 8005946:	f040 8343 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 800594a:	ac2c      	add	r4, sp, #176	; 0xb0
 800594c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005950:	b1bb      	cbz	r3, 8005982 <_vfprintf_r+0x72a>
 8005952:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	2301      	movs	r3, #1
 800595a:	6063      	str	r3, [r4, #4]
 800595c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800595e:	3301      	adds	r3, #1
 8005960:	9321      	str	r3, [sp, #132]	; 0x84
 8005962:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005964:	3301      	adds	r3, #1
 8005966:	2b07      	cmp	r3, #7
 8005968:	9320      	str	r3, [sp, #128]	; 0x80
 800596a:	dc01      	bgt.n	8005970 <_vfprintf_r+0x718>
 800596c:	3408      	adds	r4, #8
 800596e:	e008      	b.n	8005982 <_vfprintf_r+0x72a>
 8005970:	aa1f      	add	r2, sp, #124	; 0x7c
 8005972:	4659      	mov	r1, fp
 8005974:	4650      	mov	r0, sl
 8005976:	f002 fcc2 	bl	80082fe <__sprint_r>
 800597a:	2800      	cmp	r0, #0
 800597c:	f040 8328 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005980:	ac2c      	add	r4, sp, #176	; 0xb0
 8005982:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005984:	b1b3      	cbz	r3, 80059b4 <_vfprintf_r+0x75c>
 8005986:	ab18      	add	r3, sp, #96	; 0x60
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	2302      	movs	r3, #2
 800598c:	6063      	str	r3, [r4, #4]
 800598e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005990:	3302      	adds	r3, #2
 8005992:	9321      	str	r3, [sp, #132]	; 0x84
 8005994:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005996:	3301      	adds	r3, #1
 8005998:	2b07      	cmp	r3, #7
 800599a:	9320      	str	r3, [sp, #128]	; 0x80
 800599c:	dc01      	bgt.n	80059a2 <_vfprintf_r+0x74a>
 800599e:	3408      	adds	r4, #8
 80059a0:	e008      	b.n	80059b4 <_vfprintf_r+0x75c>
 80059a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80059a4:	4659      	mov	r1, fp
 80059a6:	4650      	mov	r0, sl
 80059a8:	f002 fca9 	bl	80082fe <__sprint_r>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	f040 830f 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 80059b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80059b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059b6:	2b80      	cmp	r3, #128	; 0x80
 80059b8:	d135      	bne.n	8005a26 <_vfprintf_r+0x7ce>
 80059ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059be:	1a9b      	subs	r3, r3, r2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	dd30      	ble.n	8005a26 <_vfprintf_r+0x7ce>
 80059c4:	4a70      	ldr	r2, [pc, #448]	; (8005b88 <_vfprintf_r+0x930>)
 80059c6:	6022      	str	r2, [r4, #0]
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	dd18      	ble.n	80059fe <_vfprintf_r+0x7a6>
 80059cc:	2210      	movs	r2, #16
 80059ce:	6062      	str	r2, [r4, #4]
 80059d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059d2:	3210      	adds	r2, #16
 80059d4:	9221      	str	r2, [sp, #132]	; 0x84
 80059d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059d8:	3201      	adds	r2, #1
 80059da:	2a07      	cmp	r2, #7
 80059dc:	9220      	str	r2, [sp, #128]	; 0x80
 80059de:	dc01      	bgt.n	80059e4 <_vfprintf_r+0x78c>
 80059e0:	3408      	adds	r4, #8
 80059e2:	e00a      	b.n	80059fa <_vfprintf_r+0x7a2>
 80059e4:	aa1f      	add	r2, sp, #124	; 0x7c
 80059e6:	4659      	mov	r1, fp
 80059e8:	4650      	mov	r0, sl
 80059ea:	930c      	str	r3, [sp, #48]	; 0x30
 80059ec:	f002 fc87 	bl	80082fe <__sprint_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	f040 82ed 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 80059f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059f8:	ac2c      	add	r4, sp, #176	; 0xb0
 80059fa:	3b10      	subs	r3, #16
 80059fc:	e7e2      	b.n	80059c4 <_vfprintf_r+0x76c>
 80059fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a00:	6063      	str	r3, [r4, #4]
 8005a02:	4413      	add	r3, r2
 8005a04:	9321      	str	r3, [sp, #132]	; 0x84
 8005a06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a08:	3301      	adds	r3, #1
 8005a0a:	2b07      	cmp	r3, #7
 8005a0c:	9320      	str	r3, [sp, #128]	; 0x80
 8005a0e:	dc01      	bgt.n	8005a14 <_vfprintf_r+0x7bc>
 8005a10:	3408      	adds	r4, #8
 8005a12:	e008      	b.n	8005a26 <_vfprintf_r+0x7ce>
 8005a14:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a16:	4659      	mov	r1, fp
 8005a18:	4650      	mov	r0, sl
 8005a1a:	f002 fc70 	bl	80082fe <__sprint_r>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f040 82d6 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005a24:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a26:	ebc9 0606 	rsb	r6, r9, r6
 8005a2a:	2e00      	cmp	r6, #0
 8005a2c:	dd2e      	ble.n	8005a8c <_vfprintf_r+0x834>
 8005a2e:	4b56      	ldr	r3, [pc, #344]	; (8005b88 <_vfprintf_r+0x930>)
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	2e10      	cmp	r6, #16
 8005a34:	dd16      	ble.n	8005a64 <_vfprintf_r+0x80c>
 8005a36:	2310      	movs	r3, #16
 8005a38:	6063      	str	r3, [r4, #4]
 8005a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a3c:	3310      	adds	r3, #16
 8005a3e:	9321      	str	r3, [sp, #132]	; 0x84
 8005a40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a42:	3301      	adds	r3, #1
 8005a44:	2b07      	cmp	r3, #7
 8005a46:	9320      	str	r3, [sp, #128]	; 0x80
 8005a48:	dc01      	bgt.n	8005a4e <_vfprintf_r+0x7f6>
 8005a4a:	3408      	adds	r4, #8
 8005a4c:	e008      	b.n	8005a60 <_vfprintf_r+0x808>
 8005a4e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a50:	4659      	mov	r1, fp
 8005a52:	4650      	mov	r0, sl
 8005a54:	f002 fc53 	bl	80082fe <__sprint_r>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	f040 82b9 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005a5e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a60:	3e10      	subs	r6, #16
 8005a62:	e7e4      	b.n	8005a2e <_vfprintf_r+0x7d6>
 8005a64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a66:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005a68:	6066      	str	r6, [r4, #4]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	4406      	add	r6, r0
 8005a6e:	2b07      	cmp	r3, #7
 8005a70:	9621      	str	r6, [sp, #132]	; 0x84
 8005a72:	9320      	str	r3, [sp, #128]	; 0x80
 8005a74:	dc01      	bgt.n	8005a7a <_vfprintf_r+0x822>
 8005a76:	3408      	adds	r4, #8
 8005a78:	e008      	b.n	8005a8c <_vfprintf_r+0x834>
 8005a7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a7c:	4659      	mov	r1, fp
 8005a7e:	4650      	mov	r0, sl
 8005a80:	f002 fc3d 	bl	80082fe <__sprint_r>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	f040 82a3 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005a8a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a8c:	05eb      	lsls	r3, r5, #23
 8005a8e:	d414      	bmi.n	8005aba <_vfprintf_r+0x862>
 8005a90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a92:	e884 0300 	stmia.w	r4, {r8, r9}
 8005a96:	444b      	add	r3, r9
 8005a98:	9321      	str	r3, [sp, #132]	; 0x84
 8005a9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	2b07      	cmp	r3, #7
 8005aa0:	9320      	str	r3, [sp, #128]	; 0x80
 8005aa2:	f340 8244 	ble.w	8005f2e <_vfprintf_r+0xcd6>
 8005aa6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005aa8:	4659      	mov	r1, fp
 8005aaa:	4650      	mov	r0, sl
 8005aac:	f002 fc27 	bl	80082fe <__sprint_r>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	f040 828d 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005ab6:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ab8:	e23a      	b.n	8005f30 <_vfprintf_r+0xcd8>
 8005aba:	9b02      	ldr	r3, [sp, #8]
 8005abc:	2b65      	cmp	r3, #101	; 0x65
 8005abe:	f340 81ad 	ble.w	8005e1c <_vfprintf_r+0xbc4>
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aca:	f7fa fff9 	bl	8000ac0 <__aeabi_dcmpeq>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d05e      	beq.n	8005b90 <_vfprintf_r+0x938>
 8005ad2:	4b2e      	ldr	r3, [pc, #184]	; (8005b8c <_vfprintf_r+0x934>)
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	6063      	str	r3, [r4, #4]
 8005ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005adc:	3301      	adds	r3, #1
 8005ade:	9321      	str	r3, [sp, #132]	; 0x84
 8005ae0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	2b07      	cmp	r3, #7
 8005ae6:	9320      	str	r3, [sp, #128]	; 0x80
 8005ae8:	dc01      	bgt.n	8005aee <_vfprintf_r+0x896>
 8005aea:	3408      	adds	r4, #8
 8005aec:	e008      	b.n	8005b00 <_vfprintf_r+0x8a8>
 8005aee:	aa1f      	add	r2, sp, #124	; 0x7c
 8005af0:	4659      	mov	r1, fp
 8005af2:	4650      	mov	r0, sl
 8005af4:	f002 fc03 	bl	80082fe <__sprint_r>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	f040 8269 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005afe:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b02:	9a04      	ldr	r2, [sp, #16]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	db02      	blt.n	8005b0e <_vfprintf_r+0x8b6>
 8005b08:	07ef      	lsls	r7, r5, #31
 8005b0a:	f140 8211 	bpl.w	8005f30 <_vfprintf_r+0xcd8>
 8005b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	9b08      	ldr	r3, [sp, #32]
 8005b14:	6063      	str	r3, [r4, #4]
 8005b16:	9a08      	ldr	r2, [sp, #32]
 8005b18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b1a:	4413      	add	r3, r2
 8005b1c:	9321      	str	r3, [sp, #132]	; 0x84
 8005b1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b20:	3301      	adds	r3, #1
 8005b22:	2b07      	cmp	r3, #7
 8005b24:	9320      	str	r3, [sp, #128]	; 0x80
 8005b26:	dc01      	bgt.n	8005b2c <_vfprintf_r+0x8d4>
 8005b28:	3408      	adds	r4, #8
 8005b2a:	e008      	b.n	8005b3e <_vfprintf_r+0x8e6>
 8005b2c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b2e:	4659      	mov	r1, fp
 8005b30:	4650      	mov	r0, sl
 8005b32:	f002 fbe4 	bl	80082fe <__sprint_r>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	f040 824a 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005b3c:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	1e5e      	subs	r6, r3, #1
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	f340 81f4 	ble.w	8005f30 <_vfprintf_r+0xcd8>
 8005b48:	4f0f      	ldr	r7, [pc, #60]	; (8005b88 <_vfprintf_r+0x930>)
 8005b4a:	f04f 0810 	mov.w	r8, #16
 8005b4e:	2e10      	cmp	r6, #16
 8005b50:	f340 8159 	ble.w	8005e06 <_vfprintf_r+0xbae>
 8005b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b56:	3310      	adds	r3, #16
 8005b58:	9321      	str	r3, [sp, #132]	; 0x84
 8005b5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	2b07      	cmp	r3, #7
 8005b60:	e884 0180 	stmia.w	r4, {r7, r8}
 8005b64:	9320      	str	r3, [sp, #128]	; 0x80
 8005b66:	dc01      	bgt.n	8005b6c <_vfprintf_r+0x914>
 8005b68:	3408      	adds	r4, #8
 8005b6a:	e008      	b.n	8005b7e <_vfprintf_r+0x926>
 8005b6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b6e:	4659      	mov	r1, fp
 8005b70:	4650      	mov	r0, sl
 8005b72:	f002 fbc4 	bl	80082fe <__sprint_r>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	f040 822a 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005b7c:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b7e:	3e10      	subs	r6, #16
 8005b80:	e7e5      	b.n	8005b4e <_vfprintf_r+0x8f6>
 8005b82:	bf00      	nop
 8005b84:	08008db6 	.word	0x08008db6
 8005b88:	08008dfa 	.word	0x08008dfa
 8005b8c:	08008df8 	.word	0x08008df8
 8005b90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	dc7c      	bgt.n	8005c90 <_vfprintf_r+0xa38>
 8005b96:	4b9f      	ldr	r3, [pc, #636]	; (8005e14 <_vfprintf_r+0xbbc>)
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	6063      	str	r3, [r4, #4]
 8005b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	9321      	str	r3, [sp, #132]	; 0x84
 8005ba4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	2b07      	cmp	r3, #7
 8005baa:	9320      	str	r3, [sp, #128]	; 0x80
 8005bac:	dc01      	bgt.n	8005bb2 <_vfprintf_r+0x95a>
 8005bae:	3408      	adds	r4, #8
 8005bb0:	e008      	b.n	8005bc4 <_vfprintf_r+0x96c>
 8005bb2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005bb4:	4659      	mov	r1, fp
 8005bb6:	4650      	mov	r0, sl
 8005bb8:	f002 fba1 	bl	80082fe <__sprint_r>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	f040 8207 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005bc2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005bc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bc6:	b923      	cbnz	r3, 8005bd2 <_vfprintf_r+0x97a>
 8005bc8:	9b04      	ldr	r3, [sp, #16]
 8005bca:	b913      	cbnz	r3, 8005bd2 <_vfprintf_r+0x97a>
 8005bcc:	07ee      	lsls	r6, r5, #31
 8005bce:	f140 81af 	bpl.w	8005f30 <_vfprintf_r+0xcd8>
 8005bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	9b08      	ldr	r3, [sp, #32]
 8005bd8:	6063      	str	r3, [r4, #4]
 8005bda:	9a08      	ldr	r2, [sp, #32]
 8005bdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bde:	4413      	add	r3, r2
 8005be0:	9321      	str	r3, [sp, #132]	; 0x84
 8005be2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005be4:	3301      	adds	r3, #1
 8005be6:	2b07      	cmp	r3, #7
 8005be8:	9320      	str	r3, [sp, #128]	; 0x80
 8005bea:	dc02      	bgt.n	8005bf2 <_vfprintf_r+0x99a>
 8005bec:	f104 0308 	add.w	r3, r4, #8
 8005bf0:	e008      	b.n	8005c04 <_vfprintf_r+0x9ac>
 8005bf2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	4650      	mov	r0, sl
 8005bf8:	f002 fb81 	bl	80082fe <__sprint_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f040 81e7 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005c02:	ab2c      	add	r3, sp, #176	; 0xb0
 8005c04:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005c06:	4276      	negs	r6, r6
 8005c08:	2e00      	cmp	r6, #0
 8005c0a:	dd30      	ble.n	8005c6e <_vfprintf_r+0xa16>
 8005c0c:	4f82      	ldr	r7, [pc, #520]	; (8005e18 <_vfprintf_r+0xbc0>)
 8005c0e:	2410      	movs	r4, #16
 8005c10:	2e10      	cmp	r6, #16
 8005c12:	dd16      	ble.n	8005c42 <_vfprintf_r+0x9ea>
 8005c14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c16:	601f      	str	r7, [r3, #0]
 8005c18:	3210      	adds	r2, #16
 8005c1a:	9221      	str	r2, [sp, #132]	; 0x84
 8005c1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c1e:	605c      	str	r4, [r3, #4]
 8005c20:	3201      	adds	r2, #1
 8005c22:	2a07      	cmp	r2, #7
 8005c24:	9220      	str	r2, [sp, #128]	; 0x80
 8005c26:	dc01      	bgt.n	8005c2c <_vfprintf_r+0x9d4>
 8005c28:	3308      	adds	r3, #8
 8005c2a:	e008      	b.n	8005c3e <_vfprintf_r+0x9e6>
 8005c2c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c2e:	4659      	mov	r1, fp
 8005c30:	4650      	mov	r0, sl
 8005c32:	f002 fb64 	bl	80082fe <__sprint_r>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	f040 81ca 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005c3c:	ab2c      	add	r3, sp, #176	; 0xb0
 8005c3e:	3e10      	subs	r6, #16
 8005c40:	e7e6      	b.n	8005c10 <_vfprintf_r+0x9b8>
 8005c42:	4a75      	ldr	r2, [pc, #468]	; (8005e18 <_vfprintf_r+0xbc0>)
 8005c44:	e883 0044 	stmia.w	r3, {r2, r6}
 8005c48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c4a:	4416      	add	r6, r2
 8005c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c4e:	9621      	str	r6, [sp, #132]	; 0x84
 8005c50:	3201      	adds	r2, #1
 8005c52:	2a07      	cmp	r2, #7
 8005c54:	9220      	str	r2, [sp, #128]	; 0x80
 8005c56:	dc01      	bgt.n	8005c5c <_vfprintf_r+0xa04>
 8005c58:	3308      	adds	r3, #8
 8005c5a:	e008      	b.n	8005c6e <_vfprintf_r+0xa16>
 8005c5c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c5e:	4659      	mov	r1, fp
 8005c60:	4650      	mov	r0, sl
 8005c62:	f002 fb4c 	bl	80082fe <__sprint_r>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	f040 81b2 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005c6c:	ab2c      	add	r3, sp, #176	; 0xb0
 8005c6e:	9a04      	ldr	r2, [sp, #16]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	9904      	ldr	r1, [sp, #16]
 8005c74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c76:	f8c3 8000 	str.w	r8, [r3]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	9221      	str	r2, [sp, #132]	; 0x84
 8005c7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c80:	3201      	adds	r2, #1
 8005c82:	2a07      	cmp	r2, #7
 8005c84:	9220      	str	r2, [sp, #128]	; 0x80
 8005c86:	f73f af0e 	bgt.w	8005aa6 <_vfprintf_r+0x84e>
 8005c8a:	f103 0408 	add.w	r4, r3, #8
 8005c8e:	e14f      	b.n	8005f30 <_vfprintf_r+0xcd8>
 8005c90:	9b04      	ldr	r3, [sp, #16]
 8005c92:	42bb      	cmp	r3, r7
 8005c94:	bfa8      	it	ge
 8005c96:	463b      	movge	r3, r7
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	461e      	mov	r6, r3
 8005c9c:	dd15      	ble.n	8005cca <_vfprintf_r+0xa72>
 8005c9e:	6063      	str	r3, [r4, #4]
 8005ca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ca2:	f8c4 8000 	str.w	r8, [r4]
 8005ca6:	4433      	add	r3, r6
 8005ca8:	9321      	str	r3, [sp, #132]	; 0x84
 8005caa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cac:	3301      	adds	r3, #1
 8005cae:	2b07      	cmp	r3, #7
 8005cb0:	9320      	str	r3, [sp, #128]	; 0x80
 8005cb2:	dc01      	bgt.n	8005cb8 <_vfprintf_r+0xa60>
 8005cb4:	3408      	adds	r4, #8
 8005cb6:	e008      	b.n	8005cca <_vfprintf_r+0xa72>
 8005cb8:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cba:	4659      	mov	r1, fp
 8005cbc:	4650      	mov	r0, sl
 8005cbe:	f002 fb1e 	bl	80082fe <__sprint_r>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f040 8184 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005cc8:	ac2c      	add	r4, sp, #176	; 0xb0
 8005cca:	2e00      	cmp	r6, #0
 8005ccc:	bfac      	ite	ge
 8005cce:	1bbe      	subge	r6, r7, r6
 8005cd0:	463e      	movlt	r6, r7
 8005cd2:	2e00      	cmp	r6, #0
 8005cd4:	dd30      	ble.n	8005d38 <_vfprintf_r+0xae0>
 8005cd6:	f04f 0910 	mov.w	r9, #16
 8005cda:	4b4f      	ldr	r3, [pc, #316]	; (8005e18 <_vfprintf_r+0xbc0>)
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	2e10      	cmp	r6, #16
 8005ce0:	dd16      	ble.n	8005d10 <_vfprintf_r+0xab8>
 8005ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ce4:	f8c4 9004 	str.w	r9, [r4, #4]
 8005ce8:	3310      	adds	r3, #16
 8005cea:	9321      	str	r3, [sp, #132]	; 0x84
 8005cec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cee:	3301      	adds	r3, #1
 8005cf0:	2b07      	cmp	r3, #7
 8005cf2:	9320      	str	r3, [sp, #128]	; 0x80
 8005cf4:	dc01      	bgt.n	8005cfa <_vfprintf_r+0xaa2>
 8005cf6:	3408      	adds	r4, #8
 8005cf8:	e008      	b.n	8005d0c <_vfprintf_r+0xab4>
 8005cfa:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	4650      	mov	r0, sl
 8005d00:	f002 fafd 	bl	80082fe <__sprint_r>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f040 8163 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005d0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d0c:	3e10      	subs	r6, #16
 8005d0e:	e7e4      	b.n	8005cda <_vfprintf_r+0xa82>
 8005d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d12:	6066      	str	r6, [r4, #4]
 8005d14:	441e      	add	r6, r3
 8005d16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d18:	9621      	str	r6, [sp, #132]	; 0x84
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	2b07      	cmp	r3, #7
 8005d1e:	9320      	str	r3, [sp, #128]	; 0x80
 8005d20:	dc01      	bgt.n	8005d26 <_vfprintf_r+0xace>
 8005d22:	3408      	adds	r4, #8
 8005d24:	e008      	b.n	8005d38 <_vfprintf_r+0xae0>
 8005d26:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d28:	4659      	mov	r1, fp
 8005d2a:	4650      	mov	r0, sl
 8005d2c:	f002 fae7 	bl	80082fe <__sprint_r>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	f040 814d 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005d36:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d3a:	9a04      	ldr	r2, [sp, #16]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	4447      	add	r7, r8
 8005d40:	db01      	blt.n	8005d46 <_vfprintf_r+0xaee>
 8005d42:	07e8      	lsls	r0, r5, #31
 8005d44:	d517      	bpl.n	8005d76 <_vfprintf_r+0xb1e>
 8005d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	9b08      	ldr	r3, [sp, #32]
 8005d4c:	6063      	str	r3, [r4, #4]
 8005d4e:	9a08      	ldr	r2, [sp, #32]
 8005d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d52:	4413      	add	r3, r2
 8005d54:	9321      	str	r3, [sp, #132]	; 0x84
 8005d56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d58:	3301      	adds	r3, #1
 8005d5a:	2b07      	cmp	r3, #7
 8005d5c:	9320      	str	r3, [sp, #128]	; 0x80
 8005d5e:	dc01      	bgt.n	8005d64 <_vfprintf_r+0xb0c>
 8005d60:	3408      	adds	r4, #8
 8005d62:	e008      	b.n	8005d76 <_vfprintf_r+0xb1e>
 8005d64:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d66:	4659      	mov	r1, fp
 8005d68:	4650      	mov	r0, sl
 8005d6a:	f002 fac8 	bl	80082fe <__sprint_r>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	f040 812e 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005d74:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d76:	9b04      	ldr	r3, [sp, #16]
 8005d78:	9a04      	ldr	r2, [sp, #16]
 8005d7a:	eb08 0603 	add.w	r6, r8, r3
 8005d7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d80:	1bf6      	subs	r6, r6, r7
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	429e      	cmp	r6, r3
 8005d86:	bfa8      	it	ge
 8005d88:	461e      	movge	r6, r3
 8005d8a:	2e00      	cmp	r6, #0
 8005d8c:	dd14      	ble.n	8005db8 <_vfprintf_r+0xb60>
 8005d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d90:	6027      	str	r7, [r4, #0]
 8005d92:	4433      	add	r3, r6
 8005d94:	9321      	str	r3, [sp, #132]	; 0x84
 8005d96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d98:	6066      	str	r6, [r4, #4]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	2b07      	cmp	r3, #7
 8005d9e:	9320      	str	r3, [sp, #128]	; 0x80
 8005da0:	dc01      	bgt.n	8005da6 <_vfprintf_r+0xb4e>
 8005da2:	3408      	adds	r4, #8
 8005da4:	e008      	b.n	8005db8 <_vfprintf_r+0xb60>
 8005da6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005da8:	4659      	mov	r1, fp
 8005daa:	4650      	mov	r0, sl
 8005dac:	f002 faa7 	bl	80082fe <__sprint_r>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	f040 810d 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005db6:	ac2c      	add	r4, sp, #176	; 0xb0
 8005db8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dba:	9a04      	ldr	r2, [sp, #16]
 8005dbc:	2e00      	cmp	r6, #0
 8005dbe:	eba2 0303 	sub.w	r3, r2, r3
 8005dc2:	bfac      	ite	ge
 8005dc4:	1b9e      	subge	r6, r3, r6
 8005dc6:	461e      	movlt	r6, r3
 8005dc8:	2e00      	cmp	r6, #0
 8005dca:	f340 80b1 	ble.w	8005f30 <_vfprintf_r+0xcd8>
 8005dce:	4f12      	ldr	r7, [pc, #72]	; (8005e18 <_vfprintf_r+0xbc0>)
 8005dd0:	f04f 0810 	mov.w	r8, #16
 8005dd4:	2e10      	cmp	r6, #16
 8005dd6:	dd16      	ble.n	8005e06 <_vfprintf_r+0xbae>
 8005dd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dda:	3310      	adds	r3, #16
 8005ddc:	9321      	str	r3, [sp, #132]	; 0x84
 8005dde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005de0:	3301      	adds	r3, #1
 8005de2:	2b07      	cmp	r3, #7
 8005de4:	e884 0180 	stmia.w	r4, {r7, r8}
 8005de8:	9320      	str	r3, [sp, #128]	; 0x80
 8005dea:	dc01      	bgt.n	8005df0 <_vfprintf_r+0xb98>
 8005dec:	3408      	adds	r4, #8
 8005dee:	e008      	b.n	8005e02 <_vfprintf_r+0xbaa>
 8005df0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005df2:	4659      	mov	r1, fp
 8005df4:	4650      	mov	r0, sl
 8005df6:	f002 fa82 	bl	80082fe <__sprint_r>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	f040 80e8 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005e00:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e02:	3e10      	subs	r6, #16
 8005e04:	e7e6      	b.n	8005dd4 <_vfprintf_r+0xb7c>
 8005e06:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <_vfprintf_r+0xbc0>)
 8005e08:	e884 0048 	stmia.w	r4, {r3, r6}
 8005e0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e0e:	441e      	add	r6, r3
 8005e10:	9621      	str	r6, [sp, #132]	; 0x84
 8005e12:	e642      	b.n	8005a9a <_vfprintf_r+0x842>
 8005e14:	08008df8 	.word	0x08008df8
 8005e18:	08008dfa 	.word	0x08008dfa
 8005e1c:	9b04      	ldr	r3, [sp, #16]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	dc01      	bgt.n	8005e26 <_vfprintf_r+0xbce>
 8005e22:	07e9      	lsls	r1, r5, #31
 8005e24:	d573      	bpl.n	8005f0e <_vfprintf_r+0xcb6>
 8005e26:	2301      	movs	r3, #1
 8005e28:	6063      	str	r3, [r4, #4]
 8005e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e2c:	f8c4 8000 	str.w	r8, [r4]
 8005e30:	3301      	adds	r3, #1
 8005e32:	9321      	str	r3, [sp, #132]	; 0x84
 8005e34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e36:	3301      	adds	r3, #1
 8005e38:	2b07      	cmp	r3, #7
 8005e3a:	9320      	str	r3, [sp, #128]	; 0x80
 8005e3c:	dc01      	bgt.n	8005e42 <_vfprintf_r+0xbea>
 8005e3e:	3408      	adds	r4, #8
 8005e40:	e008      	b.n	8005e54 <_vfprintf_r+0xbfc>
 8005e42:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e44:	4659      	mov	r1, fp
 8005e46:	4650      	mov	r0, sl
 8005e48:	f002 fa59 	bl	80082fe <__sprint_r>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	f040 80bf 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005e52:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	9b08      	ldr	r3, [sp, #32]
 8005e5a:	6063      	str	r3, [r4, #4]
 8005e5c:	9a08      	ldr	r2, [sp, #32]
 8005e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e60:	4413      	add	r3, r2
 8005e62:	9321      	str	r3, [sp, #132]	; 0x84
 8005e64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e66:	3301      	adds	r3, #1
 8005e68:	2b07      	cmp	r3, #7
 8005e6a:	9320      	str	r3, [sp, #128]	; 0x80
 8005e6c:	dc01      	bgt.n	8005e72 <_vfprintf_r+0xc1a>
 8005e6e:	3408      	adds	r4, #8
 8005e70:	e008      	b.n	8005e84 <_vfprintf_r+0xc2c>
 8005e72:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e74:	4659      	mov	r1, fp
 8005e76:	4650      	mov	r0, sl
 8005e78:	f002 fa41 	bl	80082fe <__sprint_r>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	f040 80a7 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005e82:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e84:	2300      	movs	r3, #0
 8005e86:	2200      	movs	r2, #0
 8005e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e8c:	f7fa fe18 	bl	8000ac0 <__aeabi_dcmpeq>
 8005e90:	9b04      	ldr	r3, [sp, #16]
 8005e92:	1e5e      	subs	r6, r3, #1
 8005e94:	b9b8      	cbnz	r0, 8005ec6 <_vfprintf_r+0xc6e>
 8005e96:	f108 0301 	add.w	r3, r8, #1
 8005e9a:	e884 0048 	stmia.w	r4, {r3, r6}
 8005e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ea0:	9a04      	ldr	r2, [sp, #16]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	4413      	add	r3, r2
 8005ea6:	9321      	str	r3, [sp, #132]	; 0x84
 8005ea8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005eaa:	3301      	adds	r3, #1
 8005eac:	2b07      	cmp	r3, #7
 8005eae:	9320      	str	r3, [sp, #128]	; 0x80
 8005eb0:	dd34      	ble.n	8005f1c <_vfprintf_r+0xcc4>
 8005eb2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	f002 fa21 	bl	80082fe <__sprint_r>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f040 8087 	bne.w	8005fd0 <_vfprintf_r+0xd78>
 8005ec2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ec4:	e02b      	b.n	8005f1e <_vfprintf_r+0xcc6>
 8005ec6:	2e00      	cmp	r6, #0
 8005ec8:	dd29      	ble.n	8005f1e <_vfprintf_r+0xcc6>
 8005eca:	4fa6      	ldr	r7, [pc, #664]	; (8006164 <_vfprintf_r+0xf0c>)
 8005ecc:	f04f 0810 	mov.w	r8, #16
 8005ed0:	2e10      	cmp	r6, #16
 8005ed2:	dd15      	ble.n	8005f00 <_vfprintf_r+0xca8>
 8005ed4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ed6:	3310      	adds	r3, #16
 8005ed8:	9321      	str	r3, [sp, #132]	; 0x84
 8005eda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005edc:	3301      	adds	r3, #1
 8005ede:	2b07      	cmp	r3, #7
 8005ee0:	e884 0180 	stmia.w	r4, {r7, r8}
 8005ee4:	9320      	str	r3, [sp, #128]	; 0x80
 8005ee6:	dc01      	bgt.n	8005eec <_vfprintf_r+0xc94>
 8005ee8:	3408      	adds	r4, #8
 8005eea:	e007      	b.n	8005efc <_vfprintf_r+0xca4>
 8005eec:	aa1f      	add	r2, sp, #124	; 0x7c
 8005eee:	4659      	mov	r1, fp
 8005ef0:	4650      	mov	r0, sl
 8005ef2:	f002 fa04 	bl	80082fe <__sprint_r>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d16a      	bne.n	8005fd0 <_vfprintf_r+0xd78>
 8005efa:	ac2c      	add	r4, sp, #176	; 0xb0
 8005efc:	3e10      	subs	r6, #16
 8005efe:	e7e7      	b.n	8005ed0 <_vfprintf_r+0xc78>
 8005f00:	4b98      	ldr	r3, [pc, #608]	; (8006164 <_vfprintf_r+0xf0c>)
 8005f02:	e884 0048 	stmia.w	r4, {r3, r6}
 8005f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f08:	441e      	add	r6, r3
 8005f0a:	9621      	str	r6, [sp, #132]	; 0x84
 8005f0c:	e7cc      	b.n	8005ea8 <_vfprintf_r+0xc50>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	6063      	str	r3, [r4, #4]
 8005f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f14:	f8c4 8000 	str.w	r8, [r4]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	e7c4      	b.n	8005ea6 <_vfprintf_r+0xc4e>
 8005f1c:	3408      	adds	r4, #8
 8005f1e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f24:	6063      	str	r3, [r4, #4]
 8005f26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f2a:	4413      	add	r3, r2
 8005f2c:	e5b4      	b.n	8005a98 <_vfprintf_r+0x840>
 8005f2e:	3408      	adds	r4, #8
 8005f30:	076a      	lsls	r2, r5, #29
 8005f32:	d40b      	bmi.n	8005f4c <_vfprintf_r+0xcf4>
 8005f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f3a:	428a      	cmp	r2, r1
 8005f3c:	bfac      	ite	ge
 8005f3e:	189b      	addge	r3, r3, r2
 8005f40:	185b      	addlt	r3, r3, r1
 8005f42:	930a      	str	r3, [sp, #40]	; 0x28
 8005f44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d035      	beq.n	8005fb6 <_vfprintf_r+0xd5e>
 8005f4a:	e02e      	b.n	8005faa <_vfprintf_r+0xd52>
 8005f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f50:	1a9d      	subs	r5, r3, r2
 8005f52:	2d00      	cmp	r5, #0
 8005f54:	ddee      	ble.n	8005f34 <_vfprintf_r+0xcdc>
 8005f56:	2610      	movs	r6, #16
 8005f58:	4b83      	ldr	r3, [pc, #524]	; (8006168 <_vfprintf_r+0xf10>)
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	2d10      	cmp	r5, #16
 8005f5e:	dd13      	ble.n	8005f88 <_vfprintf_r+0xd30>
 8005f60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f62:	6066      	str	r6, [r4, #4]
 8005f64:	3310      	adds	r3, #16
 8005f66:	9321      	str	r3, [sp, #132]	; 0x84
 8005f68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	2b07      	cmp	r3, #7
 8005f6e:	9320      	str	r3, [sp, #128]	; 0x80
 8005f70:	dc01      	bgt.n	8005f76 <_vfprintf_r+0xd1e>
 8005f72:	3408      	adds	r4, #8
 8005f74:	e006      	b.n	8005f84 <_vfprintf_r+0xd2c>
 8005f76:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f78:	4659      	mov	r1, fp
 8005f7a:	4650      	mov	r0, sl
 8005f7c:	f002 f9bf 	bl	80082fe <__sprint_r>
 8005f80:	bb30      	cbnz	r0, 8005fd0 <_vfprintf_r+0xd78>
 8005f82:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f84:	3d10      	subs	r5, #16
 8005f86:	e7e7      	b.n	8005f58 <_vfprintf_r+0xd00>
 8005f88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f8a:	6065      	str	r5, [r4, #4]
 8005f8c:	441d      	add	r5, r3
 8005f8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f90:	9521      	str	r5, [sp, #132]	; 0x84
 8005f92:	3301      	adds	r3, #1
 8005f94:	2b07      	cmp	r3, #7
 8005f96:	9320      	str	r3, [sp, #128]	; 0x80
 8005f98:	ddcc      	ble.n	8005f34 <_vfprintf_r+0xcdc>
 8005f9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	f002 f9ad 	bl	80082fe <__sprint_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d0c5      	beq.n	8005f34 <_vfprintf_r+0xcdc>
 8005fa8:	e012      	b.n	8005fd0 <_vfprintf_r+0xd78>
 8005faa:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fac:	4659      	mov	r1, fp
 8005fae:	4650      	mov	r0, sl
 8005fb0:	f002 f9a5 	bl	80082fe <__sprint_r>
 8005fb4:	b960      	cbnz	r0, 8005fd0 <_vfprintf_r+0xd78>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9320      	str	r3, [sp, #128]	; 0x80
 8005fba:	9f03      	ldr	r7, [sp, #12]
 8005fbc:	ac2c      	add	r4, sp, #176	; 0xb0
 8005fbe:	f7ff b9b4 	b.w	800532a <_vfprintf_r+0xd2>
 8005fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fc4:	b123      	cbz	r3, 8005fd0 <_vfprintf_r+0xd78>
 8005fc6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fc8:	4659      	mov	r1, fp
 8005fca:	4650      	mov	r0, sl
 8005fcc:	f002 f997 	bl	80082fe <__sprint_r>
 8005fd0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005fd4:	065b      	lsls	r3, r3, #25
 8005fd6:	f53f a98b 	bmi.w	80052f0 <_vfprintf_r+0x98>
 8005fda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005fdc:	e12f      	b.n	800623e <_vfprintf_r+0xfe6>
 8005fde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f7fa fd9d 	bl	8000b24 <__aeabi_dcmpun>
 8005fea:	b160      	cbz	r0, 8006006 <_vfprintf_r+0xdae>
 8005fec:	4b5f      	ldr	r3, [pc, #380]	; (800616c <_vfprintf_r+0xf14>)
 8005fee:	4a60      	ldr	r2, [pc, #384]	; (8006170 <_vfprintf_r+0xf18>)
 8005ff0:	9902      	ldr	r1, [sp, #8]
 8005ff2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005ff6:	2947      	cmp	r1, #71	; 0x47
 8005ff8:	bfcc      	ite	gt
 8005ffa:	4690      	movgt	r8, r2
 8005ffc:	4698      	movle	r8, r3
 8005ffe:	f04f 0903 	mov.w	r9, #3
 8006002:	2600      	movs	r6, #0
 8006004:	e451      	b.n	80058aa <_vfprintf_r+0x652>
 8006006:	f1b9 3fff 	cmp.w	r9, #4294967295
 800600a:	d00a      	beq.n	8006022 <_vfprintf_r+0xdca>
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	f023 0320 	bic.w	r3, r3, #32
 8006012:	2b47      	cmp	r3, #71	; 0x47
 8006014:	d107      	bne.n	8006026 <_vfprintf_r+0xdce>
 8006016:	f1b9 0f00 	cmp.w	r9, #0
 800601a:	bf08      	it	eq
 800601c:	f04f 0901 	moveq.w	r9, #1
 8006020:	e001      	b.n	8006026 <_vfprintf_r+0xdce>
 8006022:	f04f 0906 	mov.w	r9, #6
 8006026:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800602a:	930c      	str	r3, [sp, #48]	; 0x30
 800602c:	9b07      	ldr	r3, [sp, #28]
 800602e:	2b00      	cmp	r3, #0
 8006030:	da07      	bge.n	8006042 <_vfprintf_r+0xdea>
 8006032:	9b06      	ldr	r3, [sp, #24]
 8006034:	930e      	str	r3, [sp, #56]	; 0x38
 8006036:	9b07      	ldr	r3, [sp, #28]
 8006038:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800603c:	930f      	str	r3, [sp, #60]	; 0x3c
 800603e:	232d      	movs	r3, #45	; 0x2d
 8006040:	e004      	b.n	800604c <_vfprintf_r+0xdf4>
 8006042:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006046:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800604a:	2300      	movs	r3, #0
 800604c:	930b      	str	r3, [sp, #44]	; 0x2c
 800604e:	9b02      	ldr	r3, [sp, #8]
 8006050:	f023 0720 	bic.w	r7, r3, #32
 8006054:	2f46      	cmp	r7, #70	; 0x46
 8006056:	d004      	beq.n	8006062 <_vfprintf_r+0xe0a>
 8006058:	2f45      	cmp	r7, #69	; 0x45
 800605a:	d105      	bne.n	8006068 <_vfprintf_r+0xe10>
 800605c:	f109 0601 	add.w	r6, r9, #1
 8006060:	e003      	b.n	800606a <_vfprintf_r+0xe12>
 8006062:	464e      	mov	r6, r9
 8006064:	2103      	movs	r1, #3
 8006066:	e001      	b.n	800606c <_vfprintf_r+0xe14>
 8006068:	464e      	mov	r6, r9
 800606a:	2102      	movs	r1, #2
 800606c:	ab1d      	add	r3, sp, #116	; 0x74
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	ab1a      	add	r3, sp, #104	; 0x68
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	4632      	mov	r2, r6
 8006076:	ab19      	add	r3, sp, #100	; 0x64
 8006078:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800607c:	4650      	mov	r0, sl
 800607e:	f000 fa1b 	bl	80064b8 <_dtoa_r>
 8006082:	2f47      	cmp	r7, #71	; 0x47
 8006084:	4680      	mov	r8, r0
 8006086:	d102      	bne.n	800608e <_vfprintf_r+0xe36>
 8006088:	07eb      	lsls	r3, r5, #31
 800608a:	f140 80ce 	bpl.w	800622a <_vfprintf_r+0xfd2>
 800608e:	eb08 0306 	add.w	r3, r8, r6
 8006092:	2f46      	cmp	r7, #70	; 0x46
 8006094:	9304      	str	r3, [sp, #16]
 8006096:	d111      	bne.n	80060bc <_vfprintf_r+0xe64>
 8006098:	f898 3000 	ldrb.w	r3, [r8]
 800609c:	2b30      	cmp	r3, #48	; 0x30
 800609e:	d109      	bne.n	80060b4 <_vfprintf_r+0xe5c>
 80060a0:	2200      	movs	r2, #0
 80060a2:	2300      	movs	r3, #0
 80060a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80060a8:	f7fa fd0a 	bl	8000ac0 <__aeabi_dcmpeq>
 80060ac:	b910      	cbnz	r0, 80060b4 <_vfprintf_r+0xe5c>
 80060ae:	f1c6 0601 	rsb	r6, r6, #1
 80060b2:	9619      	str	r6, [sp, #100]	; 0x64
 80060b4:	9a04      	ldr	r2, [sp, #16]
 80060b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060b8:	441a      	add	r2, r3
 80060ba:	9204      	str	r2, [sp, #16]
 80060bc:	2200      	movs	r2, #0
 80060be:	2300      	movs	r3, #0
 80060c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80060c4:	f7fa fcfc 	bl	8000ac0 <__aeabi_dcmpeq>
 80060c8:	b908      	cbnz	r0, 80060ce <_vfprintf_r+0xe76>
 80060ca:	2230      	movs	r2, #48	; 0x30
 80060cc:	e002      	b.n	80060d4 <_vfprintf_r+0xe7c>
 80060ce:	9b04      	ldr	r3, [sp, #16]
 80060d0:	931d      	str	r3, [sp, #116]	; 0x74
 80060d2:	e007      	b.n	80060e4 <_vfprintf_r+0xe8c>
 80060d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060d6:	9904      	ldr	r1, [sp, #16]
 80060d8:	4299      	cmp	r1, r3
 80060da:	d903      	bls.n	80060e4 <_vfprintf_r+0xe8c>
 80060dc:	1c59      	adds	r1, r3, #1
 80060de:	911d      	str	r1, [sp, #116]	; 0x74
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	e7f7      	b.n	80060d4 <_vfprintf_r+0xe7c>
 80060e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060e6:	2f47      	cmp	r7, #71	; 0x47
 80060e8:	ebc8 0303 	rsb	r3, r8, r3
 80060ec:	9304      	str	r3, [sp, #16]
 80060ee:	d108      	bne.n	8006102 <_vfprintf_r+0xeaa>
 80060f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060f2:	1cdf      	adds	r7, r3, #3
 80060f4:	db01      	blt.n	80060fa <_vfprintf_r+0xea2>
 80060f6:	4599      	cmp	r9, r3
 80060f8:	da69      	bge.n	80061ce <_vfprintf_r+0xf76>
 80060fa:	9b02      	ldr	r3, [sp, #8]
 80060fc:	3b02      	subs	r3, #2
 80060fe:	9302      	str	r3, [sp, #8]
 8006100:	e002      	b.n	8006108 <_vfprintf_r+0xeb0>
 8006102:	9b02      	ldr	r3, [sp, #8]
 8006104:	2b65      	cmp	r3, #101	; 0x65
 8006106:	dc4b      	bgt.n	80061a0 <_vfprintf_r+0xf48>
 8006108:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800610a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800610e:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8006112:	3b01      	subs	r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	9319      	str	r3, [sp, #100]	; 0x64
 8006118:	bfba      	itte	lt
 800611a:	425b      	neglt	r3, r3
 800611c:	222d      	movlt	r2, #45	; 0x2d
 800611e:	222b      	movge	r2, #43	; 0x2b
 8006120:	2b09      	cmp	r3, #9
 8006122:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8006126:	dd25      	ble.n	8006174 <_vfprintf_r+0xf1c>
 8006128:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800612c:	200a      	movs	r0, #10
 800612e:	fb93 f1f0 	sdiv	r1, r3, r0
 8006132:	fb00 3311 	mls	r3, r0, r1, r3
 8006136:	3330      	adds	r3, #48	; 0x30
 8006138:	2909      	cmp	r1, #9
 800613a:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800613e:	460b      	mov	r3, r1
 8006140:	dcf5      	bgt.n	800612e <_vfprintf_r+0xed6>
 8006142:	3330      	adds	r3, #48	; 0x30
 8006144:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006148:	1e51      	subs	r1, r2, #1
 800614a:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800614e:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8006152:	4281      	cmp	r1, r0
 8006154:	461a      	mov	r2, r3
 8006156:	d214      	bcs.n	8006182 <_vfprintf_r+0xf2a>
 8006158:	f811 2b01 	ldrb.w	r2, [r1], #1
 800615c:	f803 2b01 	strb.w	r2, [r3], #1
 8006160:	e7f7      	b.n	8006152 <_vfprintf_r+0xefa>
 8006162:	bf00      	nop
 8006164:	08008dfa 	.word	0x08008dfa
 8006168:	08008db6 	.word	0x08008db6
 800616c:	08008dce 	.word	0x08008dce
 8006170:	08008dd2 	.word	0x08008dd2
 8006174:	2230      	movs	r2, #48	; 0x30
 8006176:	4413      	add	r3, r2
 8006178:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800617c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8006180:	aa1c      	add	r2, sp, #112	; 0x70
 8006182:	ab1b      	add	r3, sp, #108	; 0x6c
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	9a04      	ldr	r2, [sp, #16]
 8006188:	9310      	str	r3, [sp, #64]	; 0x40
 800618a:	2a01      	cmp	r2, #1
 800618c:	eb03 0902 	add.w	r9, r3, r2
 8006190:	dc02      	bgt.n	8006198 <_vfprintf_r+0xf40>
 8006192:	f015 0701 	ands.w	r7, r5, #1
 8006196:	d032      	beq.n	80061fe <_vfprintf_r+0xfa6>
 8006198:	9b08      	ldr	r3, [sp, #32]
 800619a:	2700      	movs	r7, #0
 800619c:	4499      	add	r9, r3
 800619e:	e02e      	b.n	80061fe <_vfprintf_r+0xfa6>
 80061a0:	9b02      	ldr	r3, [sp, #8]
 80061a2:	2b66      	cmp	r3, #102	; 0x66
 80061a4:	d113      	bne.n	80061ce <_vfprintf_r+0xf76>
 80061a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	dd07      	ble.n	80061bc <_vfprintf_r+0xf64>
 80061ac:	f1b9 0f00 	cmp.w	r9, #0
 80061b0:	d101      	bne.n	80061b6 <_vfprintf_r+0xf5e>
 80061b2:	07ee      	lsls	r6, r5, #31
 80061b4:	d521      	bpl.n	80061fa <_vfprintf_r+0xfa2>
 80061b6:	9a08      	ldr	r2, [sp, #32]
 80061b8:	4413      	add	r3, r2
 80061ba:	e006      	b.n	80061ca <_vfprintf_r+0xf72>
 80061bc:	f1b9 0f00 	cmp.w	r9, #0
 80061c0:	d101      	bne.n	80061c6 <_vfprintf_r+0xf6e>
 80061c2:	07ed      	lsls	r5, r5, #31
 80061c4:	d514      	bpl.n	80061f0 <_vfprintf_r+0xf98>
 80061c6:	9b08      	ldr	r3, [sp, #32]
 80061c8:	3301      	adds	r3, #1
 80061ca:	444b      	add	r3, r9
 80061cc:	e015      	b.n	80061fa <_vfprintf_r+0xfa2>
 80061ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061d0:	9a04      	ldr	r2, [sp, #16]
 80061d2:	4293      	cmp	r3, r2
 80061d4:	db03      	blt.n	80061de <_vfprintf_r+0xf86>
 80061d6:	07e8      	lsls	r0, r5, #31
 80061d8:	d50d      	bpl.n	80061f6 <_vfprintf_r+0xf9e>
 80061da:	9a08      	ldr	r2, [sp, #32]
 80061dc:	e006      	b.n	80061ec <_vfprintf_r+0xf94>
 80061de:	9a04      	ldr	r2, [sp, #16]
 80061e0:	9908      	ldr	r1, [sp, #32]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	440a      	add	r2, r1
 80061e6:	dc05      	bgt.n	80061f4 <_vfprintf_r+0xf9c>
 80061e8:	f1c3 0301 	rsb	r3, r3, #1
 80061ec:	4413      	add	r3, r2
 80061ee:	e002      	b.n	80061f6 <_vfprintf_r+0xf9e>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e002      	b.n	80061fa <_vfprintf_r+0xfa2>
 80061f4:	4613      	mov	r3, r2
 80061f6:	2267      	movs	r2, #103	; 0x67
 80061f8:	9202      	str	r2, [sp, #8]
 80061fa:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80061fc:	4699      	mov	r9, r3
 80061fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006200:	b113      	cbz	r3, 8006208 <_vfprintf_r+0xfb0>
 8006202:	232d      	movs	r3, #45	; 0x2d
 8006204:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006208:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800620a:	2600      	movs	r6, #0
 800620c:	f7ff bb4e 	b.w	80058ac <_vfprintf_r+0x654>
 8006210:	2200      	movs	r2, #0
 8006212:	2300      	movs	r3, #0
 8006214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006218:	f7fa fc5c 	bl	8000ad4 <__aeabi_dcmplt>
 800621c:	b110      	cbz	r0, 8006224 <_vfprintf_r+0xfcc>
 800621e:	232d      	movs	r3, #45	; 0x2d
 8006220:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006224:	4b07      	ldr	r3, [pc, #28]	; (8006244 <_vfprintf_r+0xfec>)
 8006226:	4a08      	ldr	r2, [pc, #32]	; (8006248 <_vfprintf_r+0xff0>)
 8006228:	e6e2      	b.n	8005ff0 <_vfprintf_r+0xd98>
 800622a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800622c:	1a1b      	subs	r3, r3, r0
 800622e:	9304      	str	r3, [sp, #16]
 8006230:	e75e      	b.n	80060f0 <_vfprintf_r+0xe98>
 8006232:	ea56 0207 	orrs.w	r2, r6, r7
 8006236:	f47f aaac 	bne.w	8005792 <_vfprintf_r+0x53a>
 800623a:	f7ff bab1 	b.w	80057a0 <_vfprintf_r+0x548>
 800623e:	b03d      	add	sp, #244	; 0xf4
 8006240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006244:	08008dc6 	.word	0x08008dc6
 8006248:	08008dca 	.word	0x08008dca

0800624c <__sbprintf>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	460c      	mov	r4, r1
 8006250:	8989      	ldrh	r1, [r1, #12]
 8006252:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8006256:	f021 0102 	bic.w	r1, r1, #2
 800625a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800625e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006260:	9119      	str	r1, [sp, #100]	; 0x64
 8006262:	89e1      	ldrh	r1, [r4, #14]
 8006264:	f8ad 100e 	strh.w	r1, [sp, #14]
 8006268:	6a21      	ldr	r1, [r4, #32]
 800626a:	9108      	str	r1, [sp, #32]
 800626c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800626e:	910a      	str	r1, [sp, #40]	; 0x28
 8006270:	a91a      	add	r1, sp, #104	; 0x68
 8006272:	9100      	str	r1, [sp, #0]
 8006274:	9104      	str	r1, [sp, #16]
 8006276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800627a:	9102      	str	r1, [sp, #8]
 800627c:	9105      	str	r1, [sp, #20]
 800627e:	2100      	movs	r1, #0
 8006280:	9106      	str	r1, [sp, #24]
 8006282:	4669      	mov	r1, sp
 8006284:	4606      	mov	r6, r0
 8006286:	f7fe ffe7 	bl	8005258 <_vfprintf_r>
 800628a:	1e05      	subs	r5, r0, #0
 800628c:	db07      	blt.n	800629e <__sbprintf+0x52>
 800628e:	4669      	mov	r1, sp
 8006290:	4630      	mov	r0, r6
 8006292:	f000 ff41 	bl	8007118 <_fflush_r>
 8006296:	2800      	cmp	r0, #0
 8006298:	bf18      	it	ne
 800629a:	f04f 35ff 	movne.w	r5, #4294967295
 800629e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80062a2:	065b      	lsls	r3, r3, #25
 80062a4:	bf48      	it	mi
 80062a6:	89a3      	ldrhmi	r3, [r4, #12]
 80062a8:	4628      	mov	r0, r5
 80062aa:	bf44      	itt	mi
 80062ac:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80062b0:	81a3      	strhmi	r3, [r4, #12]
 80062b2:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 80062b6:	bd70      	pop	{r4, r5, r6, pc}

080062b8 <__swsetup_r>:
 80062b8:	4b32      	ldr	r3, [pc, #200]	; (8006384 <__swsetup_r+0xcc>)
 80062ba:	b570      	push	{r4, r5, r6, lr}
 80062bc:	681d      	ldr	r5, [r3, #0]
 80062be:	4606      	mov	r6, r0
 80062c0:	460c      	mov	r4, r1
 80062c2:	b125      	cbz	r5, 80062ce <__swsetup_r+0x16>
 80062c4:	69ab      	ldr	r3, [r5, #24]
 80062c6:	b913      	cbnz	r3, 80062ce <__swsetup_r+0x16>
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 ff8f 	bl	80071ec <__sinit>
 80062ce:	4b2e      	ldr	r3, [pc, #184]	; (8006388 <__swsetup_r+0xd0>)
 80062d0:	429c      	cmp	r4, r3
 80062d2:	d101      	bne.n	80062d8 <__swsetup_r+0x20>
 80062d4:	686c      	ldr	r4, [r5, #4]
 80062d6:	e008      	b.n	80062ea <__swsetup_r+0x32>
 80062d8:	4b2c      	ldr	r3, [pc, #176]	; (800638c <__swsetup_r+0xd4>)
 80062da:	429c      	cmp	r4, r3
 80062dc:	d101      	bne.n	80062e2 <__swsetup_r+0x2a>
 80062de:	68ac      	ldr	r4, [r5, #8]
 80062e0:	e003      	b.n	80062ea <__swsetup_r+0x32>
 80062e2:	4b2b      	ldr	r3, [pc, #172]	; (8006390 <__swsetup_r+0xd8>)
 80062e4:	429c      	cmp	r4, r3
 80062e6:	bf08      	it	eq
 80062e8:	68ec      	ldreq	r4, [r5, #12]
 80062ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	0715      	lsls	r5, r2, #28
 80062f2:	d41d      	bmi.n	8006330 <__swsetup_r+0x78>
 80062f4:	06d0      	lsls	r0, r2, #27
 80062f6:	d402      	bmi.n	80062fe <__swsetup_r+0x46>
 80062f8:	2209      	movs	r2, #9
 80062fa:	6032      	str	r2, [r6, #0]
 80062fc:	e03a      	b.n	8006374 <__swsetup_r+0xbc>
 80062fe:	0751      	lsls	r1, r2, #29
 8006300:	d512      	bpl.n	8006328 <__swsetup_r+0x70>
 8006302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006304:	b141      	cbz	r1, 8006318 <__swsetup_r+0x60>
 8006306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800630a:	4299      	cmp	r1, r3
 800630c:	d002      	beq.n	8006314 <__swsetup_r+0x5c>
 800630e:	4630      	mov	r0, r6
 8006310:	f001 f834 	bl	800737c <_free_r>
 8006314:	2300      	movs	r3, #0
 8006316:	6363      	str	r3, [r4, #52]	; 0x34
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	2300      	movs	r3, #0
 8006322:	6063      	str	r3, [r4, #4]
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	f043 0308 	orr.w	r3, r3, #8
 800632e:	81a3      	strh	r3, [r4, #12]
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	b94b      	cbnz	r3, 8006348 <__swsetup_r+0x90>
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800633a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800633e:	d003      	beq.n	8006348 <__swsetup_r+0x90>
 8006340:	4621      	mov	r1, r4
 8006342:	4630      	mov	r0, r6
 8006344:	f001 fa7a 	bl	800783c <__smakebuf_r>
 8006348:	89a2      	ldrh	r2, [r4, #12]
 800634a:	f012 0301 	ands.w	r3, r2, #1
 800634e:	d005      	beq.n	800635c <__swsetup_r+0xa4>
 8006350:	2300      	movs	r3, #0
 8006352:	60a3      	str	r3, [r4, #8]
 8006354:	6963      	ldr	r3, [r4, #20]
 8006356:	425b      	negs	r3, r3
 8006358:	61a3      	str	r3, [r4, #24]
 800635a:	e003      	b.n	8006364 <__swsetup_r+0xac>
 800635c:	0792      	lsls	r2, r2, #30
 800635e:	bf58      	it	pl
 8006360:	6963      	ldrpl	r3, [r4, #20]
 8006362:	60a3      	str	r3, [r4, #8]
 8006364:	6923      	ldr	r3, [r4, #16]
 8006366:	b95b      	cbnz	r3, 8006380 <__swsetup_r+0xc8>
 8006368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800636c:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8006370:	b280      	uxth	r0, r0
 8006372:	b130      	cbz	r0, 8006382 <__swsetup_r+0xca>
 8006374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006378:	81a3      	strh	r3, [r4, #12]
 800637a:	f04f 30ff 	mov.w	r0, #4294967295
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	2000      	movs	r0, #0
 8006382:	bd70      	pop	{r4, r5, r6, pc}
 8006384:	20000524 	.word	0x20000524
 8006388:	08008e18 	.word	0x08008e18
 800638c:	08008e38 	.word	0x08008e38
 8006390:	08008e58 	.word	0x08008e58

08006394 <quorem>:
 8006394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	6903      	ldr	r3, [r0, #16]
 800639a:	690c      	ldr	r4, [r1, #16]
 800639c:	429c      	cmp	r4, r3
 800639e:	4680      	mov	r8, r0
 80063a0:	f300 8083 	bgt.w	80064aa <quorem+0x116>
 80063a4:	3c01      	subs	r4, #1
 80063a6:	f101 0714 	add.w	r7, r1, #20
 80063aa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80063ae:	f100 0614 	add.w	r6, r0, #20
 80063b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80063b6:	eb06 030e 	add.w	r3, r6, lr
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	3501      	adds	r5, #1
 80063be:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80063c2:	fbb3 f5f5 	udiv	r5, r3, r5
 80063c6:	eb07 090e 	add.w	r9, r7, lr
 80063ca:	2d00      	cmp	r5, #0
 80063cc:	d039      	beq.n	8006442 <quorem+0xae>
 80063ce:	f04f 0a00 	mov.w	sl, #0
 80063d2:	4638      	mov	r0, r7
 80063d4:	46b4      	mov	ip, r6
 80063d6:	46d3      	mov	fp, sl
 80063d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80063dc:	b293      	uxth	r3, r2
 80063de:	fb05 a303 	mla	r3, r5, r3, sl
 80063e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	ebc3 030b 	rsb	r3, r3, fp
 80063ec:	0c12      	lsrs	r2, r2, #16
 80063ee:	f8bc b000 	ldrh.w	fp, [ip]
 80063f2:	fb05 a202 	mla	r2, r5, r2, sl
 80063f6:	fa13 f38b 	uxtah	r3, r3, fp
 80063fa:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80063fe:	fa1f fb82 	uxth.w	fp, r2
 8006402:	f8dc 2000 	ldr.w	r2, [ip]
 8006406:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800640a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800640e:	b29b      	uxth	r3, r3
 8006410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006414:	4581      	cmp	r9, r0
 8006416:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800641a:	f84c 3b04 	str.w	r3, [ip], #4
 800641e:	d2db      	bcs.n	80063d8 <quorem+0x44>
 8006420:	f856 300e 	ldr.w	r3, [r6, lr]
 8006424:	b96b      	cbnz	r3, 8006442 <quorem+0xae>
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	3b04      	subs	r3, #4
 800642a:	429e      	cmp	r6, r3
 800642c:	461a      	mov	r2, r3
 800642e:	d302      	bcc.n	8006436 <quorem+0xa2>
 8006430:	f8c8 4010 	str.w	r4, [r8, #16]
 8006434:	e005      	b.n	8006442 <quorem+0xae>
 8006436:	6812      	ldr	r2, [r2, #0]
 8006438:	3b04      	subs	r3, #4
 800643a:	2a00      	cmp	r2, #0
 800643c:	d1f8      	bne.n	8006430 <quorem+0x9c>
 800643e:	3c01      	subs	r4, #1
 8006440:	e7f3      	b.n	800642a <quorem+0x96>
 8006442:	4640      	mov	r0, r8
 8006444:	f001 fc71 	bl	8007d2a <__mcmp>
 8006448:	2800      	cmp	r0, #0
 800644a:	db2c      	blt.n	80064a6 <quorem+0x112>
 800644c:	3501      	adds	r5, #1
 800644e:	4630      	mov	r0, r6
 8006450:	f04f 0e00 	mov.w	lr, #0
 8006454:	f857 1b04 	ldr.w	r1, [r7], #4
 8006458:	f8d0 c000 	ldr.w	ip, [r0]
 800645c:	b28a      	uxth	r2, r1
 800645e:	ebc2 030e 	rsb	r3, r2, lr
 8006462:	0c09      	lsrs	r1, r1, #16
 8006464:	fa13 f38c 	uxtah	r3, r3, ip
 8006468:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800646c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006470:	b29b      	uxth	r3, r3
 8006472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006476:	45b9      	cmp	r9, r7
 8006478:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800647c:	f840 3b04 	str.w	r3, [r0], #4
 8006480:	d2e8      	bcs.n	8006454 <quorem+0xc0>
 8006482:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006486:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800648a:	b962      	cbnz	r2, 80064a6 <quorem+0x112>
 800648c:	3b04      	subs	r3, #4
 800648e:	429e      	cmp	r6, r3
 8006490:	461a      	mov	r2, r3
 8006492:	d302      	bcc.n	800649a <quorem+0x106>
 8006494:	f8c8 4010 	str.w	r4, [r8, #16]
 8006498:	e005      	b.n	80064a6 <quorem+0x112>
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	3b04      	subs	r3, #4
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d1f8      	bne.n	8006494 <quorem+0x100>
 80064a2:	3c01      	subs	r4, #1
 80064a4:	e7f3      	b.n	800648e <quorem+0xfa>
 80064a6:	4628      	mov	r0, r5
 80064a8:	e000      	b.n	80064ac <quorem+0x118>
 80064aa:	2000      	movs	r0, #0
 80064ac:	b003      	add	sp, #12
 80064ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b2:	0000      	movs	r0, r0
 80064b4:	0000      	movs	r0, r0
	...

080064b8 <_dtoa_r>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	ec59 8b10 	vmov	r8, r9, d0
 80064c0:	b097      	sub	sp, #92	; 0x5c
 80064c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064c4:	9106      	str	r1, [sp, #24]
 80064c6:	4682      	mov	sl, r0
 80064c8:	9209      	str	r2, [sp, #36]	; 0x24
 80064ca:	9310      	str	r3, [sp, #64]	; 0x40
 80064cc:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80064ce:	e9cd 8900 	strd	r8, r9, [sp]
 80064d2:	b945      	cbnz	r5, 80064e6 <_dtoa_r+0x2e>
 80064d4:	2010      	movs	r0, #16
 80064d6:	f7fe fbfd 	bl	8004cd4 <malloc>
 80064da:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80064de:	6045      	str	r5, [r0, #4]
 80064e0:	6085      	str	r5, [r0, #8]
 80064e2:	6005      	str	r5, [r0, #0]
 80064e4:	60c5      	str	r5, [r0, #12]
 80064e6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80064ea:	6819      	ldr	r1, [r3, #0]
 80064ec:	b159      	cbz	r1, 8006506 <_dtoa_r+0x4e>
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	604a      	str	r2, [r1, #4]
 80064f2:	2301      	movs	r3, #1
 80064f4:	4093      	lsls	r3, r2
 80064f6:	608b      	str	r3, [r1, #8]
 80064f8:	4650      	mov	r0, sl
 80064fa:	f001 fa3e 	bl	800797a <_Bfree>
 80064fe:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	4a9f      	ldr	r2, [pc, #636]	; (8006788 <_dtoa_r+0x2d0>)
 800650a:	2b00      	cmp	r3, #0
 800650c:	bfbf      	itttt	lt
 800650e:	2301      	movlt	r3, #1
 8006510:	6023      	strlt	r3, [r4, #0]
 8006512:	9b01      	ldrlt	r3, [sp, #4]
 8006514:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006518:	bfb8      	it	lt
 800651a:	9301      	strlt	r3, [sp, #4]
 800651c:	9f01      	ldr	r7, [sp, #4]
 800651e:	bfa4      	itt	ge
 8006520:	2300      	movge	r3, #0
 8006522:	6023      	strge	r3, [r4, #0]
 8006524:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8006528:	0d1b      	lsrs	r3, r3, #20
 800652a:	051b      	lsls	r3, r3, #20
 800652c:	4293      	cmp	r3, r2
 800652e:	d11d      	bne.n	800656c <_dtoa_r+0xb4>
 8006530:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006532:	f242 730f 	movw	r3, #9999	; 0x270f
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	9b00      	ldr	r3, [sp, #0]
 800653a:	b943      	cbnz	r3, 800654e <_dtoa_r+0x96>
 800653c:	4a93      	ldr	r2, [pc, #588]	; (800678c <_dtoa_r+0x2d4>)
 800653e:	4b94      	ldr	r3, [pc, #592]	; (8006790 <_dtoa_r+0x2d8>)
 8006540:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8006544:	2800      	cmp	r0, #0
 8006546:	bf14      	ite	ne
 8006548:	4618      	movne	r0, r3
 800654a:	4610      	moveq	r0, r2
 800654c:	e000      	b.n	8006550 <_dtoa_r+0x98>
 800654e:	4890      	ldr	r0, [pc, #576]	; (8006790 <_dtoa_r+0x2d8>)
 8006550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 854a 	beq.w	8006fec <_dtoa_r+0xb34>
 8006558:	78c3      	ldrb	r3, [r0, #3]
 800655a:	b113      	cbz	r3, 8006562 <_dtoa_r+0xaa>
 800655c:	f100 0308 	add.w	r3, r0, #8
 8006560:	e000      	b.n	8006564 <_dtoa_r+0xac>
 8006562:	1cc3      	adds	r3, r0, #3
 8006564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	f000 bd40 	b.w	8006fec <_dtoa_r+0xb34>
 800656c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006570:	2200      	movs	r2, #0
 8006572:	2300      	movs	r3, #0
 8006574:	4620      	mov	r0, r4
 8006576:	4629      	mov	r1, r5
 8006578:	f7fa faa2 	bl	8000ac0 <__aeabi_dcmpeq>
 800657c:	4680      	mov	r8, r0
 800657e:	b158      	cbz	r0, 8006598 <_dtoa_r+0xe0>
 8006580:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006582:	2301      	movs	r3, #1
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 8522 	beq.w	8006fd2 <_dtoa_r+0xb1a>
 800658e:	4881      	ldr	r0, [pc, #516]	; (8006794 <_dtoa_r+0x2dc>)
 8006590:	6018      	str	r0, [r3, #0]
 8006592:	3801      	subs	r0, #1
 8006594:	f000 bd2a 	b.w	8006fec <_dtoa_r+0xb34>
 8006598:	aa14      	add	r2, sp, #80	; 0x50
 800659a:	a915      	add	r1, sp, #84	; 0x54
 800659c:	ec45 4b10 	vmov	d0, r4, r5
 80065a0:	4650      	mov	r0, sl
 80065a2:	f001 fc3d 	bl	8007e20 <__d2b>
 80065a6:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80065aa:	9002      	str	r0, [sp, #8]
 80065ac:	b15e      	cbz	r6, 80065c6 <_dtoa_r+0x10e>
 80065ae:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80065b2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80065b6:	4620      	mov	r0, r4
 80065b8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80065bc:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80065c0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80065c4:	e01d      	b.n	8006602 <_dtoa_r+0x14a>
 80065c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065c8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80065ca:	441e      	add	r6, r3
 80065cc:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	dd0a      	ble.n	80065ea <_dtoa_r+0x132>
 80065d4:	9a00      	ldr	r2, [sp, #0]
 80065d6:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80065da:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80065de:	fa22 f000 	lsr.w	r0, r2, r0
 80065e2:	fa07 f303 	lsl.w	r3, r7, r3
 80065e6:	4318      	orrs	r0, r3
 80065e8:	e004      	b.n	80065f4 <_dtoa_r+0x13c>
 80065ea:	f1c3 0020 	rsb	r0, r3, #32
 80065ee:	9b00      	ldr	r3, [sp, #0]
 80065f0:	fa03 f000 	lsl.w	r0, r3, r0
 80065f4:	f7f9 ff86 	bl	8000504 <__aeabi_ui2d>
 80065f8:	2301      	movs	r3, #1
 80065fa:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80065fe:	3e01      	subs	r6, #1
 8006600:	9311      	str	r3, [sp, #68]	; 0x44
 8006602:	2200      	movs	r2, #0
 8006604:	4b64      	ldr	r3, [pc, #400]	; (8006798 <_dtoa_r+0x2e0>)
 8006606:	f7f9 fe3f 	bl	8000288 <__aeabi_dsub>
 800660a:	a359      	add	r3, pc, #356	; (adr r3, 8006770 <_dtoa_r+0x2b8>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f7f9 ffee 	bl	80005f0 <__aeabi_dmul>
 8006614:	a358      	add	r3, pc, #352	; (adr r3, 8006778 <_dtoa_r+0x2c0>)
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	f7f9 fe37 	bl	800028c <__adddf3>
 800661e:	4604      	mov	r4, r0
 8006620:	4630      	mov	r0, r6
 8006622:	460d      	mov	r5, r1
 8006624:	f7f9 ff7e 	bl	8000524 <__aeabi_i2d>
 8006628:	a355      	add	r3, pc, #340	; (adr r3, 8006780 <_dtoa_r+0x2c8>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f7f9 ffdf 	bl	80005f0 <__aeabi_dmul>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4620      	mov	r0, r4
 8006638:	4629      	mov	r1, r5
 800663a:	f7f9 fe27 	bl	800028c <__adddf3>
 800663e:	4604      	mov	r4, r0
 8006640:	460d      	mov	r5, r1
 8006642:	f7fa fa85 	bl	8000b50 <__aeabi_d2iz>
 8006646:	2200      	movs	r2, #0
 8006648:	4683      	mov	fp, r0
 800664a:	2300      	movs	r3, #0
 800664c:	4620      	mov	r0, r4
 800664e:	4629      	mov	r1, r5
 8006650:	f7fa fa40 	bl	8000ad4 <__aeabi_dcmplt>
 8006654:	b158      	cbz	r0, 800666e <_dtoa_r+0x1b6>
 8006656:	4658      	mov	r0, fp
 8006658:	f7f9 ff64 	bl	8000524 <__aeabi_i2d>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4620      	mov	r0, r4
 8006662:	4629      	mov	r1, r5
 8006664:	f7fa fa2c 	bl	8000ac0 <__aeabi_dcmpeq>
 8006668:	b908      	cbnz	r0, 800666e <_dtoa_r+0x1b6>
 800666a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800666e:	f1bb 0f16 	cmp.w	fp, #22
 8006672:	d80d      	bhi.n	8006690 <_dtoa_r+0x1d8>
 8006674:	4949      	ldr	r1, [pc, #292]	; (800679c <_dtoa_r+0x2e4>)
 8006676:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800667a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800667e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006682:	f7fa fa45 	bl	8000b10 <__aeabi_dcmpgt>
 8006686:	b130      	cbz	r0, 8006696 <_dtoa_r+0x1de>
 8006688:	f10b 3bff 	add.w	fp, fp, #4294967295
 800668c:	2300      	movs	r3, #0
 800668e:	e000      	b.n	8006692 <_dtoa_r+0x1da>
 8006690:	2301      	movs	r3, #1
 8006692:	930d      	str	r3, [sp, #52]	; 0x34
 8006694:	e000      	b.n	8006698 <_dtoa_r+0x1e0>
 8006696:	900d      	str	r0, [sp, #52]	; 0x34
 8006698:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800669a:	1b9e      	subs	r6, r3, r6
 800669c:	1e73      	subs	r3, r6, #1
 800669e:	9305      	str	r3, [sp, #20]
 80066a0:	bf43      	ittte	mi
 80066a2:	f1c3 0900 	rsbmi	r9, r3, #0
 80066a6:	2300      	movmi	r3, #0
 80066a8:	9305      	strmi	r3, [sp, #20]
 80066aa:	f04f 0900 	movpl.w	r9, #0
 80066ae:	f1bb 0f00 	cmp.w	fp, #0
 80066b2:	db07      	blt.n	80066c4 <_dtoa_r+0x20c>
 80066b4:	9b05      	ldr	r3, [sp, #20]
 80066b6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80066ba:	445b      	add	r3, fp
 80066bc:	9305      	str	r3, [sp, #20]
 80066be:	2300      	movs	r3, #0
 80066c0:	9307      	str	r3, [sp, #28]
 80066c2:	e006      	b.n	80066d2 <_dtoa_r+0x21a>
 80066c4:	f1cb 0300 	rsb	r3, fp, #0
 80066c8:	9307      	str	r3, [sp, #28]
 80066ca:	2300      	movs	r3, #0
 80066cc:	ebcb 0909 	rsb	r9, fp, r9
 80066d0:	930c      	str	r3, [sp, #48]	; 0x30
 80066d2:	9b06      	ldr	r3, [sp, #24]
 80066d4:	2b09      	cmp	r3, #9
 80066d6:	d827      	bhi.n	8006728 <_dtoa_r+0x270>
 80066d8:	2b05      	cmp	r3, #5
 80066da:	bfc4      	itt	gt
 80066dc:	3b04      	subgt	r3, #4
 80066de:	9306      	strgt	r3, [sp, #24]
 80066e0:	9b06      	ldr	r3, [sp, #24]
 80066e2:	f1a3 0302 	sub.w	r3, r3, #2
 80066e6:	bfcc      	ite	gt
 80066e8:	2500      	movgt	r5, #0
 80066ea:	2501      	movle	r5, #1
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d820      	bhi.n	8006732 <_dtoa_r+0x27a>
 80066f0:	e8df f003 	tbb	[pc, r3]
 80066f4:	04020e06 	.word	0x04020e06
 80066f8:	2301      	movs	r3, #1
 80066fa:	e002      	b.n	8006702 <_dtoa_r+0x24a>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e008      	b.n	8006712 <_dtoa_r+0x25a>
 8006700:	2300      	movs	r3, #0
 8006702:	9308      	str	r3, [sp, #32]
 8006704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	dd1c      	ble.n	8006744 <_dtoa_r+0x28c>
 800670a:	9303      	str	r3, [sp, #12]
 800670c:	4698      	mov	r8, r3
 800670e:	e01e      	b.n	800674e <_dtoa_r+0x296>
 8006710:	2300      	movs	r3, #0
 8006712:	9308      	str	r3, [sp, #32]
 8006714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006716:	445b      	add	r3, fp
 8006718:	f103 0801 	add.w	r8, r3, #1
 800671c:	9303      	str	r3, [sp, #12]
 800671e:	4643      	mov	r3, r8
 8006720:	2b01      	cmp	r3, #1
 8006722:	bfb8      	it	lt
 8006724:	2301      	movlt	r3, #1
 8006726:	e012      	b.n	800674e <_dtoa_r+0x296>
 8006728:	2501      	movs	r5, #1
 800672a:	2300      	movs	r3, #0
 800672c:	9306      	str	r3, [sp, #24]
 800672e:	9508      	str	r5, [sp, #32]
 8006730:	e001      	b.n	8006736 <_dtoa_r+0x27e>
 8006732:	2301      	movs	r3, #1
 8006734:	9308      	str	r3, [sp, #32]
 8006736:	f04f 33ff 	mov.w	r3, #4294967295
 800673a:	9303      	str	r3, [sp, #12]
 800673c:	4698      	mov	r8, r3
 800673e:	2200      	movs	r2, #0
 8006740:	2312      	movs	r3, #18
 8006742:	e003      	b.n	800674c <_dtoa_r+0x294>
 8006744:	2301      	movs	r3, #1
 8006746:	9303      	str	r3, [sp, #12]
 8006748:	4698      	mov	r8, r3
 800674a:	461a      	mov	r2, r3
 800674c:	9209      	str	r2, [sp, #36]	; 0x24
 800674e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8006752:	2200      	movs	r2, #0
 8006754:	6062      	str	r2, [r4, #4]
 8006756:	2104      	movs	r1, #4
 8006758:	f101 0214 	add.w	r2, r1, #20
 800675c:	429a      	cmp	r2, r3
 800675e:	d81f      	bhi.n	80067a0 <_dtoa_r+0x2e8>
 8006760:	6862      	ldr	r2, [r4, #4]
 8006762:	3201      	adds	r2, #1
 8006764:	6062      	str	r2, [r4, #4]
 8006766:	0049      	lsls	r1, r1, #1
 8006768:	e7f6      	b.n	8006758 <_dtoa_r+0x2a0>
 800676a:	bf00      	nop
 800676c:	f3af 8000 	nop.w
 8006770:	636f4361 	.word	0x636f4361
 8006774:	3fd287a7 	.word	0x3fd287a7
 8006778:	8b60c8b3 	.word	0x8b60c8b3
 800677c:	3fc68a28 	.word	0x3fc68a28
 8006780:	509f79fb 	.word	0x509f79fb
 8006784:	3fd34413 	.word	0x3fd34413
 8006788:	7ff00000 	.word	0x7ff00000
 800678c:	08008e0a 	.word	0x08008e0a
 8006790:	08008e13 	.word	0x08008e13
 8006794:	08008df9 	.word	0x08008df9
 8006798:	3ff80000 	.word	0x3ff80000
 800679c:	08008e88 	.word	0x08008e88
 80067a0:	6861      	ldr	r1, [r4, #4]
 80067a2:	4650      	mov	r0, sl
 80067a4:	f001 f8b4 	bl	8007910 <_Balloc>
 80067a8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80067ac:	6020      	str	r0, [r4, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	9304      	str	r3, [sp, #16]
 80067b2:	f1b8 0f0e 	cmp.w	r8, #14
 80067b6:	f200 815d 	bhi.w	8006a74 <_dtoa_r+0x5bc>
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	f000 815a 	beq.w	8006a74 <_dtoa_r+0x5bc>
 80067c0:	ed9d 7b00 	vldr	d7, [sp]
 80067c4:	f1bb 0f00 	cmp.w	fp, #0
 80067c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80067cc:	dd31      	ble.n	8006832 <_dtoa_r+0x37a>
 80067ce:	4aa0      	ldr	r2, [pc, #640]	; (8006a50 <_dtoa_r+0x598>)
 80067d0:	f00b 030f 	and.w	r3, fp, #15
 80067d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067d8:	ed93 7b00 	vldr	d7, [r3]
 80067dc:	ea4f 142b 	mov.w	r4, fp, asr #4
 80067e0:	06e2      	lsls	r2, r4, #27
 80067e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80067e6:	d50c      	bpl.n	8006802 <_dtoa_r+0x34a>
 80067e8:	4b9a      	ldr	r3, [pc, #616]	; (8006a54 <_dtoa_r+0x59c>)
 80067ea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80067ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067f2:	f7fa f827 	bl	8000844 <__aeabi_ddiv>
 80067f6:	f004 040f 	and.w	r4, r4, #15
 80067fa:	e9cd 0100 	strd	r0, r1, [sp]
 80067fe:	2603      	movs	r6, #3
 8006800:	e000      	b.n	8006804 <_dtoa_r+0x34c>
 8006802:	2602      	movs	r6, #2
 8006804:	4d93      	ldr	r5, [pc, #588]	; (8006a54 <_dtoa_r+0x59c>)
 8006806:	b16c      	cbz	r4, 8006824 <_dtoa_r+0x36c>
 8006808:	07e3      	lsls	r3, r4, #31
 800680a:	d508      	bpl.n	800681e <_dtoa_r+0x366>
 800680c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006810:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006814:	f7f9 feec 	bl	80005f0 <__aeabi_dmul>
 8006818:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800681c:	3601      	adds	r6, #1
 800681e:	1064      	asrs	r4, r4, #1
 8006820:	3508      	adds	r5, #8
 8006822:	e7f0      	b.n	8006806 <_dtoa_r+0x34e>
 8006824:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800682c:	f7fa f80a 	bl	8000844 <__aeabi_ddiv>
 8006830:	e020      	b.n	8006874 <_dtoa_r+0x3bc>
 8006832:	f1cb 0400 	rsb	r4, fp, #0
 8006836:	b304      	cbz	r4, 800687a <_dtoa_r+0x3c2>
 8006838:	4b85      	ldr	r3, [pc, #532]	; (8006a50 <_dtoa_r+0x598>)
 800683a:	4d86      	ldr	r5, [pc, #536]	; (8006a54 <_dtoa_r+0x59c>)
 800683c:	f004 020f 	and.w	r2, r4, #15
 8006840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800684c:	f7f9 fed0 	bl	80005f0 <__aeabi_dmul>
 8006850:	e9cd 0100 	strd	r0, r1, [sp]
 8006854:	1124      	asrs	r4, r4, #4
 8006856:	2300      	movs	r3, #0
 8006858:	2602      	movs	r6, #2
 800685a:	b154      	cbz	r4, 8006872 <_dtoa_r+0x3ba>
 800685c:	07e7      	lsls	r7, r4, #31
 800685e:	d505      	bpl.n	800686c <_dtoa_r+0x3b4>
 8006860:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006864:	f7f9 fec4 	bl	80005f0 <__aeabi_dmul>
 8006868:	3601      	adds	r6, #1
 800686a:	2301      	movs	r3, #1
 800686c:	1064      	asrs	r4, r4, #1
 800686e:	3508      	adds	r5, #8
 8006870:	e7f3      	b.n	800685a <_dtoa_r+0x3a2>
 8006872:	b11b      	cbz	r3, 800687c <_dtoa_r+0x3c4>
 8006874:	e9cd 0100 	strd	r0, r1, [sp]
 8006878:	e000      	b.n	800687c <_dtoa_r+0x3c4>
 800687a:	2602      	movs	r6, #2
 800687c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800687e:	b1eb      	cbz	r3, 80068bc <_dtoa_r+0x404>
 8006880:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006884:	2200      	movs	r2, #0
 8006886:	4b74      	ldr	r3, [pc, #464]	; (8006a58 <_dtoa_r+0x5a0>)
 8006888:	4620      	mov	r0, r4
 800688a:	4629      	mov	r1, r5
 800688c:	f7fa f922 	bl	8000ad4 <__aeabi_dcmplt>
 8006890:	b1a0      	cbz	r0, 80068bc <_dtoa_r+0x404>
 8006892:	f1b8 0f00 	cmp.w	r8, #0
 8006896:	d011      	beq.n	80068bc <_dtoa_r+0x404>
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f340 80e6 	ble.w	8006a6c <_dtoa_r+0x5b4>
 80068a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80068a4:	930a      	str	r3, [sp, #40]	; 0x28
 80068a6:	2200      	movs	r2, #0
 80068a8:	4b6c      	ldr	r3, [pc, #432]	; (8006a5c <_dtoa_r+0x5a4>)
 80068aa:	4620      	mov	r0, r4
 80068ac:	4629      	mov	r1, r5
 80068ae:	f7f9 fe9f 	bl	80005f0 <__aeabi_dmul>
 80068b2:	3601      	adds	r6, #1
 80068b4:	e9cd 0100 	strd	r0, r1, [sp]
 80068b8:	9f03      	ldr	r7, [sp, #12]
 80068ba:	e002      	b.n	80068c2 <_dtoa_r+0x40a>
 80068bc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80068c0:	4647      	mov	r7, r8
 80068c2:	4630      	mov	r0, r6
 80068c4:	f7f9 fe2e 	bl	8000524 <__aeabi_i2d>
 80068c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068cc:	f7f9 fe90 	bl	80005f0 <__aeabi_dmul>
 80068d0:	2200      	movs	r2, #0
 80068d2:	4b63      	ldr	r3, [pc, #396]	; (8006a60 <_dtoa_r+0x5a8>)
 80068d4:	f7f9 fcda 	bl	800028c <__adddf3>
 80068d8:	4604      	mov	r4, r0
 80068da:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80068de:	b9cf      	cbnz	r7, 8006914 <_dtoa_r+0x45c>
 80068e0:	2200      	movs	r2, #0
 80068e2:	4b60      	ldr	r3, [pc, #384]	; (8006a64 <_dtoa_r+0x5ac>)
 80068e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068e8:	f7f9 fcce 	bl	8000288 <__aeabi_dsub>
 80068ec:	4622      	mov	r2, r4
 80068ee:	462b      	mov	r3, r5
 80068f0:	e9cd 0100 	strd	r0, r1, [sp]
 80068f4:	f7fa f90c 	bl	8000b10 <__aeabi_dcmpgt>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	f040 8241 	bne.w	8006d80 <_dtoa_r+0x8c8>
 80068fe:	4622      	mov	r2, r4
 8006900:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006904:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006908:	f7fa f8e4 	bl	8000ad4 <__aeabi_dcmplt>
 800690c:	2800      	cmp	r0, #0
 800690e:	f040 822e 	bne.w	8006d6e <_dtoa_r+0x8b6>
 8006912:	e0ab      	b.n	8006a6c <_dtoa_r+0x5b4>
 8006914:	9a08      	ldr	r2, [sp, #32]
 8006916:	4b4e      	ldr	r3, [pc, #312]	; (8006a50 <_dtoa_r+0x598>)
 8006918:	1e79      	subs	r1, r7, #1
 800691a:	2a00      	cmp	r2, #0
 800691c:	d04a      	beq.n	80069b4 <_dtoa_r+0x4fc>
 800691e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	2000      	movs	r0, #0
 8006928:	494f      	ldr	r1, [pc, #316]	; (8006a68 <_dtoa_r+0x5b0>)
 800692a:	f7f9 ff8b 	bl	8000844 <__aeabi_ddiv>
 800692e:	4622      	mov	r2, r4
 8006930:	462b      	mov	r3, r5
 8006932:	f7f9 fca9 	bl	8000288 <__aeabi_dsub>
 8006936:	9c04      	ldr	r4, [sp, #16]
 8006938:	4605      	mov	r5, r0
 800693a:	460e      	mov	r6, r1
 800693c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006940:	f7fa f906 	bl	8000b50 <__aeabi_d2iz>
 8006944:	9012      	str	r0, [sp, #72]	; 0x48
 8006946:	f7f9 fded 	bl	8000524 <__aeabi_i2d>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006952:	f7f9 fc99 	bl	8000288 <__aeabi_dsub>
 8006956:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006958:	3330      	adds	r3, #48	; 0x30
 800695a:	f804 3b01 	strb.w	r3, [r4], #1
 800695e:	462a      	mov	r2, r5
 8006960:	4633      	mov	r3, r6
 8006962:	e9cd 0100 	strd	r0, r1, [sp]
 8006966:	f7fa f8b5 	bl	8000ad4 <__aeabi_dcmplt>
 800696a:	2800      	cmp	r0, #0
 800696c:	f040 8321 	bne.w	8006fb2 <_dtoa_r+0xafa>
 8006970:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006974:	2000      	movs	r0, #0
 8006976:	4938      	ldr	r1, [pc, #224]	; (8006a58 <_dtoa_r+0x5a0>)
 8006978:	f7f9 fc86 	bl	8000288 <__aeabi_dsub>
 800697c:	462a      	mov	r2, r5
 800697e:	4633      	mov	r3, r6
 8006980:	f7fa f8a8 	bl	8000ad4 <__aeabi_dcmplt>
 8006984:	2800      	cmp	r0, #0
 8006986:	f040 80d2 	bne.w	8006b2e <_dtoa_r+0x676>
 800698a:	9b04      	ldr	r3, [sp, #16]
 800698c:	1ae3      	subs	r3, r4, r3
 800698e:	42bb      	cmp	r3, r7
 8006990:	da6c      	bge.n	8006a6c <_dtoa_r+0x5b4>
 8006992:	2200      	movs	r2, #0
 8006994:	4b31      	ldr	r3, [pc, #196]	; (8006a5c <_dtoa_r+0x5a4>)
 8006996:	4628      	mov	r0, r5
 8006998:	4631      	mov	r1, r6
 800699a:	f7f9 fe29 	bl	80005f0 <__aeabi_dmul>
 800699e:	2200      	movs	r2, #0
 80069a0:	4605      	mov	r5, r0
 80069a2:	460e      	mov	r6, r1
 80069a4:	4b2d      	ldr	r3, [pc, #180]	; (8006a5c <_dtoa_r+0x5a4>)
 80069a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069aa:	f7f9 fe21 	bl	80005f0 <__aeabi_dmul>
 80069ae:	e9cd 0100 	strd	r0, r1, [sp]
 80069b2:	e7c3      	b.n	800693c <_dtoa_r+0x484>
 80069b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80069b8:	4622      	mov	r2, r4
 80069ba:	462b      	mov	r3, r5
 80069bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069c0:	f7f9 fe16 	bl	80005f0 <__aeabi_dmul>
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80069ca:	19dc      	adds	r4, r3, r7
 80069cc:	461d      	mov	r5, r3
 80069ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069d2:	f7fa f8bd 	bl	8000b50 <__aeabi_d2iz>
 80069d6:	4606      	mov	r6, r0
 80069d8:	f7f9 fda4 	bl	8000524 <__aeabi_i2d>
 80069dc:	3630      	adds	r6, #48	; 0x30
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069e6:	f7f9 fc4f 	bl	8000288 <__aeabi_dsub>
 80069ea:	f805 6b01 	strb.w	r6, [r5], #1
 80069ee:	42ac      	cmp	r4, r5
 80069f0:	e9cd 0100 	strd	r0, r1, [sp]
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	d123      	bne.n	8006a42 <_dtoa_r+0x58a>
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <_dtoa_r+0x5b0>)
 80069fc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006a00:	f7f9 fc44 	bl	800028c <__adddf3>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a0c:	f7fa f880 	bl	8000b10 <__aeabi_dcmpgt>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	f040 808c 	bne.w	8006b2e <_dtoa_r+0x676>
 8006a16:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	4912      	ldr	r1, [pc, #72]	; (8006a68 <_dtoa_r+0x5b0>)
 8006a1e:	f7f9 fc33 	bl	8000288 <__aeabi_dsub>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a2a:	f7fa f853 	bl	8000ad4 <__aeabi_dcmplt>
 8006a2e:	b1e8      	cbz	r0, 8006a6c <_dtoa_r+0x5b4>
 8006a30:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006a34:	2b30      	cmp	r3, #48	; 0x30
 8006a36:	f104 32ff 	add.w	r2, r4, #4294967295
 8006a3a:	f040 82ba 	bne.w	8006fb2 <_dtoa_r+0xafa>
 8006a3e:	4614      	mov	r4, r2
 8006a40:	e7f6      	b.n	8006a30 <_dtoa_r+0x578>
 8006a42:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <_dtoa_r+0x5a4>)
 8006a44:	f7f9 fdd4 	bl	80005f0 <__aeabi_dmul>
 8006a48:	e9cd 0100 	strd	r0, r1, [sp]
 8006a4c:	e7bf      	b.n	80069ce <_dtoa_r+0x516>
 8006a4e:	bf00      	nop
 8006a50:	08008e88 	.word	0x08008e88
 8006a54:	08008f50 	.word	0x08008f50
 8006a58:	3ff00000 	.word	0x3ff00000
 8006a5c:	40240000 	.word	0x40240000
 8006a60:	401c0000 	.word	0x401c0000
 8006a64:	40140000 	.word	0x40140000
 8006a68:	3fe00000 	.word	0x3fe00000
 8006a6c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8006a70:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006a74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	db7c      	blt.n	8006b74 <_dtoa_r+0x6bc>
 8006a7a:	f1bb 0f0e 	cmp.w	fp, #14
 8006a7e:	dc79      	bgt.n	8006b74 <_dtoa_r+0x6bc>
 8006a80:	4b8f      	ldr	r3, [pc, #572]	; (8006cc0 <_dtoa_r+0x808>)
 8006a82:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a86:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da14      	bge.n	8006aba <_dtoa_r+0x602>
 8006a90:	f1b8 0f00 	cmp.w	r8, #0
 8006a94:	dc11      	bgt.n	8006aba <_dtoa_r+0x602>
 8006a96:	f040 816c 	bne.w	8006d72 <_dtoa_r+0x8ba>
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	4b89      	ldr	r3, [pc, #548]	; (8006cc4 <_dtoa_r+0x80c>)
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	f7f9 fda5 	bl	80005f0 <__aeabi_dmul>
 8006aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aaa:	f7fa f827 	bl	8000afc <__aeabi_dcmpge>
 8006aae:	4645      	mov	r5, r8
 8006ab0:	4646      	mov	r6, r8
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	f040 815f 	bne.w	8006d76 <_dtoa_r+0x8be>
 8006ab8:	e166      	b.n	8006d88 <_dtoa_r+0x8d0>
 8006aba:	9c04      	ldr	r4, [sp, #16]
 8006abc:	4632      	mov	r2, r6
 8006abe:	463b      	mov	r3, r7
 8006ac0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ac4:	f7f9 febe 	bl	8000844 <__aeabi_ddiv>
 8006ac8:	f7fa f842 	bl	8000b50 <__aeabi_d2iz>
 8006acc:	4605      	mov	r5, r0
 8006ace:	f7f9 fd29 	bl	8000524 <__aeabi_i2d>
 8006ad2:	4632      	mov	r2, r6
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	f7f9 fd8b 	bl	80005f0 <__aeabi_dmul>
 8006ada:	460b      	mov	r3, r1
 8006adc:	4602      	mov	r2, r0
 8006ade:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ae2:	f7f9 fbd1 	bl	8000288 <__aeabi_dsub>
 8006ae6:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8006aea:	f804 eb01 	strb.w	lr, [r4], #1
 8006aee:	9b04      	ldr	r3, [sp, #16]
 8006af0:	ebc3 0e04 	rsb	lr, r3, r4
 8006af4:	45f0      	cmp	r8, lr
 8006af6:	e9cd 0100 	strd	r0, r1, [sp]
 8006afa:	d12e      	bne.n	8006b5a <_dtoa_r+0x6a2>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	f7f9 fbc4 	bl	800028c <__adddf3>
 8006b04:	4680      	mov	r8, r0
 8006b06:	4689      	mov	r9, r1
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7f9 ffe0 	bl	8000ad4 <__aeabi_dcmplt>
 8006b14:	b978      	cbnz	r0, 8006b36 <_dtoa_r+0x67e>
 8006b16:	4642      	mov	r2, r8
 8006b18:	464b      	mov	r3, r9
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	f7f9 ffcf 	bl	8000ac0 <__aeabi_dcmpeq>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f000 8247 	beq.w	8006fb6 <_dtoa_r+0xafe>
 8006b28:	07e9      	lsls	r1, r5, #31
 8006b2a:	d404      	bmi.n	8006b36 <_dtoa_r+0x67e>
 8006b2c:	e243      	b.n	8006fb6 <_dtoa_r+0xafe>
 8006b2e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006b32:	e000      	b.n	8006b36 <_dtoa_r+0x67e>
 8006b34:	461c      	mov	r4, r3
 8006b36:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8006b3a:	2a39      	cmp	r2, #57	; 0x39
 8006b3c:	f104 33ff 	add.w	r3, r4, #4294967295
 8006b40:	d107      	bne.n	8006b52 <_dtoa_r+0x69a>
 8006b42:	9a04      	ldr	r2, [sp, #16]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d1f5      	bne.n	8006b34 <_dtoa_r+0x67c>
 8006b48:	9904      	ldr	r1, [sp, #16]
 8006b4a:	2230      	movs	r2, #48	; 0x30
 8006b4c:	f10b 0b01 	add.w	fp, fp, #1
 8006b50:	700a      	strb	r2, [r1, #0]
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	3201      	adds	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e22d      	b.n	8006fb6 <_dtoa_r+0xafe>
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4b5a      	ldr	r3, [pc, #360]	; (8006cc8 <_dtoa_r+0x810>)
 8006b5e:	f7f9 fd47 	bl	80005f0 <__aeabi_dmul>
 8006b62:	2200      	movs	r2, #0
 8006b64:	2300      	movs	r3, #0
 8006b66:	e9cd 0100 	strd	r0, r1, [sp]
 8006b6a:	f7f9 ffa9 	bl	8000ac0 <__aeabi_dcmpeq>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d0a4      	beq.n	8006abc <_dtoa_r+0x604>
 8006b72:	e220      	b.n	8006fb6 <_dtoa_r+0xafe>
 8006b74:	9a08      	ldr	r2, [sp, #32]
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	d02d      	beq.n	8006bd6 <_dtoa_r+0x71e>
 8006b7a:	9a06      	ldr	r2, [sp, #24]
 8006b7c:	2a01      	cmp	r2, #1
 8006b7e:	dc0a      	bgt.n	8006b96 <_dtoa_r+0x6de>
 8006b80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006b82:	b112      	cbz	r2, 8006b8a <_dtoa_r+0x6d2>
 8006b84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b88:	e002      	b.n	8006b90 <_dtoa_r+0x6d8>
 8006b8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b8c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b90:	9d07      	ldr	r5, [sp, #28]
 8006b92:	464c      	mov	r4, r9
 8006b94:	e015      	b.n	8006bc2 <_dtoa_r+0x70a>
 8006b96:	9b07      	ldr	r3, [sp, #28]
 8006b98:	f108 35ff 	add.w	r5, r8, #4294967295
 8006b9c:	42ab      	cmp	r3, r5
 8006b9e:	bfbf      	itttt	lt
 8006ba0:	9b07      	ldrlt	r3, [sp, #28]
 8006ba2:	9507      	strlt	r5, [sp, #28]
 8006ba4:	1aea      	sublt	r2, r5, r3
 8006ba6:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006ba8:	bfb7      	itett	lt
 8006baa:	189b      	addlt	r3, r3, r2
 8006bac:	1b5d      	subge	r5, r3, r5
 8006bae:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006bb0:	2500      	movlt	r5, #0
 8006bb2:	f1b8 0f00 	cmp.w	r8, #0
 8006bb6:	bfb9      	ittee	lt
 8006bb8:	ebc8 0409 	rsblt	r4, r8, r9
 8006bbc:	2300      	movlt	r3, #0
 8006bbe:	464c      	movge	r4, r9
 8006bc0:	4643      	movge	r3, r8
 8006bc2:	9a05      	ldr	r2, [sp, #20]
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	441a      	add	r2, r3
 8006bc8:	4650      	mov	r0, sl
 8006bca:	4499      	add	r9, r3
 8006bcc:	9205      	str	r2, [sp, #20]
 8006bce:	f000 ff73 	bl	8007ab8 <__i2b>
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	e002      	b.n	8006bdc <_dtoa_r+0x724>
 8006bd6:	9d07      	ldr	r5, [sp, #28]
 8006bd8:	9e08      	ldr	r6, [sp, #32]
 8006bda:	464c      	mov	r4, r9
 8006bdc:	b15c      	cbz	r4, 8006bf6 <_dtoa_r+0x73e>
 8006bde:	9b05      	ldr	r3, [sp, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dd08      	ble.n	8006bf6 <_dtoa_r+0x73e>
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	9a05      	ldr	r2, [sp, #20]
 8006be8:	bfa8      	it	ge
 8006bea:	4623      	movge	r3, r4
 8006bec:	ebc3 0909 	rsb	r9, r3, r9
 8006bf0:	1ae4      	subs	r4, r4, r3
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	9305      	str	r3, [sp, #20]
 8006bf6:	9b07      	ldr	r3, [sp, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dd1d      	ble.n	8006c38 <_dtoa_r+0x780>
 8006bfc:	9b08      	ldr	r3, [sp, #32]
 8006bfe:	b1ab      	cbz	r3, 8006c2c <_dtoa_r+0x774>
 8006c00:	b185      	cbz	r5, 8006c24 <_dtoa_r+0x76c>
 8006c02:	4631      	mov	r1, r6
 8006c04:	462a      	mov	r2, r5
 8006c06:	4650      	mov	r0, sl
 8006c08:	f000 fff0 	bl	8007bec <__pow5mult>
 8006c0c:	9a02      	ldr	r2, [sp, #8]
 8006c0e:	4601      	mov	r1, r0
 8006c10:	4606      	mov	r6, r0
 8006c12:	4650      	mov	r0, sl
 8006c14:	f000 ff59 	bl	8007aca <__multiply>
 8006c18:	9902      	ldr	r1, [sp, #8]
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	4650      	mov	r0, sl
 8006c1e:	f000 feac 	bl	800797a <_Bfree>
 8006c22:	9702      	str	r7, [sp, #8]
 8006c24:	9b07      	ldr	r3, [sp, #28]
 8006c26:	1b5a      	subs	r2, r3, r5
 8006c28:	d006      	beq.n	8006c38 <_dtoa_r+0x780>
 8006c2a:	e000      	b.n	8006c2e <_dtoa_r+0x776>
 8006c2c:	9a07      	ldr	r2, [sp, #28]
 8006c2e:	9902      	ldr	r1, [sp, #8]
 8006c30:	4650      	mov	r0, sl
 8006c32:	f000 ffdb 	bl	8007bec <__pow5mult>
 8006c36:	9002      	str	r0, [sp, #8]
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	f000 ff3c 	bl	8007ab8 <__i2b>
 8006c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c42:	4605      	mov	r5, r0
 8006c44:	b35b      	cbz	r3, 8006c9e <_dtoa_r+0x7e6>
 8006c46:	461a      	mov	r2, r3
 8006c48:	4601      	mov	r1, r0
 8006c4a:	4650      	mov	r0, sl
 8006c4c:	f000 ffce 	bl	8007bec <__pow5mult>
 8006c50:	9b06      	ldr	r3, [sp, #24]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	4605      	mov	r5, r0
 8006c56:	dc18      	bgt.n	8006c8a <_dtoa_r+0x7d2>
 8006c58:	9b00      	ldr	r3, [sp, #0]
 8006c5a:	b983      	cbnz	r3, 8006c7e <_dtoa_r+0x7c6>
 8006c5c:	9b01      	ldr	r3, [sp, #4]
 8006c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c62:	b973      	cbnz	r3, 8006c82 <_dtoa_r+0x7ca>
 8006c64:	9b01      	ldr	r3, [sp, #4]
 8006c66:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8006c6a:	0d3f      	lsrs	r7, r7, #20
 8006c6c:	053f      	lsls	r7, r7, #20
 8006c6e:	b14f      	cbz	r7, 8006c84 <_dtoa_r+0x7cc>
 8006c70:	9b05      	ldr	r3, [sp, #20]
 8006c72:	3301      	adds	r3, #1
 8006c74:	f109 0901 	add.w	r9, r9, #1
 8006c78:	9305      	str	r3, [sp, #20]
 8006c7a:	2701      	movs	r7, #1
 8006c7c:	e002      	b.n	8006c84 <_dtoa_r+0x7cc>
 8006c7e:	2700      	movs	r7, #0
 8006c80:	e000      	b.n	8006c84 <_dtoa_r+0x7cc>
 8006c82:	9f00      	ldr	r7, [sp, #0]
 8006c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c86:	b173      	cbz	r3, 8006ca6 <_dtoa_r+0x7ee>
 8006c88:	e000      	b.n	8006c8c <_dtoa_r+0x7d4>
 8006c8a:	2700      	movs	r7, #0
 8006c8c:	692b      	ldr	r3, [r5, #16]
 8006c8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006c92:	6918      	ldr	r0, [r3, #16]
 8006c94:	f000 fec3 	bl	8007a1e <__hi0bits>
 8006c98:	f1c0 0020 	rsb	r0, r0, #32
 8006c9c:	e004      	b.n	8006ca8 <_dtoa_r+0x7f0>
 8006c9e:	9b06      	ldr	r3, [sp, #24]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	ddd9      	ble.n	8006c58 <_dtoa_r+0x7a0>
 8006ca4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	9b05      	ldr	r3, [sp, #20]
 8006caa:	4418      	add	r0, r3
 8006cac:	f010 001f 	ands.w	r0, r0, #31
 8006cb0:	d00e      	beq.n	8006cd0 <_dtoa_r+0x818>
 8006cb2:	f1c0 0320 	rsb	r3, r0, #32
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	dd08      	ble.n	8006ccc <_dtoa_r+0x814>
 8006cba:	f1c0 001c 	rsb	r0, r0, #28
 8006cbe:	e008      	b.n	8006cd2 <_dtoa_r+0x81a>
 8006cc0:	08008e88 	.word	0x08008e88
 8006cc4:	40140000 	.word	0x40140000
 8006cc8:	40240000 	.word	0x40240000
 8006ccc:	d006      	beq.n	8006cdc <_dtoa_r+0x824>
 8006cce:	4618      	mov	r0, r3
 8006cd0:	301c      	adds	r0, #28
 8006cd2:	9b05      	ldr	r3, [sp, #20]
 8006cd4:	4403      	add	r3, r0
 8006cd6:	4481      	add	r9, r0
 8006cd8:	4404      	add	r4, r0
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	f1b9 0f00 	cmp.w	r9, #0
 8006ce0:	dd05      	ble.n	8006cee <_dtoa_r+0x836>
 8006ce2:	464a      	mov	r2, r9
 8006ce4:	9902      	ldr	r1, [sp, #8]
 8006ce6:	4650      	mov	r0, sl
 8006ce8:	f000 ffce 	bl	8007c88 <__lshift>
 8006cec:	9002      	str	r0, [sp, #8]
 8006cee:	9b05      	ldr	r3, [sp, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dd05      	ble.n	8006d00 <_dtoa_r+0x848>
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	4650      	mov	r0, sl
 8006cfa:	f000 ffc5 	bl	8007c88 <__lshift>
 8006cfe:	4605      	mov	r5, r0
 8006d00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d02:	b1eb      	cbz	r3, 8006d40 <_dtoa_r+0x888>
 8006d04:	4629      	mov	r1, r5
 8006d06:	9802      	ldr	r0, [sp, #8]
 8006d08:	f001 f80f 	bl	8007d2a <__mcmp>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	da17      	bge.n	8006d40 <_dtoa_r+0x888>
 8006d10:	2300      	movs	r3, #0
 8006d12:	220a      	movs	r2, #10
 8006d14:	9902      	ldr	r1, [sp, #8]
 8006d16:	4650      	mov	r0, sl
 8006d18:	f000 fe46 	bl	80079a8 <__multadd>
 8006d1c:	9b08      	ldr	r3, [sp, #32]
 8006d1e:	9002      	str	r0, [sp, #8]
 8006d20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8158 	beq.w	8006fda <_dtoa_r+0xb22>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	220a      	movs	r2, #10
 8006d30:	4650      	mov	r0, sl
 8006d32:	f000 fe39 	bl	80079a8 <__multadd>
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	dc37      	bgt.n	8006dae <_dtoa_r+0x8f6>
 8006d3e:	e033      	b.n	8006da8 <_dtoa_r+0x8f0>
 8006d40:	f1b8 0f00 	cmp.w	r8, #0
 8006d44:	dc2a      	bgt.n	8006d9c <_dtoa_r+0x8e4>
 8006d46:	9b06      	ldr	r3, [sp, #24]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	dd27      	ble.n	8006d9c <_dtoa_r+0x8e4>
 8006d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	b983      	cbnz	r3, 8006d76 <_dtoa_r+0x8be>
 8006d54:	4629      	mov	r1, r5
 8006d56:	2205      	movs	r2, #5
 8006d58:	4650      	mov	r0, sl
 8006d5a:	f000 fe25 	bl	80079a8 <__multadd>
 8006d5e:	4601      	mov	r1, r0
 8006d60:	4605      	mov	r5, r0
 8006d62:	9802      	ldr	r0, [sp, #8]
 8006d64:	f000 ffe1 	bl	8007d2a <__mcmp>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	dc0d      	bgt.n	8006d88 <_dtoa_r+0x8d0>
 8006d6c:	e003      	b.n	8006d76 <_dtoa_r+0x8be>
 8006d6e:	463d      	mov	r5, r7
 8006d70:	e000      	b.n	8006d74 <_dtoa_r+0x8bc>
 8006d72:	2500      	movs	r5, #0
 8006d74:	462e      	mov	r6, r5
 8006d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d78:	9c04      	ldr	r4, [sp, #16]
 8006d7a:	ea6f 0b03 	mvn.w	fp, r3
 8006d7e:	e00a      	b.n	8006d96 <_dtoa_r+0x8de>
 8006d80:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006d84:	463d      	mov	r5, r7
 8006d86:	463e      	mov	r6, r7
 8006d88:	9b04      	ldr	r3, [sp, #16]
 8006d8a:	9a04      	ldr	r2, [sp, #16]
 8006d8c:	1c5c      	adds	r4, r3, #1
 8006d8e:	2331      	movs	r3, #49	; 0x31
 8006d90:	7013      	strb	r3, [r2, #0]
 8006d92:	f10b 0b01 	add.w	fp, fp, #1
 8006d96:	46b0      	mov	r8, r6
 8006d98:	2600      	movs	r6, #0
 8006d9a:	e0f7      	b.n	8006f8c <_dtoa_r+0xad4>
 8006d9c:	9b08      	ldr	r3, [sp, #32]
 8006d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006da2:	b923      	cbnz	r3, 8006dae <_dtoa_r+0x8f6>
 8006da4:	9c04      	ldr	r4, [sp, #16]
 8006da6:	e0b1      	b.n	8006f0c <_dtoa_r+0xa54>
 8006da8:	9b06      	ldr	r3, [sp, #24]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	dcd0      	bgt.n	8006d50 <_dtoa_r+0x898>
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	dd05      	ble.n	8006dbe <_dtoa_r+0x906>
 8006db2:	4631      	mov	r1, r6
 8006db4:	4622      	mov	r2, r4
 8006db6:	4650      	mov	r0, sl
 8006db8:	f000 ff66 	bl	8007c88 <__lshift>
 8006dbc:	4606      	mov	r6, r0
 8006dbe:	b19f      	cbz	r7, 8006de8 <_dtoa_r+0x930>
 8006dc0:	6871      	ldr	r1, [r6, #4]
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	f000 fda4 	bl	8007910 <_Balloc>
 8006dc8:	6932      	ldr	r2, [r6, #16]
 8006dca:	3202      	adds	r2, #2
 8006dcc:	4604      	mov	r4, r0
 8006dce:	0092      	lsls	r2, r2, #2
 8006dd0:	f106 010c 	add.w	r1, r6, #12
 8006dd4:	300c      	adds	r0, #12
 8006dd6:	f000 fd6d 	bl	80078b4 <memcpy>
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4650      	mov	r0, sl
 8006de0:	f000 ff52 	bl	8007c88 <__lshift>
 8006de4:	4680      	mov	r8, r0
 8006de6:	e000      	b.n	8006dea <_dtoa_r+0x932>
 8006de8:	46b0      	mov	r8, r6
 8006dea:	9b00      	ldr	r3, [sp, #0]
 8006dec:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	9305      	str	r3, [sp, #20]
 8006df6:	4629      	mov	r1, r5
 8006df8:	9802      	ldr	r0, [sp, #8]
 8006dfa:	f7ff facb 	bl	8006394 <quorem>
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4604      	mov	r4, r0
 8006e02:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8006e06:	9802      	ldr	r0, [sp, #8]
 8006e08:	f000 ff8f 	bl	8007d2a <__mcmp>
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	9000      	str	r0, [sp, #0]
 8006e10:	4629      	mov	r1, r5
 8006e12:	4650      	mov	r0, sl
 8006e14:	f000 ffa5 	bl	8007d62 <__mdiff>
 8006e18:	68c3      	ldr	r3, [r0, #12]
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	b93b      	cbnz	r3, 8006e2e <_dtoa_r+0x976>
 8006e1e:	4601      	mov	r1, r0
 8006e20:	9007      	str	r0, [sp, #28]
 8006e22:	9802      	ldr	r0, [sp, #8]
 8006e24:	f000 ff81 	bl	8007d2a <__mcmp>
 8006e28:	9a07      	ldr	r2, [sp, #28]
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	e000      	b.n	8006e30 <_dtoa_r+0x978>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	4611      	mov	r1, r2
 8006e32:	4650      	mov	r0, sl
 8006e34:	9307      	str	r3, [sp, #28]
 8006e36:	f000 fda0 	bl	800797a <_Bfree>
 8006e3a:	9b07      	ldr	r3, [sp, #28]
 8006e3c:	b94b      	cbnz	r3, 8006e52 <_dtoa_r+0x99a>
 8006e3e:	9a06      	ldr	r2, [sp, #24]
 8006e40:	b93a      	cbnz	r2, 8006e52 <_dtoa_r+0x99a>
 8006e42:	9a05      	ldr	r2, [sp, #20]
 8006e44:	b92a      	cbnz	r2, 8006e52 <_dtoa_r+0x99a>
 8006e46:	2f39      	cmp	r7, #57	; 0x39
 8006e48:	d028      	beq.n	8006e9c <_dtoa_r+0x9e4>
 8006e4a:	9b00      	ldr	r3, [sp, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dc1a      	bgt.n	8006e86 <_dtoa_r+0x9ce>
 8006e50:	e01b      	b.n	8006e8a <_dtoa_r+0x9d2>
 8006e52:	9a00      	ldr	r2, [sp, #0]
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	db04      	blt.n	8006e62 <_dtoa_r+0x9aa>
 8006e58:	d11a      	bne.n	8006e90 <_dtoa_r+0x9d8>
 8006e5a:	9a06      	ldr	r2, [sp, #24]
 8006e5c:	b9c2      	cbnz	r2, 8006e90 <_dtoa_r+0x9d8>
 8006e5e:	9a05      	ldr	r2, [sp, #20]
 8006e60:	b9b2      	cbnz	r2, 8006e90 <_dtoa_r+0x9d8>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dd11      	ble.n	8006e8a <_dtoa_r+0x9d2>
 8006e66:	2201      	movs	r2, #1
 8006e68:	9902      	ldr	r1, [sp, #8]
 8006e6a:	4650      	mov	r0, sl
 8006e6c:	f000 ff0c 	bl	8007c88 <__lshift>
 8006e70:	4629      	mov	r1, r5
 8006e72:	9002      	str	r0, [sp, #8]
 8006e74:	f000 ff59 	bl	8007d2a <__mcmp>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	dc02      	bgt.n	8006e82 <_dtoa_r+0x9ca>
 8006e7c:	d105      	bne.n	8006e8a <_dtoa_r+0x9d2>
 8006e7e:	07fa      	lsls	r2, r7, #31
 8006e80:	d503      	bpl.n	8006e8a <_dtoa_r+0x9d2>
 8006e82:	2f39      	cmp	r7, #57	; 0x39
 8006e84:	d00a      	beq.n	8006e9c <_dtoa_r+0x9e4>
 8006e86:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8006e8a:	f109 0401 	add.w	r4, r9, #1
 8006e8e:	e00c      	b.n	8006eaa <_dtoa_r+0x9f2>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f109 0401 	add.w	r4, r9, #1
 8006e96:	dd0b      	ble.n	8006eb0 <_dtoa_r+0x9f8>
 8006e98:	2f39      	cmp	r7, #57	; 0x39
 8006e9a:	d105      	bne.n	8006ea8 <_dtoa_r+0x9f0>
 8006e9c:	2339      	movs	r3, #57	; 0x39
 8006e9e:	f889 3000 	strb.w	r3, [r9]
 8006ea2:	f109 0901 	add.w	r9, r9, #1
 8006ea6:	e054      	b.n	8006f52 <_dtoa_r+0xa9a>
 8006ea8:	3701      	adds	r7, #1
 8006eaa:	f889 7000 	strb.w	r7, [r9]
 8006eae:	e06d      	b.n	8006f8c <_dtoa_r+0xad4>
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	9a03      	ldr	r2, [sp, #12]
 8006eb4:	f804 7c01 	strb.w	r7, [r4, #-1]
 8006eb8:	1ae3      	subs	r3, r4, r3
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	46a1      	mov	r9, r4
 8006ebe:	d03a      	beq.n	8006f36 <_dtoa_r+0xa7e>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	220a      	movs	r2, #10
 8006ec4:	9902      	ldr	r1, [sp, #8]
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	f000 fd6e 	bl	80079a8 <__multadd>
 8006ecc:	4546      	cmp	r6, r8
 8006ece:	9002      	str	r0, [sp, #8]
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	f04f 020a 	mov.w	r2, #10
 8006ed8:	4631      	mov	r1, r6
 8006eda:	4650      	mov	r0, sl
 8006edc:	d104      	bne.n	8006ee8 <_dtoa_r+0xa30>
 8006ede:	f000 fd63 	bl	80079a8 <__multadd>
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	e786      	b.n	8006df6 <_dtoa_r+0x93e>
 8006ee8:	f000 fd5e 	bl	80079a8 <__multadd>
 8006eec:	4641      	mov	r1, r8
 8006eee:	4606      	mov	r6, r0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	220a      	movs	r2, #10
 8006ef4:	4650      	mov	r0, sl
 8006ef6:	f000 fd57 	bl	80079a8 <__multadd>
 8006efa:	4680      	mov	r8, r0
 8006efc:	e77b      	b.n	8006df6 <_dtoa_r+0x93e>
 8006efe:	2300      	movs	r3, #0
 8006f00:	220a      	movs	r2, #10
 8006f02:	9902      	ldr	r1, [sp, #8]
 8006f04:	4650      	mov	r0, sl
 8006f06:	f000 fd4f 	bl	80079a8 <__multadd>
 8006f0a:	9002      	str	r0, [sp, #8]
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	9802      	ldr	r0, [sp, #8]
 8006f10:	f7ff fa40 	bl	8006394 <quorem>
 8006f14:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8006f18:	f804 7b01 	strb.w	r7, [r4], #1
 8006f1c:	9b04      	ldr	r3, [sp, #16]
 8006f1e:	9a03      	ldr	r2, [sp, #12]
 8006f20:	1ae3      	subs	r3, r4, r3
 8006f22:	4293      	cmp	r3, r2
 8006f24:	dbeb      	blt.n	8006efe <_dtoa_r+0xa46>
 8006f26:	9b04      	ldr	r3, [sp, #16]
 8006f28:	2a01      	cmp	r2, #1
 8006f2a:	bfac      	ite	ge
 8006f2c:	189b      	addge	r3, r3, r2
 8006f2e:	3301      	addlt	r3, #1
 8006f30:	46b0      	mov	r8, r6
 8006f32:	4699      	mov	r9, r3
 8006f34:	2600      	movs	r6, #0
 8006f36:	2201      	movs	r2, #1
 8006f38:	9902      	ldr	r1, [sp, #8]
 8006f3a:	4650      	mov	r0, sl
 8006f3c:	f000 fea4 	bl	8007c88 <__lshift>
 8006f40:	4629      	mov	r1, r5
 8006f42:	9002      	str	r0, [sp, #8]
 8006f44:	f000 fef1 	bl	8007d2a <__mcmp>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	dc02      	bgt.n	8006f52 <_dtoa_r+0xa9a>
 8006f4c:	d115      	bne.n	8006f7a <_dtoa_r+0xac2>
 8006f4e:	07fb      	lsls	r3, r7, #31
 8006f50:	d513      	bpl.n	8006f7a <_dtoa_r+0xac2>
 8006f52:	464c      	mov	r4, r9
 8006f54:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006f58:	2b39      	cmp	r3, #57	; 0x39
 8006f5a:	f104 32ff 	add.w	r2, r4, #4294967295
 8006f5e:	d109      	bne.n	8006f74 <_dtoa_r+0xabc>
 8006f60:	9b04      	ldr	r3, [sp, #16]
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d104      	bne.n	8006f70 <_dtoa_r+0xab8>
 8006f66:	f10b 0b01 	add.w	fp, fp, #1
 8006f6a:	2331      	movs	r3, #49	; 0x31
 8006f6c:	9a04      	ldr	r2, [sp, #16]
 8006f6e:	e002      	b.n	8006f76 <_dtoa_r+0xabe>
 8006f70:	4614      	mov	r4, r2
 8006f72:	e7ef      	b.n	8006f54 <_dtoa_r+0xa9c>
 8006f74:	3301      	adds	r3, #1
 8006f76:	7013      	strb	r3, [r2, #0]
 8006f78:	e008      	b.n	8006f8c <_dtoa_r+0xad4>
 8006f7a:	464c      	mov	r4, r9
 8006f7c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006f80:	2b30      	cmp	r3, #48	; 0x30
 8006f82:	f104 32ff 	add.w	r2, r4, #4294967295
 8006f86:	d101      	bne.n	8006f8c <_dtoa_r+0xad4>
 8006f88:	4614      	mov	r4, r2
 8006f8a:	e7f7      	b.n	8006f7c <_dtoa_r+0xac4>
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	4650      	mov	r0, sl
 8006f90:	f000 fcf3 	bl	800797a <_Bfree>
 8006f94:	f1b8 0f00 	cmp.w	r8, #0
 8006f98:	d00d      	beq.n	8006fb6 <_dtoa_r+0xafe>
 8006f9a:	b12e      	cbz	r6, 8006fa8 <_dtoa_r+0xaf0>
 8006f9c:	4546      	cmp	r6, r8
 8006f9e:	d003      	beq.n	8006fa8 <_dtoa_r+0xaf0>
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	f000 fce9 	bl	800797a <_Bfree>
 8006fa8:	4641      	mov	r1, r8
 8006faa:	4650      	mov	r0, sl
 8006fac:	f000 fce5 	bl	800797a <_Bfree>
 8006fb0:	e001      	b.n	8006fb6 <_dtoa_r+0xafe>
 8006fb2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006fb6:	9902      	ldr	r1, [sp, #8]
 8006fb8:	4650      	mov	r0, sl
 8006fba:	f000 fcde 	bl	800797a <_Bfree>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fc2:	7023      	strb	r3, [r4, #0]
 8006fc4:	f10b 0301 	add.w	r3, fp, #1
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fcc:	b11b      	cbz	r3, 8006fd6 <_dtoa_r+0xb1e>
 8006fce:	601c      	str	r4, [r3, #0]
 8006fd0:	e001      	b.n	8006fd6 <_dtoa_r+0xb1e>
 8006fd2:	4808      	ldr	r0, [pc, #32]	; (8006ff4 <_dtoa_r+0xb3c>)
 8006fd4:	e00a      	b.n	8006fec <_dtoa_r+0xb34>
 8006fd6:	9804      	ldr	r0, [sp, #16]
 8006fd8:	e008      	b.n	8006fec <_dtoa_r+0xb34>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f73f aee1 	bgt.w	8006da4 <_dtoa_r+0x8ec>
 8006fe2:	9b06      	ldr	r3, [sp, #24]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	f77f aedd 	ble.w	8006da4 <_dtoa_r+0x8ec>
 8006fea:	e6b1      	b.n	8006d50 <_dtoa_r+0x898>
 8006fec:	b017      	add	sp, #92	; 0x5c
 8006fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff2:	bf00      	nop
 8006ff4:	08008df8 	.word	0x08008df8

08006ff8 <__sflush_r>:
 8006ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ffc:	b293      	uxth	r3, r2
 8006ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007002:	4605      	mov	r5, r0
 8007004:	0718      	lsls	r0, r3, #28
 8007006:	460c      	mov	r4, r1
 8007008:	d460      	bmi.n	80070cc <__sflush_r+0xd4>
 800700a:	684b      	ldr	r3, [r1, #4]
 800700c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007010:	2b00      	cmp	r3, #0
 8007012:	818a      	strh	r2, [r1, #12]
 8007014:	dc02      	bgt.n	800701c <__sflush_r+0x24>
 8007016:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007018:	2b00      	cmp	r3, #0
 800701a:	dd17      	ble.n	800704c <__sflush_r+0x54>
 800701c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800701e:	b1ae      	cbz	r6, 800704c <__sflush_r+0x54>
 8007020:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007024:	2300      	movs	r3, #0
 8007026:	b292      	uxth	r2, r2
 8007028:	682f      	ldr	r7, [r5, #0]
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	b10a      	cbz	r2, 8007032 <__sflush_r+0x3a>
 800702e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007030:	e015      	b.n	800705e <__sflush_r+0x66>
 8007032:	6a21      	ldr	r1, [r4, #32]
 8007034:	2301      	movs	r3, #1
 8007036:	4628      	mov	r0, r5
 8007038:	47b0      	blx	r6
 800703a:	1c41      	adds	r1, r0, #1
 800703c:	d10f      	bne.n	800705e <__sflush_r+0x66>
 800703e:	682b      	ldr	r3, [r5, #0]
 8007040:	b16b      	cbz	r3, 800705e <__sflush_r+0x66>
 8007042:	2b1d      	cmp	r3, #29
 8007044:	d001      	beq.n	800704a <__sflush_r+0x52>
 8007046:	2b16      	cmp	r3, #22
 8007048:	d103      	bne.n	8007052 <__sflush_r+0x5a>
 800704a:	602f      	str	r7, [r5, #0]
 800704c:	2000      	movs	r0, #0
 800704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007058:	81a3      	strh	r3, [r4, #12]
 800705a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	075a      	lsls	r2, r3, #29
 8007062:	d505      	bpl.n	8007070 <__sflush_r+0x78>
 8007064:	6863      	ldr	r3, [r4, #4]
 8007066:	1ac0      	subs	r0, r0, r3
 8007068:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800706a:	b10b      	cbz	r3, 8007070 <__sflush_r+0x78>
 800706c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800706e:	1ac0      	subs	r0, r0, r3
 8007070:	2300      	movs	r3, #0
 8007072:	4602      	mov	r2, r0
 8007074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007076:	6a21      	ldr	r1, [r4, #32]
 8007078:	4628      	mov	r0, r5
 800707a:	47b0      	blx	r6
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	d106      	bne.n	8007090 <__sflush_r+0x98>
 8007082:	6829      	ldr	r1, [r5, #0]
 8007084:	291d      	cmp	r1, #29
 8007086:	d83e      	bhi.n	8007106 <__sflush_r+0x10e>
 8007088:	4a22      	ldr	r2, [pc, #136]	; (8007114 <__sflush_r+0x11c>)
 800708a:	40ca      	lsrs	r2, r1
 800708c:	07d6      	lsls	r6, r2, #31
 800708e:	d53a      	bpl.n	8007106 <__sflush_r+0x10e>
 8007090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007094:	b21b      	sxth	r3, r3
 8007096:	2200      	movs	r2, #0
 8007098:	6062      	str	r2, [r4, #4]
 800709a:	04d9      	lsls	r1, r3, #19
 800709c:	6922      	ldr	r2, [r4, #16]
 800709e:	81a3      	strh	r3, [r4, #12]
 80070a0:	6022      	str	r2, [r4, #0]
 80070a2:	d504      	bpl.n	80070ae <__sflush_r+0xb6>
 80070a4:	1c42      	adds	r2, r0, #1
 80070a6:	d101      	bne.n	80070ac <__sflush_r+0xb4>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b903      	cbnz	r3, 80070ae <__sflush_r+0xb6>
 80070ac:	6560      	str	r0, [r4, #84]	; 0x54
 80070ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070b0:	602f      	str	r7, [r5, #0]
 80070b2:	2900      	cmp	r1, #0
 80070b4:	d0ca      	beq.n	800704c <__sflush_r+0x54>
 80070b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ba:	4299      	cmp	r1, r3
 80070bc:	d002      	beq.n	80070c4 <__sflush_r+0xcc>
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 f95c 	bl	800737c <_free_r>
 80070c4:	2000      	movs	r0, #0
 80070c6:	6360      	str	r0, [r4, #52]	; 0x34
 80070c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070cc:	690f      	ldr	r7, [r1, #16]
 80070ce:	2f00      	cmp	r7, #0
 80070d0:	d0bc      	beq.n	800704c <__sflush_r+0x54>
 80070d2:	079b      	lsls	r3, r3, #30
 80070d4:	680e      	ldr	r6, [r1, #0]
 80070d6:	bf08      	it	eq
 80070d8:	694b      	ldreq	r3, [r1, #20]
 80070da:	600f      	str	r7, [r1, #0]
 80070dc:	bf18      	it	ne
 80070de:	2300      	movne	r3, #0
 80070e0:	ebc7 0806 	rsb	r8, r7, r6
 80070e4:	608b      	str	r3, [r1, #8]
 80070e6:	e002      	b.n	80070ee <__sflush_r+0xf6>
 80070e8:	4407      	add	r7, r0
 80070ea:	ebc0 0808 	rsb	r8, r0, r8
 80070ee:	f1b8 0f00 	cmp.w	r8, #0
 80070f2:	ddab      	ble.n	800704c <__sflush_r+0x54>
 80070f4:	4643      	mov	r3, r8
 80070f6:	463a      	mov	r2, r7
 80070f8:	6a21      	ldr	r1, [r4, #32]
 80070fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b0      	blx	r6
 8007100:	2800      	cmp	r0, #0
 8007102:	dcf1      	bgt.n	80070e8 <__sflush_r+0xf0>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007114:	20400001 	.word	0x20400001

08007118 <_fflush_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	690b      	ldr	r3, [r1, #16]
 800711c:	4605      	mov	r5, r0
 800711e:	460c      	mov	r4, r1
 8007120:	b1db      	cbz	r3, 800715a <_fflush_r+0x42>
 8007122:	b118      	cbz	r0, 800712c <_fflush_r+0x14>
 8007124:	6983      	ldr	r3, [r0, #24]
 8007126:	b90b      	cbnz	r3, 800712c <_fflush_r+0x14>
 8007128:	f000 f860 	bl	80071ec <__sinit>
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <_fflush_r+0x48>)
 800712e:	429c      	cmp	r4, r3
 8007130:	d101      	bne.n	8007136 <_fflush_r+0x1e>
 8007132:	686c      	ldr	r4, [r5, #4]
 8007134:	e008      	b.n	8007148 <_fflush_r+0x30>
 8007136:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <_fflush_r+0x4c>)
 8007138:	429c      	cmp	r4, r3
 800713a:	d101      	bne.n	8007140 <_fflush_r+0x28>
 800713c:	68ac      	ldr	r4, [r5, #8]
 800713e:	e003      	b.n	8007148 <_fflush_r+0x30>
 8007140:	4b09      	ldr	r3, [pc, #36]	; (8007168 <_fflush_r+0x50>)
 8007142:	429c      	cmp	r4, r3
 8007144:	bf08      	it	eq
 8007146:	68ec      	ldreq	r4, [r5, #12]
 8007148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800714c:	b12b      	cbz	r3, 800715a <_fflush_r+0x42>
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007156:	f7ff bf4f 	b.w	8006ff8 <__sflush_r>
 800715a:	2000      	movs	r0, #0
 800715c:	bd38      	pop	{r3, r4, r5, pc}
 800715e:	bf00      	nop
 8007160:	08008e18 	.word	0x08008e18
 8007164:	08008e38 	.word	0x08008e38
 8007168:	08008e58 	.word	0x08008e58

0800716c <_cleanup_r>:
 800716c:	4901      	ldr	r1, [pc, #4]	; (8007174 <_cleanup_r+0x8>)
 800716e:	f000 bb0d 	b.w	800778c <_fwalk_reent>
 8007172:	bf00      	nop
 8007174:	080084c1 	.word	0x080084c1

08007178 <std.isra.0>:
 8007178:	2300      	movs	r3, #0
 800717a:	b510      	push	{r4, lr}
 800717c:	4604      	mov	r4, r0
 800717e:	6003      	str	r3, [r0, #0]
 8007180:	6043      	str	r3, [r0, #4]
 8007182:	6083      	str	r3, [r0, #8]
 8007184:	8181      	strh	r1, [r0, #12]
 8007186:	6643      	str	r3, [r0, #100]	; 0x64
 8007188:	81c2      	strh	r2, [r0, #14]
 800718a:	6103      	str	r3, [r0, #16]
 800718c:	6143      	str	r3, [r0, #20]
 800718e:	6183      	str	r3, [r0, #24]
 8007190:	4619      	mov	r1, r3
 8007192:	2208      	movs	r2, #8
 8007194:	305c      	adds	r0, #92	; 0x5c
 8007196:	f000 fbb3 	bl	8007900 <memset>
 800719a:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <std.isra.0+0x38>)
 800719c:	6263      	str	r3, [r4, #36]	; 0x24
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <std.isra.0+0x3c>)
 80071a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071a2:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <std.isra.0+0x40>)
 80071a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071a6:	4b05      	ldr	r3, [pc, #20]	; (80071bc <std.isra.0+0x44>)
 80071a8:	6224      	str	r4, [r4, #32]
 80071aa:	6323      	str	r3, [r4, #48]	; 0x30
 80071ac:	bd10      	pop	{r4, pc}
 80071ae:	bf00      	nop
 80071b0:	08008279 	.word	0x08008279
 80071b4:	0800829b 	.word	0x0800829b
 80071b8:	080082d3 	.word	0x080082d3
 80071bc:	080082f7 	.word	0x080082f7

080071c0 <__sfmoreglue>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	2368      	movs	r3, #104	; 0x68
 80071c4:	1e4d      	subs	r5, r1, #1
 80071c6:	435d      	muls	r5, r3
 80071c8:	460e      	mov	r6, r1
 80071ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071ce:	f7fd fd91 	bl	8004cf4 <_malloc_r>
 80071d2:	4604      	mov	r4, r0
 80071d4:	b140      	cbz	r0, 80071e8 <__sfmoreglue+0x28>
 80071d6:	2100      	movs	r1, #0
 80071d8:	e880 0042 	stmia.w	r0, {r1, r6}
 80071dc:	300c      	adds	r0, #12
 80071de:	60a0      	str	r0, [r4, #8]
 80071e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071e4:	f000 fb8c 	bl	8007900 <memset>
 80071e8:	4620      	mov	r0, r4
 80071ea:	bd70      	pop	{r4, r5, r6, pc}

080071ec <__sinit>:
 80071ec:	6983      	ldr	r3, [r0, #24]
 80071ee:	b510      	push	{r4, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	bb4b      	cbnz	r3, 8007248 <__sinit+0x5c>
 80071f4:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 80071f8:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 80071fc:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8007200:	4b12      	ldr	r3, [pc, #72]	; (800724c <__sinit+0x60>)
 8007202:	4a13      	ldr	r2, [pc, #76]	; (8007250 <__sinit+0x64>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6282      	str	r2, [r0, #40]	; 0x28
 8007208:	4298      	cmp	r0, r3
 800720a:	bf04      	itt	eq
 800720c:	2301      	moveq	r3, #1
 800720e:	6183      	streq	r3, [r0, #24]
 8007210:	f000 f820 	bl	8007254 <__sfp>
 8007214:	6060      	str	r0, [r4, #4]
 8007216:	4620      	mov	r0, r4
 8007218:	f000 f81c 	bl	8007254 <__sfp>
 800721c:	60a0      	str	r0, [r4, #8]
 800721e:	4620      	mov	r0, r4
 8007220:	f000 f818 	bl	8007254 <__sfp>
 8007224:	2200      	movs	r2, #0
 8007226:	60e0      	str	r0, [r4, #12]
 8007228:	2104      	movs	r1, #4
 800722a:	6860      	ldr	r0, [r4, #4]
 800722c:	f7ff ffa4 	bl	8007178 <std.isra.0>
 8007230:	2201      	movs	r2, #1
 8007232:	2109      	movs	r1, #9
 8007234:	68a0      	ldr	r0, [r4, #8]
 8007236:	f7ff ff9f 	bl	8007178 <std.isra.0>
 800723a:	2202      	movs	r2, #2
 800723c:	2112      	movs	r1, #18
 800723e:	68e0      	ldr	r0, [r4, #12]
 8007240:	f7ff ff9a 	bl	8007178 <std.isra.0>
 8007244:	2301      	movs	r3, #1
 8007246:	61a3      	str	r3, [r4, #24]
 8007248:	bd10      	pop	{r4, pc}
 800724a:	bf00      	nop
 800724c:	08008e7c 	.word	0x08008e7c
 8007250:	0800716d 	.word	0x0800716d

08007254 <__sfp>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	4b1c      	ldr	r3, [pc, #112]	; (80072c8 <__sfp+0x74>)
 8007258:	681e      	ldr	r6, [r3, #0]
 800725a:	69b3      	ldr	r3, [r6, #24]
 800725c:	4607      	mov	r7, r0
 800725e:	b913      	cbnz	r3, 8007266 <__sfp+0x12>
 8007260:	4630      	mov	r0, r6
 8007262:	f7ff ffc3 	bl	80071ec <__sinit>
 8007266:	36d8      	adds	r6, #216	; 0xd8
 8007268:	68b4      	ldr	r4, [r6, #8]
 800726a:	6873      	ldr	r3, [r6, #4]
 800726c:	3b01      	subs	r3, #1
 800726e:	d404      	bmi.n	800727a <__sfp+0x26>
 8007270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007274:	b17d      	cbz	r5, 8007296 <__sfp+0x42>
 8007276:	3468      	adds	r4, #104	; 0x68
 8007278:	e7f8      	b.n	800726c <__sfp+0x18>
 800727a:	6833      	ldr	r3, [r6, #0]
 800727c:	b10b      	cbz	r3, 8007282 <__sfp+0x2e>
 800727e:	6836      	ldr	r6, [r6, #0]
 8007280:	e7f2      	b.n	8007268 <__sfp+0x14>
 8007282:	2104      	movs	r1, #4
 8007284:	4638      	mov	r0, r7
 8007286:	f7ff ff9b 	bl	80071c0 <__sfmoreglue>
 800728a:	6030      	str	r0, [r6, #0]
 800728c:	2800      	cmp	r0, #0
 800728e:	d1f6      	bne.n	800727e <__sfp+0x2a>
 8007290:	230c      	movs	r3, #12
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800729a:	81e3      	strh	r3, [r4, #14]
 800729c:	2301      	movs	r3, #1
 800729e:	81a3      	strh	r3, [r4, #12]
 80072a0:	6665      	str	r5, [r4, #100]	; 0x64
 80072a2:	6025      	str	r5, [r4, #0]
 80072a4:	60a5      	str	r5, [r4, #8]
 80072a6:	6065      	str	r5, [r4, #4]
 80072a8:	6125      	str	r5, [r4, #16]
 80072aa:	6165      	str	r5, [r4, #20]
 80072ac:	61a5      	str	r5, [r4, #24]
 80072ae:	2208      	movs	r2, #8
 80072b0:	4629      	mov	r1, r5
 80072b2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072b6:	f000 fb23 	bl	8007900 <memset>
 80072ba:	6365      	str	r5, [r4, #52]	; 0x34
 80072bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80072be:	64a5      	str	r5, [r4, #72]	; 0x48
 80072c0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80072c2:	4620      	mov	r0, r4
 80072c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c6:	bf00      	nop
 80072c8:	08008e7c 	.word	0x08008e7c

080072cc <__sfp_lock_acquire>:
 80072cc:	4770      	bx	lr

080072ce <__sfp_lock_release>:
 80072ce:	4770      	bx	lr

080072d0 <_malloc_trim_r>:
 80072d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d4:	4f25      	ldr	r7, [pc, #148]	; (800736c <_malloc_trim_r+0x9c>)
 80072d6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007378 <_malloc_trim_r+0xa8>
 80072da:	4689      	mov	r9, r1
 80072dc:	4606      	mov	r6, r0
 80072de:	f7fd ff29 	bl	8005134 <__malloc_lock>
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	685d      	ldr	r5, [r3, #4]
 80072e6:	f1a8 0411 	sub.w	r4, r8, #17
 80072ea:	f025 0503 	bic.w	r5, r5, #3
 80072ee:	442c      	add	r4, r5
 80072f0:	ebc9 0404 	rsb	r4, r9, r4
 80072f4:	fbb4 f4f8 	udiv	r4, r4, r8
 80072f8:	3c01      	subs	r4, #1
 80072fa:	fb08 f404 	mul.w	r4, r8, r4
 80072fe:	4544      	cmp	r4, r8
 8007300:	da05      	bge.n	800730e <_malloc_trim_r+0x3e>
 8007302:	4630      	mov	r0, r6
 8007304:	f7fd ff17 	bl	8005136 <__malloc_unlock>
 8007308:	2000      	movs	r0, #0
 800730a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730e:	2100      	movs	r1, #0
 8007310:	4630      	mov	r0, r6
 8007312:	f7fd ff91 	bl	8005238 <_sbrk_r>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	442b      	add	r3, r5
 800731a:	4298      	cmp	r0, r3
 800731c:	d1f1      	bne.n	8007302 <_malloc_trim_r+0x32>
 800731e:	4261      	negs	r1, r4
 8007320:	4630      	mov	r0, r6
 8007322:	f7fd ff89 	bl	8005238 <_sbrk_r>
 8007326:	3001      	adds	r0, #1
 8007328:	d110      	bne.n	800734c <_malloc_trim_r+0x7c>
 800732a:	2100      	movs	r1, #0
 800732c:	4630      	mov	r0, r6
 800732e:	f7fd ff83 	bl	8005238 <_sbrk_r>
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	1a83      	subs	r3, r0, r2
 8007336:	2b0f      	cmp	r3, #15
 8007338:	dde3      	ble.n	8007302 <_malloc_trim_r+0x32>
 800733a:	490d      	ldr	r1, [pc, #52]	; (8007370 <_malloc_trim_r+0xa0>)
 800733c:	6809      	ldr	r1, [r1, #0]
 800733e:	1a40      	subs	r0, r0, r1
 8007340:	490c      	ldr	r1, [pc, #48]	; (8007374 <_malloc_trim_r+0xa4>)
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	6008      	str	r0, [r1, #0]
 8007348:	6053      	str	r3, [r2, #4]
 800734a:	e7da      	b.n	8007302 <_malloc_trim_r+0x32>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4a09      	ldr	r2, [pc, #36]	; (8007374 <_malloc_trim_r+0xa4>)
 8007350:	1b2d      	subs	r5, r5, r4
 8007352:	f045 0501 	orr.w	r5, r5, #1
 8007356:	605d      	str	r5, [r3, #4]
 8007358:	6813      	ldr	r3, [r2, #0]
 800735a:	4630      	mov	r0, r6
 800735c:	1b1c      	subs	r4, r3, r4
 800735e:	6014      	str	r4, [r2, #0]
 8007360:	f7fd fee9 	bl	8005136 <__malloc_unlock>
 8007364:	2001      	movs	r0, #1
 8007366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736a:	bf00      	nop
 800736c:	20000024 	.word	0x20000024
 8007370:	20000430 	.word	0x20000430
 8007374:	200005b4 	.word	0x200005b4
 8007378:	00000080 	.word	0x00000080

0800737c <_free_r>:
 800737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007380:	4604      	mov	r4, r0
 8007382:	4688      	mov	r8, r1
 8007384:	2900      	cmp	r1, #0
 8007386:	f000 80ad 	beq.w	80074e4 <_free_r+0x168>
 800738a:	f7fd fed3 	bl	8005134 <__malloc_lock>
 800738e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007392:	4d55      	ldr	r5, [pc, #340]	; (80074e8 <_free_r+0x16c>)
 8007394:	f022 0001 	bic.w	r0, r2, #1
 8007398:	f1a8 0308 	sub.w	r3, r8, #8
 800739c:	181f      	adds	r7, r3, r0
 800739e:	68a9      	ldr	r1, [r5, #8]
 80073a0:	687e      	ldr	r6, [r7, #4]
 80073a2:	428f      	cmp	r7, r1
 80073a4:	f026 0603 	bic.w	r6, r6, #3
 80073a8:	f002 0201 	and.w	r2, r2, #1
 80073ac:	d11b      	bne.n	80073e6 <_free_r+0x6a>
 80073ae:	4430      	add	r0, r6
 80073b0:	b93a      	cbnz	r2, 80073c2 <_free_r+0x46>
 80073b2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	4410      	add	r0, r2
 80073ba:	6899      	ldr	r1, [r3, #8]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	60ca      	str	r2, [r1, #12]
 80073c0:	6091      	str	r1, [r2, #8]
 80073c2:	f040 0201 	orr.w	r2, r0, #1
 80073c6:	605a      	str	r2, [r3, #4]
 80073c8:	60ab      	str	r3, [r5, #8]
 80073ca:	4b48      	ldr	r3, [pc, #288]	; (80074ec <_free_r+0x170>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4298      	cmp	r0, r3
 80073d0:	d304      	bcc.n	80073dc <_free_r+0x60>
 80073d2:	4b47      	ldr	r3, [pc, #284]	; (80074f0 <_free_r+0x174>)
 80073d4:	4620      	mov	r0, r4
 80073d6:	6819      	ldr	r1, [r3, #0]
 80073d8:	f7ff ff7a 	bl	80072d0 <_malloc_trim_r>
 80073dc:	4620      	mov	r0, r4
 80073de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073e2:	f7fd bea8 	b.w	8005136 <__malloc_unlock>
 80073e6:	607e      	str	r6, [r7, #4]
 80073e8:	b97a      	cbnz	r2, 800740a <_free_r+0x8e>
 80073ea:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80073ee:	1a5b      	subs	r3, r3, r1
 80073f0:	4408      	add	r0, r1
 80073f2:	6899      	ldr	r1, [r3, #8]
 80073f4:	f105 0e08 	add.w	lr, r5, #8
 80073f8:	4571      	cmp	r1, lr
 80073fa:	d008      	beq.n	800740e <_free_r+0x92>
 80073fc:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8007400:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007404:	f8ce 1008 	str.w	r1, [lr, #8]
 8007408:	e002      	b.n	8007410 <_free_r+0x94>
 800740a:	2200      	movs	r2, #0
 800740c:	e000      	b.n	8007410 <_free_r+0x94>
 800740e:	2201      	movs	r2, #1
 8007410:	19b9      	adds	r1, r7, r6
 8007412:	6849      	ldr	r1, [r1, #4]
 8007414:	07c9      	lsls	r1, r1, #31
 8007416:	d40e      	bmi.n	8007436 <_free_r+0xba>
 8007418:	4430      	add	r0, r6
 800741a:	68b9      	ldr	r1, [r7, #8]
 800741c:	b942      	cbnz	r2, 8007430 <_free_r+0xb4>
 800741e:	4e35      	ldr	r6, [pc, #212]	; (80074f4 <_free_r+0x178>)
 8007420:	42b1      	cmp	r1, r6
 8007422:	d105      	bne.n	8007430 <_free_r+0xb4>
 8007424:	616b      	str	r3, [r5, #20]
 8007426:	612b      	str	r3, [r5, #16]
 8007428:	2201      	movs	r2, #1
 800742a:	60d9      	str	r1, [r3, #12]
 800742c:	6099      	str	r1, [r3, #8]
 800742e:	e002      	b.n	8007436 <_free_r+0xba>
 8007430:	68fe      	ldr	r6, [r7, #12]
 8007432:	60ce      	str	r6, [r1, #12]
 8007434:	60b1      	str	r1, [r6, #8]
 8007436:	f040 0101 	orr.w	r1, r0, #1
 800743a:	6059      	str	r1, [r3, #4]
 800743c:	5018      	str	r0, [r3, r0]
 800743e:	2a00      	cmp	r2, #0
 8007440:	d1cc      	bne.n	80073dc <_free_r+0x60>
 8007442:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007446:	d212      	bcs.n	800746e <_free_r+0xf2>
 8007448:	08c0      	lsrs	r0, r0, #3
 800744a:	1081      	asrs	r1, r0, #2
 800744c:	2201      	movs	r2, #1
 800744e:	fa02 f101 	lsl.w	r1, r2, r1
 8007452:	686a      	ldr	r2, [r5, #4]
 8007454:	3001      	adds	r0, #1
 8007456:	430a      	orrs	r2, r1
 8007458:	606a      	str	r2, [r5, #4]
 800745a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800745e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8007462:	6099      	str	r1, [r3, #8]
 8007464:	3a08      	subs	r2, #8
 8007466:	60da      	str	r2, [r3, #12]
 8007468:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800746c:	e038      	b.n	80074e0 <_free_r+0x164>
 800746e:	0a42      	lsrs	r2, r0, #9
 8007470:	2a04      	cmp	r2, #4
 8007472:	d802      	bhi.n	800747a <_free_r+0xfe>
 8007474:	0982      	lsrs	r2, r0, #6
 8007476:	3238      	adds	r2, #56	; 0x38
 8007478:	e015      	b.n	80074a6 <_free_r+0x12a>
 800747a:	2a14      	cmp	r2, #20
 800747c:	d801      	bhi.n	8007482 <_free_r+0x106>
 800747e:	325b      	adds	r2, #91	; 0x5b
 8007480:	e011      	b.n	80074a6 <_free_r+0x12a>
 8007482:	2a54      	cmp	r2, #84	; 0x54
 8007484:	d802      	bhi.n	800748c <_free_r+0x110>
 8007486:	0b02      	lsrs	r2, r0, #12
 8007488:	326e      	adds	r2, #110	; 0x6e
 800748a:	e00c      	b.n	80074a6 <_free_r+0x12a>
 800748c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007490:	d802      	bhi.n	8007498 <_free_r+0x11c>
 8007492:	0bc2      	lsrs	r2, r0, #15
 8007494:	3277      	adds	r2, #119	; 0x77
 8007496:	e006      	b.n	80074a6 <_free_r+0x12a>
 8007498:	f240 5154 	movw	r1, #1364	; 0x554
 800749c:	428a      	cmp	r2, r1
 800749e:	bf9a      	itte	ls
 80074a0:	0c82      	lsrls	r2, r0, #18
 80074a2:	327c      	addls	r2, #124	; 0x7c
 80074a4:	227e      	movhi	r2, #126	; 0x7e
 80074a6:	1c51      	adds	r1, r2, #1
 80074a8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80074ac:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80074b0:	4f0d      	ldr	r7, [pc, #52]	; (80074e8 <_free_r+0x16c>)
 80074b2:	428e      	cmp	r6, r1
 80074b4:	d10b      	bne.n	80074ce <_free_r+0x152>
 80074b6:	2101      	movs	r1, #1
 80074b8:	1092      	asrs	r2, r2, #2
 80074ba:	fa01 f202 	lsl.w	r2, r1, r2
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4311      	orrs	r1, r2
 80074c2:	6079      	str	r1, [r7, #4]
 80074c4:	4631      	mov	r1, r6
 80074c6:	e008      	b.n	80074da <_free_r+0x15e>
 80074c8:	6889      	ldr	r1, [r1, #8]
 80074ca:	428e      	cmp	r6, r1
 80074cc:	d004      	beq.n	80074d8 <_free_r+0x15c>
 80074ce:	684a      	ldr	r2, [r1, #4]
 80074d0:	f022 0203 	bic.w	r2, r2, #3
 80074d4:	4290      	cmp	r0, r2
 80074d6:	d3f7      	bcc.n	80074c8 <_free_r+0x14c>
 80074d8:	68ce      	ldr	r6, [r1, #12]
 80074da:	60de      	str	r6, [r3, #12]
 80074dc:	6099      	str	r1, [r3, #8]
 80074de:	60b3      	str	r3, [r6, #8]
 80074e0:	60cb      	str	r3, [r1, #12]
 80074e2:	e77b      	b.n	80073dc <_free_r+0x60>
 80074e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e8:	20000024 	.word	0x20000024
 80074ec:	2000042c 	.word	0x2000042c
 80074f0:	200005b0 	.word	0x200005b0
 80074f4:	2000002c 	.word	0x2000002c

080074f8 <__sfvwrite_r>:
 80074f8:	6893      	ldr	r3, [r2, #8]
 80074fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fe:	4606      	mov	r6, r0
 8007500:	460c      	mov	r4, r1
 8007502:	4690      	mov	r8, r2
 8007504:	b90b      	cbnz	r3, 800750a <__sfvwrite_r+0x12>
 8007506:	2000      	movs	r0, #0
 8007508:	e13b      	b.n	8007782 <__sfvwrite_r+0x28a>
 800750a:	898b      	ldrh	r3, [r1, #12]
 800750c:	0718      	lsls	r0, r3, #28
 800750e:	d50f      	bpl.n	8007530 <__sfvwrite_r+0x38>
 8007510:	690b      	ldr	r3, [r1, #16]
 8007512:	b16b      	cbz	r3, 8007530 <__sfvwrite_r+0x38>
 8007514:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 8007518:	f8d8 b000 	ldr.w	fp, [r8]
 800751c:	f009 0502 	and.w	r5, r9, #2
 8007520:	b2ad      	uxth	r5, r5
 8007522:	b355      	cbz	r5, 800757a <__sfvwrite_r+0x82>
 8007524:	f04f 0900 	mov.w	r9, #0
 8007528:	464f      	mov	r7, r9
 800752a:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8007788 <__sfvwrite_r+0x290>
 800752e:	e01b      	b.n	8007568 <__sfvwrite_r+0x70>
 8007530:	4621      	mov	r1, r4
 8007532:	4630      	mov	r0, r6
 8007534:	f7fe fec0 	bl	80062b8 <__swsetup_r>
 8007538:	2800      	cmp	r0, #0
 800753a:	d0eb      	beq.n	8007514 <__sfvwrite_r+0x1c>
 800753c:	e11f      	b.n	800777e <__sfvwrite_r+0x286>
 800753e:	4557      	cmp	r7, sl
 8007540:	463b      	mov	r3, r7
 8007542:	464a      	mov	r2, r9
 8007544:	bf28      	it	cs
 8007546:	4653      	movcs	r3, sl
 8007548:	6a21      	ldr	r1, [r4, #32]
 800754a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800754c:	4630      	mov	r0, r6
 800754e:	47a8      	blx	r5
 8007550:	2800      	cmp	r0, #0
 8007552:	f340 8110 	ble.w	8007776 <__sfvwrite_r+0x27e>
 8007556:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800755a:	4481      	add	r9, r0
 800755c:	1a3f      	subs	r7, r7, r0
 800755e:	1a18      	subs	r0, r3, r0
 8007560:	f8c8 0008 	str.w	r0, [r8, #8]
 8007564:	2800      	cmp	r0, #0
 8007566:	d0ce      	beq.n	8007506 <__sfvwrite_r+0xe>
 8007568:	2f00      	cmp	r7, #0
 800756a:	d1e8      	bne.n	800753e <__sfvwrite_r+0x46>
 800756c:	f8db 9000 	ldr.w	r9, [fp]
 8007570:	f8db 7004 	ldr.w	r7, [fp, #4]
 8007574:	f10b 0b08 	add.w	fp, fp, #8
 8007578:	e7f6      	b.n	8007568 <__sfvwrite_r+0x70>
 800757a:	f019 0901 	ands.w	r9, r9, #1
 800757e:	d003      	beq.n	8007588 <__sfvwrite_r+0x90>
 8007580:	9500      	str	r5, [sp, #0]
 8007582:	46a9      	mov	r9, r5
 8007584:	46aa      	mov	sl, r5
 8007586:	e0bd      	b.n	8007704 <__sfvwrite_r+0x20c>
 8007588:	464f      	mov	r7, r9
 800758a:	b937      	cbnz	r7, 800759a <__sfvwrite_r+0xa2>
 800758c:	f8db 9000 	ldr.w	r9, [fp]
 8007590:	f8db 7004 	ldr.w	r7, [fp, #4]
 8007594:	f10b 0b08 	add.w	fp, fp, #8
 8007598:	e7f7      	b.n	800758a <__sfvwrite_r+0x92>
 800759a:	89a2      	ldrh	r2, [r4, #12]
 800759c:	68a5      	ldr	r5, [r4, #8]
 800759e:	0591      	lsls	r1, r2, #22
 80075a0:	d552      	bpl.n	8007648 <__sfvwrite_r+0x150>
 80075a2:	42af      	cmp	r7, r5
 80075a4:	d342      	bcc.n	800762c <__sfvwrite_r+0x134>
 80075a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075aa:	d03d      	beq.n	8007628 <__sfvwrite_r+0x130>
 80075ac:	6921      	ldr	r1, [r4, #16]
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	1a5b      	subs	r3, r3, r1
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	6963      	ldr	r3, [r4, #20]
 80075b6:	2002      	movs	r0, #2
 80075b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80075bc:	fb93 faf0 	sdiv	sl, r3, r0
 80075c0:	9b00      	ldr	r3, [sp, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	443b      	add	r3, r7
 80075c6:	459a      	cmp	sl, r3
 80075c8:	bf38      	it	cc
 80075ca:	469a      	movcc	sl, r3
 80075cc:	0553      	lsls	r3, r2, #21
 80075ce:	d510      	bpl.n	80075f2 <__sfvwrite_r+0xfa>
 80075d0:	4651      	mov	r1, sl
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7fd fb8e 	bl	8004cf4 <_malloc_r>
 80075d8:	4605      	mov	r5, r0
 80075da:	b1c0      	cbz	r0, 800760e <__sfvwrite_r+0x116>
 80075dc:	9a00      	ldr	r2, [sp, #0]
 80075de:	6921      	ldr	r1, [r4, #16]
 80075e0:	f000 f968 	bl	80078b4 <memcpy>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ee:	81a3      	strh	r3, [r4, #12]
 80075f0:	e010      	b.n	8007614 <__sfvwrite_r+0x11c>
 80075f2:	4652      	mov	r2, sl
 80075f4:	4630      	mov	r0, r6
 80075f6:	f000 fc97 	bl	8007f28 <_realloc_r>
 80075fa:	4605      	mov	r5, r0
 80075fc:	b950      	cbnz	r0, 8007614 <__sfvwrite_r+0x11c>
 80075fe:	6921      	ldr	r1, [r4, #16]
 8007600:	4630      	mov	r0, r6
 8007602:	f7ff febb 	bl	800737c <_free_r>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	230c      	movs	r3, #12
 8007610:	6033      	str	r3, [r6, #0]
 8007612:	e0b0      	b.n	8007776 <__sfvwrite_r+0x27e>
 8007614:	9b00      	ldr	r3, [sp, #0]
 8007616:	6125      	str	r5, [r4, #16]
 8007618:	441d      	add	r5, r3
 800761a:	ebc3 030a 	rsb	r3, r3, sl
 800761e:	6025      	str	r5, [r4, #0]
 8007620:	f8c4 a014 	str.w	sl, [r4, #20]
 8007624:	463d      	mov	r5, r7
 8007626:	60a3      	str	r3, [r4, #8]
 8007628:	42af      	cmp	r7, r5
 800762a:	d200      	bcs.n	800762e <__sfvwrite_r+0x136>
 800762c:	463d      	mov	r5, r7
 800762e:	462a      	mov	r2, r5
 8007630:	4649      	mov	r1, r9
 8007632:	6820      	ldr	r0, [r4, #0]
 8007634:	f000 f949 	bl	80078ca <memmove>
 8007638:	68a3      	ldr	r3, [r4, #8]
 800763a:	1b5b      	subs	r3, r3, r5
 800763c:	60a3      	str	r3, [r4, #8]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	441d      	add	r5, r3
 8007642:	6025      	str	r5, [r4, #0]
 8007644:	463d      	mov	r5, r7
 8007646:	e029      	b.n	800769c <__sfvwrite_r+0x1a4>
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	4298      	cmp	r0, r3
 800764e:	d802      	bhi.n	8007656 <__sfvwrite_r+0x15e>
 8007650:	6962      	ldr	r2, [r4, #20]
 8007652:	4297      	cmp	r7, r2
 8007654:	d213      	bcs.n	800767e <__sfvwrite_r+0x186>
 8007656:	42bd      	cmp	r5, r7
 8007658:	bf28      	it	cs
 800765a:	463d      	movcs	r5, r7
 800765c:	462a      	mov	r2, r5
 800765e:	4649      	mov	r1, r9
 8007660:	f000 f933 	bl	80078ca <memmove>
 8007664:	68a3      	ldr	r3, [r4, #8]
 8007666:	6822      	ldr	r2, [r4, #0]
 8007668:	1b5b      	subs	r3, r3, r5
 800766a:	442a      	add	r2, r5
 800766c:	60a3      	str	r3, [r4, #8]
 800766e:	6022      	str	r2, [r4, #0]
 8007670:	b9a3      	cbnz	r3, 800769c <__sfvwrite_r+0x1a4>
 8007672:	4621      	mov	r1, r4
 8007674:	4630      	mov	r0, r6
 8007676:	f7ff fd4f 	bl	8007118 <_fflush_r>
 800767a:	b178      	cbz	r0, 800769c <__sfvwrite_r+0x1a4>
 800767c:	e07b      	b.n	8007776 <__sfvwrite_r+0x27e>
 800767e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007682:	42bb      	cmp	r3, r7
 8007684:	bf28      	it	cs
 8007686:	463b      	movcs	r3, r7
 8007688:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800768a:	fb93 f3f2 	sdiv	r3, r3, r2
 800768e:	6a21      	ldr	r1, [r4, #32]
 8007690:	4353      	muls	r3, r2
 8007692:	4630      	mov	r0, r6
 8007694:	464a      	mov	r2, r9
 8007696:	47a8      	blx	r5
 8007698:	1e05      	subs	r5, r0, #0
 800769a:	dd6c      	ble.n	8007776 <__sfvwrite_r+0x27e>
 800769c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076a0:	44a9      	add	r9, r5
 80076a2:	1b7f      	subs	r7, r7, r5
 80076a4:	1b5d      	subs	r5, r3, r5
 80076a6:	f8c8 5008 	str.w	r5, [r8, #8]
 80076aa:	2d00      	cmp	r5, #0
 80076ac:	f47f af6d 	bne.w	800758a <__sfvwrite_r+0x92>
 80076b0:	e729      	b.n	8007506 <__sfvwrite_r+0xe>
 80076b2:	9b00      	ldr	r3, [sp, #0]
 80076b4:	b383      	cbz	r3, 8007718 <__sfvwrite_r+0x220>
 80076b6:	6820      	ldr	r0, [r4, #0]
 80076b8:	6921      	ldr	r1, [r4, #16]
 80076ba:	6962      	ldr	r2, [r4, #20]
 80076bc:	4555      	cmp	r5, sl
 80076be:	462b      	mov	r3, r5
 80076c0:	bf28      	it	cs
 80076c2:	4653      	movcs	r3, sl
 80076c4:	4288      	cmp	r0, r1
 80076c6:	d936      	bls.n	8007736 <__sfvwrite_r+0x23e>
 80076c8:	68a7      	ldr	r7, [r4, #8]
 80076ca:	4417      	add	r7, r2
 80076cc:	42bb      	cmp	r3, r7
 80076ce:	dd32      	ble.n	8007736 <__sfvwrite_r+0x23e>
 80076d0:	4649      	mov	r1, r9
 80076d2:	463a      	mov	r2, r7
 80076d4:	f000 f8f9 	bl	80078ca <memmove>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	443b      	add	r3, r7
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	4621      	mov	r1, r4
 80076e0:	4630      	mov	r0, r6
 80076e2:	f7ff fd19 	bl	8007118 <_fflush_r>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d145      	bne.n	8007776 <__sfvwrite_r+0x27e>
 80076ea:	1bed      	subs	r5, r5, r7
 80076ec:	d03c      	beq.n	8007768 <__sfvwrite_r+0x270>
 80076ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076f2:	44b9      	add	r9, r7
 80076f4:	ebc7 0a0a 	rsb	sl, r7, sl
 80076f8:	1bdf      	subs	r7, r3, r7
 80076fa:	f8c8 7008 	str.w	r7, [r8, #8]
 80076fe:	2f00      	cmp	r7, #0
 8007700:	f43f af01 	beq.w	8007506 <__sfvwrite_r+0xe>
 8007704:	f1ba 0f00 	cmp.w	sl, #0
 8007708:	d1d3      	bne.n	80076b2 <__sfvwrite_r+0x1ba>
 800770a:	2300      	movs	r3, #0
 800770c:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	f10b 0b08 	add.w	fp, fp, #8
 8007716:	e7f5      	b.n	8007704 <__sfvwrite_r+0x20c>
 8007718:	4652      	mov	r2, sl
 800771a:	210a      	movs	r1, #10
 800771c:	4648      	mov	r0, r9
 800771e:	f7f8 fd5f 	bl	80001e0 <memchr>
 8007722:	b118      	cbz	r0, 800772c <__sfvwrite_r+0x234>
 8007724:	3001      	adds	r0, #1
 8007726:	ebc9 0500 	rsb	r5, r9, r0
 800772a:	e001      	b.n	8007730 <__sfvwrite_r+0x238>
 800772c:	f10a 0501 	add.w	r5, sl, #1
 8007730:	2301      	movs	r3, #1
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	e7bf      	b.n	80076b6 <__sfvwrite_r+0x1be>
 8007736:	4293      	cmp	r3, r2
 8007738:	db08      	blt.n	800774c <__sfvwrite_r+0x254>
 800773a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800773c:	6a21      	ldr	r1, [r4, #32]
 800773e:	4613      	mov	r3, r2
 8007740:	4630      	mov	r0, r6
 8007742:	464a      	mov	r2, r9
 8007744:	47b8      	blx	r7
 8007746:	1e07      	subs	r7, r0, #0
 8007748:	dccf      	bgt.n	80076ea <__sfvwrite_r+0x1f2>
 800774a:	e014      	b.n	8007776 <__sfvwrite_r+0x27e>
 800774c:	461a      	mov	r2, r3
 800774e:	4649      	mov	r1, r9
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	f000 f8ba 	bl	80078ca <memmove>
 8007756:	9b01      	ldr	r3, [sp, #4]
 8007758:	68a2      	ldr	r2, [r4, #8]
 800775a:	1ad2      	subs	r2, r2, r3
 800775c:	60a2      	str	r2, [r4, #8]
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	441a      	add	r2, r3
 8007762:	6022      	str	r2, [r4, #0]
 8007764:	461f      	mov	r7, r3
 8007766:	e7c0      	b.n	80076ea <__sfvwrite_r+0x1f2>
 8007768:	4621      	mov	r1, r4
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff fcd4 	bl	8007118 <_fflush_r>
 8007770:	b908      	cbnz	r0, 8007776 <__sfvwrite_r+0x27e>
 8007772:	9500      	str	r5, [sp, #0]
 8007774:	e7bb      	b.n	80076ee <__sfvwrite_r+0x1f6>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800777c:	81a3      	strh	r3, [r4, #12]
 800777e:	f04f 30ff 	mov.w	r0, #4294967295
 8007782:	b003      	add	sp, #12
 8007784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007788:	7ffffc00 	.word	0x7ffffc00

0800778c <_fwalk_reent>:
 800778c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007790:	4680      	mov	r8, r0
 8007792:	4689      	mov	r9, r1
 8007794:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8007798:	2600      	movs	r6, #0
 800779a:	b194      	cbz	r4, 80077c2 <_fwalk_reent+0x36>
 800779c:	68a5      	ldr	r5, [r4, #8]
 800779e:	6867      	ldr	r7, [r4, #4]
 80077a0:	3f01      	subs	r7, #1
 80077a2:	d40c      	bmi.n	80077be <_fwalk_reent+0x32>
 80077a4:	89ab      	ldrh	r3, [r5, #12]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d907      	bls.n	80077ba <_fwalk_reent+0x2e>
 80077aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077ae:	3301      	adds	r3, #1
 80077b0:	d003      	beq.n	80077ba <_fwalk_reent+0x2e>
 80077b2:	4629      	mov	r1, r5
 80077b4:	4640      	mov	r0, r8
 80077b6:	47c8      	blx	r9
 80077b8:	4306      	orrs	r6, r0
 80077ba:	3568      	adds	r5, #104	; 0x68
 80077bc:	e7f0      	b.n	80077a0 <_fwalk_reent+0x14>
 80077be:	6824      	ldr	r4, [r4, #0]
 80077c0:	e7eb      	b.n	800779a <_fwalk_reent+0xe>
 80077c2:	4630      	mov	r0, r6
 80077c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080077c8 <__locale_charset>:
 80077c8:	4800      	ldr	r0, [pc, #0]	; (80077cc <__locale_charset+0x4>)
 80077ca:	4770      	bx	lr
 80077cc:	20000560 	.word	0x20000560

080077d0 <__locale_mb_cur_max>:
 80077d0:	4b01      	ldr	r3, [pc, #4]	; (80077d8 <__locale_mb_cur_max+0x8>)
 80077d2:	6818      	ldr	r0, [r3, #0]
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	20000580 	.word	0x20000580

080077dc <_localeconv_r>:
 80077dc:	4800      	ldr	r0, [pc, #0]	; (80077e0 <_localeconv_r+0x4>)
 80077de:	4770      	bx	lr
 80077e0:	20000528 	.word	0x20000528

080077e4 <__swhatbuf_r>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	460e      	mov	r6, r1
 80077e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ec:	2900      	cmp	r1, #0
 80077ee:	b090      	sub	sp, #64	; 0x40
 80077f0:	4614      	mov	r4, r2
 80077f2:	461d      	mov	r5, r3
 80077f4:	da0a      	bge.n	800780c <__swhatbuf_r+0x28>
 80077f6:	89b3      	ldrh	r3, [r6, #12]
 80077f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fc:	2200      	movs	r2, #0
 80077fe:	b298      	uxth	r0, r3
 8007800:	602a      	str	r2, [r5, #0]
 8007802:	b1b0      	cbz	r0, 8007832 <__swhatbuf_r+0x4e>
 8007804:	2340      	movs	r3, #64	; 0x40
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	4610      	mov	r0, r2
 800780a:	e015      	b.n	8007838 <__swhatbuf_r+0x54>
 800780c:	aa01      	add	r2, sp, #4
 800780e:	f000 fef9 	bl	8008604 <_fstat_r>
 8007812:	2800      	cmp	r0, #0
 8007814:	dbef      	blt.n	80077f6 <__swhatbuf_r+0x12>
 8007816:	9a02      	ldr	r2, [sp, #8]
 8007818:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800781c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007820:	425a      	negs	r2, r3
 8007822:	415a      	adcs	r2, r3
 8007824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	e002      	b.n	8007838 <__swhatbuf_r+0x54>
 8007832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	b010      	add	sp, #64	; 0x40
 800783a:	bd70      	pop	{r4, r5, r6, pc}

0800783c <__smakebuf_r>:
 800783c:	898b      	ldrh	r3, [r1, #12]
 800783e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007840:	079e      	lsls	r6, r3, #30
 8007842:	4605      	mov	r5, r0
 8007844:	460c      	mov	r4, r1
 8007846:	d410      	bmi.n	800786a <__smakebuf_r+0x2e>
 8007848:	ab01      	add	r3, sp, #4
 800784a:	466a      	mov	r2, sp
 800784c:	f7ff ffca 	bl	80077e4 <__swhatbuf_r>
 8007850:	9900      	ldr	r1, [sp, #0]
 8007852:	4606      	mov	r6, r0
 8007854:	4628      	mov	r0, r5
 8007856:	f7fd fa4d 	bl	8004cf4 <_malloc_r>
 800785a:	b968      	cbnz	r0, 8007878 <__smakebuf_r+0x3c>
 800785c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007860:	059a      	lsls	r2, r3, #22
 8007862:	d422      	bmi.n	80078aa <__smakebuf_r+0x6e>
 8007864:	f043 0302 	orr.w	r3, r3, #2
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	6123      	str	r3, [r4, #16]
 8007872:	2301      	movs	r3, #1
 8007874:	6163      	str	r3, [r4, #20]
 8007876:	e018      	b.n	80078aa <__smakebuf_r+0x6e>
 8007878:	4b0d      	ldr	r3, [pc, #52]	; (80078b0 <__smakebuf_r+0x74>)
 800787a:	62ab      	str	r3, [r5, #40]	; 0x28
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	6020      	str	r0, [r4, #0]
 8007880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	9b00      	ldr	r3, [sp, #0]
 8007888:	6163      	str	r3, [r4, #20]
 800788a:	9b01      	ldr	r3, [sp, #4]
 800788c:	6120      	str	r0, [r4, #16]
 800788e:	b14b      	cbz	r3, 80078a4 <__smakebuf_r+0x68>
 8007890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007894:	4628      	mov	r0, r5
 8007896:	f000 fec7 	bl	8008628 <_isatty_r>
 800789a:	b118      	cbz	r0, 80078a4 <__smakebuf_r+0x68>
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f043 0301 	orr.w	r3, r3, #1
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	89a0      	ldrh	r0, [r4, #12]
 80078a6:	4330      	orrs	r0, r6
 80078a8:	81a0      	strh	r0, [r4, #12]
 80078aa:	b002      	add	sp, #8
 80078ac:	bd70      	pop	{r4, r5, r6, pc}
 80078ae:	bf00      	nop
 80078b0:	0800716d 	.word	0x0800716d

080078b4 <memcpy>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	1e43      	subs	r3, r0, #1
 80078b8:	440a      	add	r2, r1
 80078ba:	4291      	cmp	r1, r2
 80078bc:	d004      	beq.n	80078c8 <memcpy+0x14>
 80078be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078c6:	e7f8      	b.n	80078ba <memcpy+0x6>
 80078c8:	bd10      	pop	{r4, pc}

080078ca <memmove>:
 80078ca:	4288      	cmp	r0, r1
 80078cc:	b510      	push	{r4, lr}
 80078ce:	eb01 0302 	add.w	r3, r1, r2
 80078d2:	d801      	bhi.n	80078d8 <memmove+0xe>
 80078d4:	1e42      	subs	r2, r0, #1
 80078d6:	e00b      	b.n	80078f0 <memmove+0x26>
 80078d8:	4298      	cmp	r0, r3
 80078da:	d2fb      	bcs.n	80078d4 <memmove+0xa>
 80078dc:	1881      	adds	r1, r0, r2
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	42d3      	cmn	r3, r2
 80078e2:	d004      	beq.n	80078ee <memmove+0x24>
 80078e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80078ec:	e7f8      	b.n	80078e0 <memmove+0x16>
 80078ee:	bd10      	pop	{r4, pc}
 80078f0:	4299      	cmp	r1, r3
 80078f2:	d004      	beq.n	80078fe <memmove+0x34>
 80078f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80078fc:	e7f8      	b.n	80078f0 <memmove+0x26>
 80078fe:	bd10      	pop	{r4, pc}

08007900 <memset>:
 8007900:	4402      	add	r2, r0
 8007902:	4603      	mov	r3, r0
 8007904:	4293      	cmp	r3, r2
 8007906:	d002      	beq.n	800790e <memset+0xe>
 8007908:	f803 1b01 	strb.w	r1, [r3], #1
 800790c:	e7fa      	b.n	8007904 <memset+0x4>
 800790e:	4770      	bx	lr

08007910 <_Balloc>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007914:	4604      	mov	r4, r0
 8007916:	460e      	mov	r6, r1
 8007918:	b93d      	cbnz	r5, 800792a <_Balloc+0x1a>
 800791a:	2010      	movs	r0, #16
 800791c:	f7fd f9da 	bl	8004cd4 <malloc>
 8007920:	6260      	str	r0, [r4, #36]	; 0x24
 8007922:	6045      	str	r5, [r0, #4]
 8007924:	6085      	str	r5, [r0, #8]
 8007926:	6005      	str	r5, [r0, #0]
 8007928:	60c5      	str	r5, [r0, #12]
 800792a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800792c:	68eb      	ldr	r3, [r5, #12]
 800792e:	b143      	cbz	r3, 8007942 <_Balloc+0x32>
 8007930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007938:	b178      	cbz	r0, 800795a <_Balloc+0x4a>
 800793a:	6802      	ldr	r2, [r0, #0]
 800793c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007940:	e017      	b.n	8007972 <_Balloc+0x62>
 8007942:	2221      	movs	r2, #33	; 0x21
 8007944:	2104      	movs	r1, #4
 8007946:	4620      	mov	r0, r4
 8007948:	f000 fd7c 	bl	8008444 <_calloc_r>
 800794c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800794e:	60e8      	str	r0, [r5, #12]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1ec      	bne.n	8007930 <_Balloc+0x20>
 8007956:	2000      	movs	r0, #0
 8007958:	bd70      	pop	{r4, r5, r6, pc}
 800795a:	2101      	movs	r1, #1
 800795c:	fa01 f506 	lsl.w	r5, r1, r6
 8007960:	1d6a      	adds	r2, r5, #5
 8007962:	0092      	lsls	r2, r2, #2
 8007964:	4620      	mov	r0, r4
 8007966:	f000 fd6d 	bl	8008444 <_calloc_r>
 800796a:	2800      	cmp	r0, #0
 800796c:	d0f3      	beq.n	8007956 <_Balloc+0x46>
 800796e:	6046      	str	r6, [r0, #4]
 8007970:	6085      	str	r5, [r0, #8]
 8007972:	2300      	movs	r3, #0
 8007974:	6103      	str	r3, [r0, #16]
 8007976:	60c3      	str	r3, [r0, #12]
 8007978:	bd70      	pop	{r4, r5, r6, pc}

0800797a <_Bfree>:
 800797a:	b570      	push	{r4, r5, r6, lr}
 800797c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800797e:	4606      	mov	r6, r0
 8007980:	460d      	mov	r5, r1
 8007982:	b93c      	cbnz	r4, 8007994 <_Bfree+0x1a>
 8007984:	2010      	movs	r0, #16
 8007986:	f7fd f9a5 	bl	8004cd4 <malloc>
 800798a:	6270      	str	r0, [r6, #36]	; 0x24
 800798c:	6044      	str	r4, [r0, #4]
 800798e:	6084      	str	r4, [r0, #8]
 8007990:	6004      	str	r4, [r0, #0]
 8007992:	60c4      	str	r4, [r0, #12]
 8007994:	b13d      	cbz	r5, 80079a6 <_Bfree+0x2c>
 8007996:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007998:	686a      	ldr	r2, [r5, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079a0:	6029      	str	r1, [r5, #0]
 80079a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80079a6:	bd70      	pop	{r4, r5, r6, pc}

080079a8 <__multadd>:
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	690d      	ldr	r5, [r1, #16]
 80079ae:	461f      	mov	r7, r3
 80079b0:	4606      	mov	r6, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	f101 0e14 	add.w	lr, r1, #20
 80079b8:	2300      	movs	r3, #0
 80079ba:	f8de 0000 	ldr.w	r0, [lr]
 80079be:	b281      	uxth	r1, r0
 80079c0:	fb02 7101 	mla	r1, r2, r1, r7
 80079c4:	0c0f      	lsrs	r7, r1, #16
 80079c6:	0c00      	lsrs	r0, r0, #16
 80079c8:	fb02 7000 	mla	r0, r2, r0, r7
 80079cc:	b289      	uxth	r1, r1
 80079ce:	3301      	adds	r3, #1
 80079d0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80079d4:	429d      	cmp	r5, r3
 80079d6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80079da:	f84e 1b04 	str.w	r1, [lr], #4
 80079de:	dcec      	bgt.n	80079ba <__multadd+0x12>
 80079e0:	b1d7      	cbz	r7, 8007a18 <__multadd+0x70>
 80079e2:	68a3      	ldr	r3, [r4, #8]
 80079e4:	429d      	cmp	r5, r3
 80079e6:	db12      	blt.n	8007a0e <__multadd+0x66>
 80079e8:	6861      	ldr	r1, [r4, #4]
 80079ea:	4630      	mov	r0, r6
 80079ec:	3101      	adds	r1, #1
 80079ee:	f7ff ff8f 	bl	8007910 <_Balloc>
 80079f2:	6922      	ldr	r2, [r4, #16]
 80079f4:	3202      	adds	r2, #2
 80079f6:	f104 010c 	add.w	r1, r4, #12
 80079fa:	4680      	mov	r8, r0
 80079fc:	0092      	lsls	r2, r2, #2
 80079fe:	300c      	adds	r0, #12
 8007a00:	f7ff ff58 	bl	80078b4 <memcpy>
 8007a04:	4621      	mov	r1, r4
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ffb7 	bl	800797a <_Bfree>
 8007a0c:	4644      	mov	r4, r8
 8007a0e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a12:	3501      	adds	r5, #1
 8007a14:	615f      	str	r7, [r3, #20]
 8007a16:	6125      	str	r5, [r4, #16]
 8007a18:	4620      	mov	r0, r4
 8007a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a1e <__hi0bits>:
 8007a1e:	0c03      	lsrs	r3, r0, #16
 8007a20:	041b      	lsls	r3, r3, #16
 8007a22:	b913      	cbnz	r3, 8007a2a <__hi0bits+0xc>
 8007a24:	0400      	lsls	r0, r0, #16
 8007a26:	2310      	movs	r3, #16
 8007a28:	e000      	b.n	8007a2c <__hi0bits+0xe>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a30:	bf04      	itt	eq
 8007a32:	0200      	lsleq	r0, r0, #8
 8007a34:	3308      	addeq	r3, #8
 8007a36:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a3a:	bf04      	itt	eq
 8007a3c:	0100      	lsleq	r0, r0, #4
 8007a3e:	3304      	addeq	r3, #4
 8007a40:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a44:	bf04      	itt	eq
 8007a46:	0080      	lsleq	r0, r0, #2
 8007a48:	3302      	addeq	r3, #2
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	db03      	blt.n	8007a56 <__hi0bits+0x38>
 8007a4e:	0042      	lsls	r2, r0, #1
 8007a50:	d503      	bpl.n	8007a5a <__hi0bits+0x3c>
 8007a52:	1c58      	adds	r0, r3, #1
 8007a54:	4770      	bx	lr
 8007a56:	4618      	mov	r0, r3
 8007a58:	4770      	bx	lr
 8007a5a:	2020      	movs	r0, #32
 8007a5c:	4770      	bx	lr

08007a5e <__lo0bits>:
 8007a5e:	6803      	ldr	r3, [r0, #0]
 8007a60:	f013 0207 	ands.w	r2, r3, #7
 8007a64:	d00b      	beq.n	8007a7e <__lo0bits+0x20>
 8007a66:	07d9      	lsls	r1, r3, #31
 8007a68:	d422      	bmi.n	8007ab0 <__lo0bits+0x52>
 8007a6a:	079a      	lsls	r2, r3, #30
 8007a6c:	bf4b      	itete	mi
 8007a6e:	085b      	lsrmi	r3, r3, #1
 8007a70:	089b      	lsrpl	r3, r3, #2
 8007a72:	6003      	strmi	r3, [r0, #0]
 8007a74:	6003      	strpl	r3, [r0, #0]
 8007a76:	bf4c      	ite	mi
 8007a78:	2001      	movmi	r0, #1
 8007a7a:	2002      	movpl	r0, #2
 8007a7c:	4770      	bx	lr
 8007a7e:	b299      	uxth	r1, r3
 8007a80:	b909      	cbnz	r1, 8007a86 <__lo0bits+0x28>
 8007a82:	0c1b      	lsrs	r3, r3, #16
 8007a84:	2210      	movs	r2, #16
 8007a86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a8a:	bf04      	itt	eq
 8007a8c:	0a1b      	lsreq	r3, r3, #8
 8007a8e:	3208      	addeq	r2, #8
 8007a90:	0719      	lsls	r1, r3, #28
 8007a92:	bf04      	itt	eq
 8007a94:	091b      	lsreq	r3, r3, #4
 8007a96:	3204      	addeq	r2, #4
 8007a98:	0799      	lsls	r1, r3, #30
 8007a9a:	bf04      	itt	eq
 8007a9c:	089b      	lsreq	r3, r3, #2
 8007a9e:	3202      	addeq	r2, #2
 8007aa0:	07d9      	lsls	r1, r3, #31
 8007aa2:	d402      	bmi.n	8007aaa <__lo0bits+0x4c>
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	d005      	beq.n	8007ab4 <__lo0bits+0x56>
 8007aa8:	3201      	adds	r2, #1
 8007aaa:	6003      	str	r3, [r0, #0]
 8007aac:	4610      	mov	r0, r2
 8007aae:	4770      	bx	lr
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	4770      	bx	lr
 8007ab4:	2020      	movs	r0, #32
 8007ab6:	4770      	bx	lr

08007ab8 <__i2b>:
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	460c      	mov	r4, r1
 8007abc:	2101      	movs	r1, #1
 8007abe:	f7ff ff27 	bl	8007910 <_Balloc>
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	6144      	str	r4, [r0, #20]
 8007ac6:	6102      	str	r2, [r0, #16]
 8007ac8:	bd10      	pop	{r4, pc}

08007aca <__multiply>:
 8007aca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ace:	4614      	mov	r4, r2
 8007ad0:	690a      	ldr	r2, [r1, #16]
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	bfb8      	it	lt
 8007ad8:	460b      	movlt	r3, r1
 8007ada:	4688      	mov	r8, r1
 8007adc:	bfbc      	itt	lt
 8007ade:	46a0      	movlt	r8, r4
 8007ae0:	461c      	movlt	r4, r3
 8007ae2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ae6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007aea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007aee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007af2:	eb07 0609 	add.w	r6, r7, r9
 8007af6:	429e      	cmp	r6, r3
 8007af8:	bfc8      	it	gt
 8007afa:	3101      	addgt	r1, #1
 8007afc:	f7ff ff08 	bl	8007910 <_Balloc>
 8007b00:	f100 0514 	add.w	r5, r0, #20
 8007b04:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8007b08:	462b      	mov	r3, r5
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4563      	cmp	r3, ip
 8007b0e:	d202      	bcs.n	8007b16 <__multiply+0x4c>
 8007b10:	f843 2b04 	str.w	r2, [r3], #4
 8007b14:	e7fa      	b.n	8007b0c <__multiply+0x42>
 8007b16:	f104 0214 	add.w	r2, r4, #20
 8007b1a:	f108 0114 	add.w	r1, r8, #20
 8007b1e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007b22:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	9b00      	ldr	r3, [sp, #0]
 8007b2a:	9201      	str	r2, [sp, #4]
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d957      	bls.n	8007be0 <__multiply+0x116>
 8007b30:	f8b2 b000 	ldrh.w	fp, [r2]
 8007b34:	f1bb 0f00 	cmp.w	fp, #0
 8007b38:	d023      	beq.n	8007b82 <__multiply+0xb8>
 8007b3a:	4689      	mov	r9, r1
 8007b3c:	46ae      	mov	lr, r5
 8007b3e:	f04f 0800 	mov.w	r8, #0
 8007b42:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b46:	f8be a000 	ldrh.w	sl, [lr]
 8007b4a:	b2a3      	uxth	r3, r4
 8007b4c:	fb0b a303 	mla	r3, fp, r3, sl
 8007b50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007b54:	f8de 4000 	ldr.w	r4, [lr]
 8007b58:	4443      	add	r3, r8
 8007b5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b5e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007b62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007b66:	46f2      	mov	sl, lr
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b6e:	454f      	cmp	r7, r9
 8007b70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b74:	f84a 3b04 	str.w	r3, [sl], #4
 8007b78:	d901      	bls.n	8007b7e <__multiply+0xb4>
 8007b7a:	46d6      	mov	lr, sl
 8007b7c:	e7e1      	b.n	8007b42 <__multiply+0x78>
 8007b7e:	f8ce 8004 	str.w	r8, [lr, #4]
 8007b82:	9b01      	ldr	r3, [sp, #4]
 8007b84:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007b88:	3204      	adds	r2, #4
 8007b8a:	f1ba 0f00 	cmp.w	sl, #0
 8007b8e:	d021      	beq.n	8007bd4 <__multiply+0x10a>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	462c      	mov	r4, r5
 8007b94:	4689      	mov	r9, r1
 8007b96:	f04f 0800 	mov.w	r8, #0
 8007b9a:	f8b9 e000 	ldrh.w	lr, [r9]
 8007b9e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8007ba2:	fb0a be0e 	mla	lr, sl, lr, fp
 8007ba6:	44f0      	add	r8, lr
 8007ba8:	46a3      	mov	fp, r4
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007bb0:	f84b 3b04 	str.w	r3, [fp], #4
 8007bb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bb8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8007bbc:	0c1b      	lsrs	r3, r3, #16
 8007bbe:	fb0a e303 	mla	r3, sl, r3, lr
 8007bc2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8007bc6:	454f      	cmp	r7, r9
 8007bc8:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007bcc:	d901      	bls.n	8007bd2 <__multiply+0x108>
 8007bce:	465c      	mov	r4, fp
 8007bd0:	e7e3      	b.n	8007b9a <__multiply+0xd0>
 8007bd2:	6063      	str	r3, [r4, #4]
 8007bd4:	3504      	adds	r5, #4
 8007bd6:	e7a7      	b.n	8007b28 <__multiply+0x5e>
 8007bd8:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007bdc:	b913      	cbnz	r3, 8007be4 <__multiply+0x11a>
 8007bde:	3e01      	subs	r6, #1
 8007be0:	2e00      	cmp	r6, #0
 8007be2:	dcf9      	bgt.n	8007bd8 <__multiply+0x10e>
 8007be4:	6106      	str	r6, [r0, #16]
 8007be6:	b003      	add	sp, #12
 8007be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bec <__pow5mult>:
 8007bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf0:	4615      	mov	r5, r2
 8007bf2:	f012 0203 	ands.w	r2, r2, #3
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	460f      	mov	r7, r1
 8007bfa:	d007      	beq.n	8007c0c <__pow5mult+0x20>
 8007bfc:	3a01      	subs	r2, #1
 8007bfe:	4c21      	ldr	r4, [pc, #132]	; (8007c84 <__pow5mult+0x98>)
 8007c00:	2300      	movs	r3, #0
 8007c02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c06:	f7ff fecf 	bl	80079a8 <__multadd>
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	10ad      	asrs	r5, r5, #2
 8007c0e:	d036      	beq.n	8007c7e <__pow5mult+0x92>
 8007c10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c12:	b93c      	cbnz	r4, 8007c24 <__pow5mult+0x38>
 8007c14:	2010      	movs	r0, #16
 8007c16:	f7fd f85d 	bl	8004cd4 <malloc>
 8007c1a:	6270      	str	r0, [r6, #36]	; 0x24
 8007c1c:	6044      	str	r4, [r0, #4]
 8007c1e:	6084      	str	r4, [r0, #8]
 8007c20:	6004      	str	r4, [r0, #0]
 8007c22:	60c4      	str	r4, [r0, #12]
 8007c24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c2c:	b94c      	cbnz	r4, 8007c42 <__pow5mult+0x56>
 8007c2e:	f240 2171 	movw	r1, #625	; 0x271
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7ff ff40 	bl	8007ab8 <__i2b>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c3e:	4604      	mov	r4, r0
 8007c40:	6003      	str	r3, [r0, #0]
 8007c42:	f04f 0800 	mov.w	r8, #0
 8007c46:	07eb      	lsls	r3, r5, #31
 8007c48:	d50a      	bpl.n	8007c60 <__pow5mult+0x74>
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f7ff ff3b 	bl	8007aca <__multiply>
 8007c54:	4639      	mov	r1, r7
 8007c56:	4681      	mov	r9, r0
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f7ff fe8e 	bl	800797a <_Bfree>
 8007c5e:	464f      	mov	r7, r9
 8007c60:	106d      	asrs	r5, r5, #1
 8007c62:	d00c      	beq.n	8007c7e <__pow5mult+0x92>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	b108      	cbz	r0, 8007c6c <__pow5mult+0x80>
 8007c68:	4604      	mov	r4, r0
 8007c6a:	e7ec      	b.n	8007c46 <__pow5mult+0x5a>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4630      	mov	r0, r6
 8007c72:	f7ff ff2a 	bl	8007aca <__multiply>
 8007c76:	6020      	str	r0, [r4, #0]
 8007c78:	f8c0 8000 	str.w	r8, [r0]
 8007c7c:	e7f4      	b.n	8007c68 <__pow5mult+0x7c>
 8007c7e:	4638      	mov	r0, r7
 8007c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c84:	08008f78 	.word	0x08008f78

08007c88 <__lshift>:
 8007c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c92:	6926      	ldr	r6, [r4, #16]
 8007c94:	6849      	ldr	r1, [r1, #4]
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	4456      	add	r6, sl
 8007c9a:	4607      	mov	r7, r0
 8007c9c:	4691      	mov	r9, r2
 8007c9e:	1c75      	adds	r5, r6, #1
 8007ca0:	42ab      	cmp	r3, r5
 8007ca2:	da02      	bge.n	8007caa <__lshift+0x22>
 8007ca4:	3101      	adds	r1, #1
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	e7fa      	b.n	8007ca0 <__lshift+0x18>
 8007caa:	4638      	mov	r0, r7
 8007cac:	f7ff fe30 	bl	8007910 <_Balloc>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4680      	mov	r8, r0
 8007cb4:	f100 0114 	add.w	r1, r0, #20
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4553      	cmp	r3, sl
 8007cbc:	da03      	bge.n	8007cc6 <__lshift+0x3e>
 8007cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	e7f9      	b.n	8007cba <__lshift+0x32>
 8007cc6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8007cca:	6920      	ldr	r0, [r4, #16]
 8007ccc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007cd0:	f019 091f 	ands.w	r9, r9, #31
 8007cd4:	f104 0114 	add.w	r1, r4, #20
 8007cd8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007cdc:	d014      	beq.n	8007d08 <__lshift+0x80>
 8007cde:	f1c9 0c20 	rsb	ip, r9, #32
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	6808      	ldr	r0, [r1, #0]
 8007ce6:	fa00 f009 	lsl.w	r0, r0, r9
 8007cea:	4302      	orrs	r2, r0
 8007cec:	469a      	mov	sl, r3
 8007cee:	f843 2b04 	str.w	r2, [r3], #4
 8007cf2:	f851 2b04 	ldr.w	r2, [r1], #4
 8007cf6:	458e      	cmp	lr, r1
 8007cf8:	fa22 f20c 	lsr.w	r2, r2, ip
 8007cfc:	d8f2      	bhi.n	8007ce4 <__lshift+0x5c>
 8007cfe:	f8ca 2004 	str.w	r2, [sl, #4]
 8007d02:	b142      	cbz	r2, 8007d16 <__lshift+0x8e>
 8007d04:	1cb5      	adds	r5, r6, #2
 8007d06:	e006      	b.n	8007d16 <__lshift+0x8e>
 8007d08:	3b04      	subs	r3, #4
 8007d0a:	f851 2b04 	ldr.w	r2, [r1], #4
 8007d0e:	f843 2f04 	str.w	r2, [r3, #4]!
 8007d12:	458e      	cmp	lr, r1
 8007d14:	d8f9      	bhi.n	8007d0a <__lshift+0x82>
 8007d16:	3d01      	subs	r5, #1
 8007d18:	4638      	mov	r0, r7
 8007d1a:	f8c8 5010 	str.w	r5, [r8, #16]
 8007d1e:	4621      	mov	r1, r4
 8007d20:	f7ff fe2b 	bl	800797a <_Bfree>
 8007d24:	4640      	mov	r0, r8
 8007d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d2a <__mcmp>:
 8007d2a:	6903      	ldr	r3, [r0, #16]
 8007d2c:	690a      	ldr	r2, [r1, #16]
 8007d2e:	1a9b      	subs	r3, r3, r2
 8007d30:	b510      	push	{r4, lr}
 8007d32:	d111      	bne.n	8007d58 <__mcmp+0x2e>
 8007d34:	0092      	lsls	r2, r2, #2
 8007d36:	3014      	adds	r0, #20
 8007d38:	3114      	adds	r1, #20
 8007d3a:	1883      	adds	r3, r0, r2
 8007d3c:	440a      	add	r2, r1
 8007d3e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007d42:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007d46:	428c      	cmp	r4, r1
 8007d48:	d002      	beq.n	8007d50 <__mcmp+0x26>
 8007d4a:	d307      	bcc.n	8007d5c <__mcmp+0x32>
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	bd10      	pop	{r4, pc}
 8007d50:	4298      	cmp	r0, r3
 8007d52:	d3f4      	bcc.n	8007d3e <__mcmp+0x14>
 8007d54:	2000      	movs	r0, #0
 8007d56:	bd10      	pop	{r4, pc}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	bd10      	pop	{r4, pc}
 8007d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d60:	bd10      	pop	{r4, pc}

08007d62 <__mdiff>:
 8007d62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d66:	460c      	mov	r4, r1
 8007d68:	4607      	mov	r7, r0
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4615      	mov	r5, r2
 8007d70:	f7ff ffdb 	bl	8007d2a <__mcmp>
 8007d74:	1e06      	subs	r6, r0, #0
 8007d76:	d108      	bne.n	8007d8a <__mdiff+0x28>
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	f7ff fdc8 	bl	8007910 <_Balloc>
 8007d80:	2301      	movs	r3, #1
 8007d82:	6103      	str	r3, [r0, #16]
 8007d84:	6146      	str	r6, [r0, #20]
 8007d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8a:	bfbc      	itt	lt
 8007d8c:	4623      	movlt	r3, r4
 8007d8e:	462c      	movlt	r4, r5
 8007d90:	4638      	mov	r0, r7
 8007d92:	6861      	ldr	r1, [r4, #4]
 8007d94:	bfba      	itte	lt
 8007d96:	461d      	movlt	r5, r3
 8007d98:	2601      	movlt	r6, #1
 8007d9a:	2600      	movge	r6, #0
 8007d9c:	f7ff fdb8 	bl	8007910 <_Balloc>
 8007da0:	692b      	ldr	r3, [r5, #16]
 8007da2:	60c6      	str	r6, [r0, #12]
 8007da4:	6926      	ldr	r6, [r4, #16]
 8007da6:	f105 0914 	add.w	r9, r5, #20
 8007daa:	3414      	adds	r4, #20
 8007dac:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8007db0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007db4:	f100 0514 	add.w	r5, r0, #20
 8007db8:	f04f 0c00 	mov.w	ip, #0
 8007dbc:	f854 3b04 	ldr.w	r3, [r4], #4
 8007dc0:	f859 2b04 	ldr.w	r2, [r9], #4
 8007dc4:	fa1c f183 	uxtah	r1, ip, r3
 8007dc8:	fa1f fe82 	uxth.w	lr, r2
 8007dcc:	0c12      	lsrs	r2, r2, #16
 8007dce:	ebce 0101 	rsb	r1, lr, r1
 8007dd2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8007dd6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007dda:	b289      	uxth	r1, r1
 8007ddc:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007de0:	45c8      	cmp	r8, r9
 8007de2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007de6:	46a6      	mov	lr, r4
 8007de8:	f845 3b04 	str.w	r3, [r5], #4
 8007dec:	d8e6      	bhi.n	8007dbc <__mdiff+0x5a>
 8007dee:	45be      	cmp	lr, r7
 8007df0:	d20e      	bcs.n	8007e10 <__mdiff+0xae>
 8007df2:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007df6:	fa1c f281 	uxtah	r2, ip, r1
 8007dfa:	1413      	asrs	r3, r2, #16
 8007dfc:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8007e00:	b292      	uxth	r2, r2
 8007e02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e06:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007e0a:	f845 2b04 	str.w	r2, [r5], #4
 8007e0e:	e7ee      	b.n	8007dee <__mdiff+0x8c>
 8007e10:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007e14:	b90b      	cbnz	r3, 8007e1a <__mdiff+0xb8>
 8007e16:	3e01      	subs	r6, #1
 8007e18:	e7fa      	b.n	8007e10 <__mdiff+0xae>
 8007e1a:	6106      	str	r6, [r0, #16]
 8007e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007e20 <__d2b>:
 8007e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	460e      	mov	r6, r1
 8007e26:	2101      	movs	r1, #1
 8007e28:	ec59 8b10 	vmov	r8, r9, d0
 8007e2c:	4615      	mov	r5, r2
 8007e2e:	f7ff fd6f 	bl	8007910 <_Balloc>
 8007e32:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007e36:	4607      	mov	r7, r0
 8007e38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e3c:	b10c      	cbz	r4, 8007e42 <__d2b+0x22>
 8007e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	f1b8 0f00 	cmp.w	r8, #0
 8007e48:	d019      	beq.n	8007e7e <__d2b+0x5e>
 8007e4a:	a802      	add	r0, sp, #8
 8007e4c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007e50:	f7ff fe05 	bl	8007a5e <__lo0bits>
 8007e54:	9b00      	ldr	r3, [sp, #0]
 8007e56:	b148      	cbz	r0, 8007e6c <__d2b+0x4c>
 8007e58:	9a01      	ldr	r2, [sp, #4]
 8007e5a:	f1c0 0120 	rsb	r1, r0, #32
 8007e5e:	fa02 f101 	lsl.w	r1, r2, r1
 8007e62:	430b      	orrs	r3, r1
 8007e64:	40c2      	lsrs	r2, r0
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	9201      	str	r2, [sp, #4]
 8007e6a:	e000      	b.n	8007e6e <__d2b+0x4e>
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	9b01      	ldr	r3, [sp, #4]
 8007e70:	61bb      	str	r3, [r7, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bf14      	ite	ne
 8007e76:	2102      	movne	r1, #2
 8007e78:	2101      	moveq	r1, #1
 8007e7a:	6139      	str	r1, [r7, #16]
 8007e7c:	e007      	b.n	8007e8e <__d2b+0x6e>
 8007e7e:	a801      	add	r0, sp, #4
 8007e80:	f7ff fded 	bl	8007a5e <__lo0bits>
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	2101      	movs	r1, #1
 8007e8a:	6139      	str	r1, [r7, #16]
 8007e8c:	3020      	adds	r0, #32
 8007e8e:	b134      	cbz	r4, 8007e9e <__d2b+0x7e>
 8007e90:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007e94:	4404      	add	r4, r0
 8007e96:	6034      	str	r4, [r6, #0]
 8007e98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e9c:	e009      	b.n	8007eb2 <__d2b+0x92>
 8007e9e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007ea2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ea6:	6030      	str	r0, [r6, #0]
 8007ea8:	6918      	ldr	r0, [r3, #16]
 8007eaa:	f7ff fdb8 	bl	8007a1e <__hi0bits>
 8007eae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007eb2:	6028      	str	r0, [r5, #0]
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	b003      	add	sp, #12
 8007eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007ebc <_putc_r>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	460d      	mov	r5, r1
 8007ec0:	4614      	mov	r4, r2
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	b118      	cbz	r0, 8007ece <_putc_r+0x12>
 8007ec6:	6983      	ldr	r3, [r0, #24]
 8007ec8:	b90b      	cbnz	r3, 8007ece <_putc_r+0x12>
 8007eca:	f7ff f98f 	bl	80071ec <__sinit>
 8007ece:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <_putc_r+0x60>)
 8007ed0:	429c      	cmp	r4, r3
 8007ed2:	d101      	bne.n	8007ed8 <_putc_r+0x1c>
 8007ed4:	6874      	ldr	r4, [r6, #4]
 8007ed6:	e008      	b.n	8007eea <_putc_r+0x2e>
 8007ed8:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <_putc_r+0x64>)
 8007eda:	429c      	cmp	r4, r3
 8007edc:	d101      	bne.n	8007ee2 <_putc_r+0x26>
 8007ede:	68b4      	ldr	r4, [r6, #8]
 8007ee0:	e003      	b.n	8007eea <_putc_r+0x2e>
 8007ee2:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <_putc_r+0x68>)
 8007ee4:	429c      	cmp	r4, r3
 8007ee6:	bf08      	it	eq
 8007ee8:	68f4      	ldreq	r4, [r6, #12]
 8007eea:	68a3      	ldr	r3, [r4, #8]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	60a3      	str	r3, [r4, #8]
 8007ef2:	da0c      	bge.n	8007f0e <_putc_r+0x52>
 8007ef4:	69a2      	ldr	r2, [r4, #24]
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	db02      	blt.n	8007f00 <_putc_r+0x44>
 8007efa:	b2eb      	uxtb	r3, r5
 8007efc:	2b0a      	cmp	r3, #10
 8007efe:	d106      	bne.n	8007f0e <_putc_r+0x52>
 8007f00:	4622      	mov	r2, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	4630      	mov	r0, r6
 8007f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f0a:	f000 ba2b 	b.w	8008364 <__swbuf_r>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	6022      	str	r2, [r4, #0]
 8007f14:	701d      	strb	r5, [r3, #0]
 8007f16:	b2e8      	uxtb	r0, r5
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	bf00      	nop
 8007f1c:	08008e18 	.word	0x08008e18
 8007f20:	08008e38 	.word	0x08008e38
 8007f24:	08008e58 	.word	0x08008e58

08007f28 <_realloc_r>:
 8007f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	4681      	mov	r9, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	b929      	cbnz	r1, 8007f3e <_realloc_r+0x16>
 8007f32:	4611      	mov	r1, r2
 8007f34:	b003      	add	sp, #12
 8007f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	f7fc bedb 	b.w	8004cf4 <_malloc_r>
 8007f3e:	9201      	str	r2, [sp, #4]
 8007f40:	f7fd f8f8 	bl	8005134 <__malloc_lock>
 8007f44:	9a01      	ldr	r2, [sp, #4]
 8007f46:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8007f4a:	f102 080b 	add.w	r8, r2, #11
 8007f4e:	f1b8 0f16 	cmp.w	r8, #22
 8007f52:	f1a4 0b08 	sub.w	fp, r4, #8
 8007f56:	f02e 0503 	bic.w	r5, lr, #3
 8007f5a:	d903      	bls.n	8007f64 <_realloc_r+0x3c>
 8007f5c:	f038 0807 	bics.w	r8, r8, #7
 8007f60:	d502      	bpl.n	8007f68 <_realloc_r+0x40>
 8007f62:	e003      	b.n	8007f6c <_realloc_r+0x44>
 8007f64:	f04f 0810 	mov.w	r8, #16
 8007f68:	4590      	cmp	r8, r2
 8007f6a:	d204      	bcs.n	8007f76 <_realloc_r+0x4e>
 8007f6c:	230c      	movs	r3, #12
 8007f6e:	f8c9 3000 	str.w	r3, [r9]
 8007f72:	2000      	movs	r0, #0
 8007f74:	e17d      	b.n	8008272 <_realloc_r+0x34a>
 8007f76:	45a8      	cmp	r8, r5
 8007f78:	f340 8150 	ble.w	800821c <_realloc_r+0x2f4>
 8007f7c:	4ba6      	ldr	r3, [pc, #664]	; (8008218 <_realloc_r+0x2f0>)
 8007f7e:	6898      	ldr	r0, [r3, #8]
 8007f80:	eb0b 0105 	add.w	r1, fp, r5
 8007f84:	4281      	cmp	r1, r0
 8007f86:	684f      	ldr	r7, [r1, #4]
 8007f88:	d005      	beq.n	8007f96 <_realloc_r+0x6e>
 8007f8a:	f027 0601 	bic.w	r6, r7, #1
 8007f8e:	440e      	add	r6, r1
 8007f90:	6876      	ldr	r6, [r6, #4]
 8007f92:	07f6      	lsls	r6, r6, #31
 8007f94:	d426      	bmi.n	8007fe4 <_realloc_r+0xbc>
 8007f96:	f027 0a03 	bic.w	sl, r7, #3
 8007f9a:	4281      	cmp	r1, r0
 8007f9c:	eb05 070a 	add.w	r7, r5, sl
 8007fa0:	d118      	bne.n	8007fd4 <_realloc_r+0xac>
 8007fa2:	f108 0610 	add.w	r6, r8, #16
 8007fa6:	42b7      	cmp	r7, r6
 8007fa8:	db1f      	blt.n	8007fea <_realloc_r+0xc2>
 8007faa:	eb0b 0008 	add.w	r0, fp, r8
 8007fae:	ebc8 0707 	rsb	r7, r8, r7
 8007fb2:	f047 0701 	orr.w	r7, r7, #1
 8007fb6:	6098      	str	r0, [r3, #8]
 8007fb8:	6047      	str	r7, [r0, #4]
 8007fba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	ea43 0308 	orr.w	r3, r3, r8
 8007fc6:	4648      	mov	r0, r9
 8007fc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fcc:	f7fd f8b3 	bl	8005136 <__malloc_unlock>
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	e14e      	b.n	8008272 <_realloc_r+0x34a>
 8007fd4:	45b8      	cmp	r8, r7
 8007fd6:	dc08      	bgt.n	8007fea <_realloc_r+0xc2>
 8007fd8:	68cb      	ldr	r3, [r1, #12]
 8007fda:	688a      	ldr	r2, [r1, #8]
 8007fdc:	463d      	mov	r5, r7
 8007fde:	60d3      	str	r3, [r2, #12]
 8007fe0:	609a      	str	r2, [r3, #8]
 8007fe2:	e11b      	b.n	800821c <_realloc_r+0x2f4>
 8007fe4:	f04f 0a00 	mov.w	sl, #0
 8007fe8:	4651      	mov	r1, sl
 8007fea:	f01e 0f01 	tst.w	lr, #1
 8007fee:	f040 80c3 	bne.w	8008178 <_realloc_r+0x250>
 8007ff2:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8007ff6:	ebc7 070b 	rsb	r7, r7, fp
 8007ffa:	687e      	ldr	r6, [r7, #4]
 8007ffc:	f026 0603 	bic.w	r6, r6, #3
 8008000:	442e      	add	r6, r5
 8008002:	2900      	cmp	r1, #0
 8008004:	f000 8083 	beq.w	800810e <_realloc_r+0x1e6>
 8008008:	4281      	cmp	r1, r0
 800800a:	44b2      	add	sl, r6
 800800c:	d147      	bne.n	800809e <_realloc_r+0x176>
 800800e:	f108 0110 	add.w	r1, r8, #16
 8008012:	458a      	cmp	sl, r1
 8008014:	db7b      	blt.n	800810e <_realloc_r+0x1e6>
 8008016:	463e      	mov	r6, r7
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800801e:	60ca      	str	r2, [r1, #12]
 8008020:	6091      	str	r1, [r2, #8]
 8008022:	1f2a      	subs	r2, r5, #4
 8008024:	2a24      	cmp	r2, #36	; 0x24
 8008026:	d825      	bhi.n	8008074 <_realloc_r+0x14c>
 8008028:	2a13      	cmp	r2, #19
 800802a:	d91b      	bls.n	8008064 <_realloc_r+0x13c>
 800802c:	6821      	ldr	r1, [r4, #0]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	6861      	ldr	r1, [r4, #4]
 8008032:	60f9      	str	r1, [r7, #12]
 8008034:	2a1b      	cmp	r2, #27
 8008036:	d803      	bhi.n	8008040 <_realloc_r+0x118>
 8008038:	f107 0210 	add.w	r2, r7, #16
 800803c:	3408      	adds	r4, #8
 800803e:	e012      	b.n	8008066 <_realloc_r+0x13e>
 8008040:	68a1      	ldr	r1, [r4, #8]
 8008042:	6139      	str	r1, [r7, #16]
 8008044:	68e1      	ldr	r1, [r4, #12]
 8008046:	6179      	str	r1, [r7, #20]
 8008048:	2a24      	cmp	r2, #36	; 0x24
 800804a:	bf01      	itttt	eq
 800804c:	6922      	ldreq	r2, [r4, #16]
 800804e:	61ba      	streq	r2, [r7, #24]
 8008050:	6961      	ldreq	r1, [r4, #20]
 8008052:	61f9      	streq	r1, [r7, #28]
 8008054:	bf19      	ittee	ne
 8008056:	f107 0218 	addne.w	r2, r7, #24
 800805a:	3410      	addne	r4, #16
 800805c:	f107 0220 	addeq.w	r2, r7, #32
 8008060:	3418      	addeq	r4, #24
 8008062:	e000      	b.n	8008066 <_realloc_r+0x13e>
 8008064:	4632      	mov	r2, r6
 8008066:	6821      	ldr	r1, [r4, #0]
 8008068:	6011      	str	r1, [r2, #0]
 800806a:	6861      	ldr	r1, [r4, #4]
 800806c:	6051      	str	r1, [r2, #4]
 800806e:	68a1      	ldr	r1, [r4, #8]
 8008070:	6091      	str	r1, [r2, #8]
 8008072:	e005      	b.n	8008080 <_realloc_r+0x158>
 8008074:	4621      	mov	r1, r4
 8008076:	4630      	mov	r0, r6
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	f7ff fc26 	bl	80078ca <memmove>
 800807e:	9b01      	ldr	r3, [sp, #4]
 8008080:	eb07 0208 	add.w	r2, r7, r8
 8008084:	ebc8 0a0a 	rsb	sl, r8, sl
 8008088:	609a      	str	r2, [r3, #8]
 800808a:	f04a 0301 	orr.w	r3, sl, #1
 800808e:	6053      	str	r3, [r2, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	ea43 0308 	orr.w	r3, r3, r8
 800809a:	607b      	str	r3, [r7, #4]
 800809c:	e0b6      	b.n	800820c <_realloc_r+0x2e4>
 800809e:	45d0      	cmp	r8, sl
 80080a0:	dc35      	bgt.n	800810e <_realloc_r+0x1e6>
 80080a2:	68cb      	ldr	r3, [r1, #12]
 80080a4:	688a      	ldr	r2, [r1, #8]
 80080a6:	4638      	mov	r0, r7
 80080a8:	60d3      	str	r3, [r2, #12]
 80080aa:	609a      	str	r2, [r3, #8]
 80080ac:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	60d3      	str	r3, [r2, #12]
 80080b4:	609a      	str	r2, [r3, #8]
 80080b6:	1f2a      	subs	r2, r5, #4
 80080b8:	2a24      	cmp	r2, #36	; 0x24
 80080ba:	d823      	bhi.n	8008104 <_realloc_r+0x1dc>
 80080bc:	2a13      	cmp	r2, #19
 80080be:	d91a      	bls.n	80080f6 <_realloc_r+0x1ce>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	60bb      	str	r3, [r7, #8]
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	2a1b      	cmp	r2, #27
 80080ca:	d803      	bhi.n	80080d4 <_realloc_r+0x1ac>
 80080cc:	f107 0010 	add.w	r0, r7, #16
 80080d0:	3408      	adds	r4, #8
 80080d2:	e010      	b.n	80080f6 <_realloc_r+0x1ce>
 80080d4:	68a3      	ldr	r3, [r4, #8]
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	68e3      	ldr	r3, [r4, #12]
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	2a24      	cmp	r2, #36	; 0x24
 80080de:	bf01      	itttt	eq
 80080e0:	6923      	ldreq	r3, [r4, #16]
 80080e2:	61bb      	streq	r3, [r7, #24]
 80080e4:	6963      	ldreq	r3, [r4, #20]
 80080e6:	61fb      	streq	r3, [r7, #28]
 80080e8:	bf19      	ittee	ne
 80080ea:	f107 0018 	addne.w	r0, r7, #24
 80080ee:	3410      	addne	r4, #16
 80080f0:	f107 0020 	addeq.w	r0, r7, #32
 80080f4:	3418      	addeq	r4, #24
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	6003      	str	r3, [r0, #0]
 80080fa:	6863      	ldr	r3, [r4, #4]
 80080fc:	6043      	str	r3, [r0, #4]
 80080fe:	68a3      	ldr	r3, [r4, #8]
 8008100:	6083      	str	r3, [r0, #8]
 8008102:	e002      	b.n	800810a <_realloc_r+0x1e2>
 8008104:	4621      	mov	r1, r4
 8008106:	f7ff fbe0 	bl	80078ca <memmove>
 800810a:	4655      	mov	r5, sl
 800810c:	e02e      	b.n	800816c <_realloc_r+0x244>
 800810e:	45b0      	cmp	r8, r6
 8008110:	dc32      	bgt.n	8008178 <_realloc_r+0x250>
 8008112:	4638      	mov	r0, r7
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800811a:	60d3      	str	r3, [r2, #12]
 800811c:	609a      	str	r2, [r3, #8]
 800811e:	1f2a      	subs	r2, r5, #4
 8008120:	2a24      	cmp	r2, #36	; 0x24
 8008122:	d825      	bhi.n	8008170 <_realloc_r+0x248>
 8008124:	2a13      	cmp	r2, #19
 8008126:	d91a      	bls.n	800815e <_realloc_r+0x236>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	60bb      	str	r3, [r7, #8]
 800812c:	6863      	ldr	r3, [r4, #4]
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	2a1b      	cmp	r2, #27
 8008132:	d803      	bhi.n	800813c <_realloc_r+0x214>
 8008134:	f107 0010 	add.w	r0, r7, #16
 8008138:	3408      	adds	r4, #8
 800813a:	e010      	b.n	800815e <_realloc_r+0x236>
 800813c:	68a3      	ldr	r3, [r4, #8]
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	68e3      	ldr	r3, [r4, #12]
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	2a24      	cmp	r2, #36	; 0x24
 8008146:	bf01      	itttt	eq
 8008148:	6923      	ldreq	r3, [r4, #16]
 800814a:	61bb      	streq	r3, [r7, #24]
 800814c:	6963      	ldreq	r3, [r4, #20]
 800814e:	61fb      	streq	r3, [r7, #28]
 8008150:	bf19      	ittee	ne
 8008152:	f107 0018 	addne.w	r0, r7, #24
 8008156:	3410      	addne	r4, #16
 8008158:	f107 0020 	addeq.w	r0, r7, #32
 800815c:	3418      	addeq	r4, #24
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	6003      	str	r3, [r0, #0]
 8008162:	6863      	ldr	r3, [r4, #4]
 8008164:	6043      	str	r3, [r0, #4]
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	6083      	str	r3, [r0, #8]
 800816a:	4635      	mov	r5, r6
 800816c:	46bb      	mov	fp, r7
 800816e:	e055      	b.n	800821c <_realloc_r+0x2f4>
 8008170:	4621      	mov	r1, r4
 8008172:	f7ff fbaa 	bl	80078ca <memmove>
 8008176:	e7f8      	b.n	800816a <_realloc_r+0x242>
 8008178:	4611      	mov	r1, r2
 800817a:	4648      	mov	r0, r9
 800817c:	f7fc fdba 	bl	8004cf4 <_malloc_r>
 8008180:	4606      	mov	r6, r0
 8008182:	2800      	cmp	r0, #0
 8008184:	d042      	beq.n	800820c <_realloc_r+0x2e4>
 8008186:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800818a:	f023 0301 	bic.w	r3, r3, #1
 800818e:	f1a0 0208 	sub.w	r2, r0, #8
 8008192:	445b      	add	r3, fp
 8008194:	429a      	cmp	r2, r3
 8008196:	d105      	bne.n	80081a4 <_realloc_r+0x27c>
 8008198:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800819c:	f023 0303 	bic.w	r3, r3, #3
 80081a0:	441d      	add	r5, r3
 80081a2:	e03b      	b.n	800821c <_realloc_r+0x2f4>
 80081a4:	1f2a      	subs	r2, r5, #4
 80081a6:	2a24      	cmp	r2, #36	; 0x24
 80081a8:	d829      	bhi.n	80081fe <_realloc_r+0x2d6>
 80081aa:	2a13      	cmp	r2, #19
 80081ac:	d91e      	bls.n	80081ec <_realloc_r+0x2c4>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	6003      	str	r3, [r0, #0]
 80081b2:	6863      	ldr	r3, [r4, #4]
 80081b4:	6043      	str	r3, [r0, #4]
 80081b6:	2a1b      	cmp	r2, #27
 80081b8:	d804      	bhi.n	80081c4 <_realloc_r+0x29c>
 80081ba:	f100 0308 	add.w	r3, r0, #8
 80081be:	f104 0208 	add.w	r2, r4, #8
 80081c2:	e015      	b.n	80081f0 <_realloc_r+0x2c8>
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	6083      	str	r3, [r0, #8]
 80081c8:	68e3      	ldr	r3, [r4, #12]
 80081ca:	60c3      	str	r3, [r0, #12]
 80081cc:	2a24      	cmp	r2, #36	; 0x24
 80081ce:	bf01      	itttt	eq
 80081d0:	6923      	ldreq	r3, [r4, #16]
 80081d2:	6103      	streq	r3, [r0, #16]
 80081d4:	6961      	ldreq	r1, [r4, #20]
 80081d6:	6141      	streq	r1, [r0, #20]
 80081d8:	bf19      	ittee	ne
 80081da:	f100 0310 	addne.w	r3, r0, #16
 80081de:	f104 0210 	addne.w	r2, r4, #16
 80081e2:	f100 0318 	addeq.w	r3, r0, #24
 80081e6:	f104 0218 	addeq.w	r2, r4, #24
 80081ea:	e001      	b.n	80081f0 <_realloc_r+0x2c8>
 80081ec:	4603      	mov	r3, r0
 80081ee:	4622      	mov	r2, r4
 80081f0:	6811      	ldr	r1, [r2, #0]
 80081f2:	6019      	str	r1, [r3, #0]
 80081f4:	6851      	ldr	r1, [r2, #4]
 80081f6:	6059      	str	r1, [r3, #4]
 80081f8:	6892      	ldr	r2, [r2, #8]
 80081fa:	609a      	str	r2, [r3, #8]
 80081fc:	e002      	b.n	8008204 <_realloc_r+0x2dc>
 80081fe:	4621      	mov	r1, r4
 8008200:	f7ff fb63 	bl	80078ca <memmove>
 8008204:	4621      	mov	r1, r4
 8008206:	4648      	mov	r0, r9
 8008208:	f7ff f8b8 	bl	800737c <_free_r>
 800820c:	4648      	mov	r0, r9
 800820e:	f7fc ff92 	bl	8005136 <__malloc_unlock>
 8008212:	4630      	mov	r0, r6
 8008214:	e02d      	b.n	8008272 <_realloc_r+0x34a>
 8008216:	bf00      	nop
 8008218:	20000024 	.word	0x20000024
 800821c:	ebc8 0205 	rsb	r2, r8, r5
 8008220:	2a0f      	cmp	r2, #15
 8008222:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008226:	d914      	bls.n	8008252 <_realloc_r+0x32a>
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	eb0b 0108 	add.w	r1, fp, r8
 8008230:	ea43 0308 	orr.w	r3, r3, r8
 8008234:	f8cb 3004 	str.w	r3, [fp, #4]
 8008238:	f042 0301 	orr.w	r3, r2, #1
 800823c:	440a      	add	r2, r1
 800823e:	604b      	str	r3, [r1, #4]
 8008240:	6853      	ldr	r3, [r2, #4]
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	6053      	str	r3, [r2, #4]
 8008248:	3108      	adds	r1, #8
 800824a:	4648      	mov	r0, r9
 800824c:	f7ff f896 	bl	800737c <_free_r>
 8008250:	e00a      	b.n	8008268 <_realloc_r+0x340>
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	432b      	orrs	r3, r5
 8008258:	eb0b 0205 	add.w	r2, fp, r5
 800825c:	f8cb 3004 	str.w	r3, [fp, #4]
 8008260:	6853      	ldr	r3, [r2, #4]
 8008262:	f043 0301 	orr.w	r3, r3, #1
 8008266:	6053      	str	r3, [r2, #4]
 8008268:	4648      	mov	r0, r9
 800826a:	f7fc ff64 	bl	8005136 <__malloc_unlock>
 800826e:	f10b 0008 	add.w	r0, fp, #8
 8008272:	b003      	add	sp, #12
 8008274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008278 <__sread>:
 8008278:	b510      	push	{r4, lr}
 800827a:	460c      	mov	r4, r1
 800827c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008280:	f000 f9f4 	bl	800866c <_read_r>
 8008284:	2800      	cmp	r0, #0
 8008286:	bfab      	itete	ge
 8008288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800828a:	89a3      	ldrhlt	r3, [r4, #12]
 800828c:	181b      	addge	r3, r3, r0
 800828e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008292:	bfac      	ite	ge
 8008294:	6563      	strge	r3, [r4, #84]	; 0x54
 8008296:	81a3      	strhlt	r3, [r4, #12]
 8008298:	bd10      	pop	{r4, pc}

0800829a <__swrite>:
 800829a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800829e:	461f      	mov	r7, r3
 80082a0:	898b      	ldrh	r3, [r1, #12]
 80082a2:	05db      	lsls	r3, r3, #23
 80082a4:	4605      	mov	r5, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	4616      	mov	r6, r2
 80082aa:	d505      	bpl.n	80082b8 <__swrite+0x1e>
 80082ac:	2302      	movs	r3, #2
 80082ae:	2200      	movs	r2, #0
 80082b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b4:	f000 f9c8 	bl	8008648 <_lseek_r>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	4632      	mov	r2, r6
 80082c6:	463b      	mov	r3, r7
 80082c8:	4628      	mov	r0, r5
 80082ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ce:	f000 b8a7 	b.w	8008420 <_write_r>

080082d2 <__sseek>:
 80082d2:	b510      	push	{r4, lr}
 80082d4:	460c      	mov	r4, r1
 80082d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082da:	f000 f9b5 	bl	8008648 <_lseek_r>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	bf15      	itete	ne
 80082e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80082e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082ee:	81a3      	strheq	r3, [r4, #12]
 80082f0:	bf18      	it	ne
 80082f2:	81a3      	strhne	r3, [r4, #12]
 80082f4:	bd10      	pop	{r4, pc}

080082f6 <__sclose>:
 80082f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082fa:	f000 b8d1 	b.w	80084a0 <_close_r>

080082fe <__sprint_r>:
 80082fe:	6893      	ldr	r3, [r2, #8]
 8008300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008304:	4680      	mov	r8, r0
 8008306:	460f      	mov	r7, r1
 8008308:	4614      	mov	r4, r2
 800830a:	b91b      	cbnz	r3, 8008314 <__sprint_r+0x16>
 800830c:	6053      	str	r3, [r2, #4]
 800830e:	4618      	mov	r0, r3
 8008310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008314:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008316:	049d      	lsls	r5, r3, #18
 8008318:	d51c      	bpl.n	8008354 <__sprint_r+0x56>
 800831a:	6815      	ldr	r5, [r2, #0]
 800831c:	68a0      	ldr	r0, [r4, #8]
 800831e:	3508      	adds	r5, #8
 8008320:	b1d0      	cbz	r0, 8008358 <__sprint_r+0x5a>
 8008322:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8008326:	f855 ac08 	ldr.w	sl, [r5, #-8]
 800832a:	08b6      	lsrs	r6, r6, #2
 800832c:	f04f 0900 	mov.w	r9, #0
 8008330:	454e      	cmp	r6, r9
 8008332:	dd0a      	ble.n	800834a <__sprint_r+0x4c>
 8008334:	463a      	mov	r2, r7
 8008336:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 800833a:	4640      	mov	r0, r8
 800833c:	f000 f951 	bl	80085e2 <_fputwc_r>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d009      	beq.n	8008358 <__sprint_r+0x5a>
 8008344:	f109 0901 	add.w	r9, r9, #1
 8008348:	e7f2      	b.n	8008330 <__sprint_r+0x32>
 800834a:	68a3      	ldr	r3, [r4, #8]
 800834c:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 8008350:	60a6      	str	r6, [r4, #8]
 8008352:	e7e3      	b.n	800831c <__sprint_r+0x1e>
 8008354:	f7ff f8d0 	bl	80074f8 <__sfvwrite_r>
 8008358:	2300      	movs	r3, #0
 800835a:	60a3      	str	r3, [r4, #8]
 800835c:	6063      	str	r3, [r4, #4]
 800835e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08008364 <__swbuf_r>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	460f      	mov	r7, r1
 8008368:	4614      	mov	r4, r2
 800836a:	4606      	mov	r6, r0
 800836c:	b118      	cbz	r0, 8008376 <__swbuf_r+0x12>
 800836e:	6983      	ldr	r3, [r0, #24]
 8008370:	b90b      	cbnz	r3, 8008376 <__swbuf_r+0x12>
 8008372:	f7fe ff3b 	bl	80071ec <__sinit>
 8008376:	4b27      	ldr	r3, [pc, #156]	; (8008414 <__swbuf_r+0xb0>)
 8008378:	429c      	cmp	r4, r3
 800837a:	d101      	bne.n	8008380 <__swbuf_r+0x1c>
 800837c:	6874      	ldr	r4, [r6, #4]
 800837e:	e008      	b.n	8008392 <__swbuf_r+0x2e>
 8008380:	4b25      	ldr	r3, [pc, #148]	; (8008418 <__swbuf_r+0xb4>)
 8008382:	429c      	cmp	r4, r3
 8008384:	d101      	bne.n	800838a <__swbuf_r+0x26>
 8008386:	68b4      	ldr	r4, [r6, #8]
 8008388:	e003      	b.n	8008392 <__swbuf_r+0x2e>
 800838a:	4b24      	ldr	r3, [pc, #144]	; (800841c <__swbuf_r+0xb8>)
 800838c:	429c      	cmp	r4, r3
 800838e:	bf08      	it	eq
 8008390:	68f4      	ldreq	r4, [r6, #12]
 8008392:	69a3      	ldr	r3, [r4, #24]
 8008394:	60a3      	str	r3, [r4, #8]
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	0719      	lsls	r1, r3, #28
 800839a:	d50e      	bpl.n	80083ba <__swbuf_r+0x56>
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	b163      	cbz	r3, 80083ba <__swbuf_r+0x56>
 80083a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a4:	049a      	lsls	r2, r3, #18
 80083a6:	b2fd      	uxtb	r5, r7
 80083a8:	d410      	bmi.n	80083cc <__swbuf_r+0x68>
 80083aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083ae:	81a3      	strh	r3, [r4, #12]
 80083b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083b6:	6663      	str	r3, [r4, #100]	; 0x64
 80083b8:	e008      	b.n	80083cc <__swbuf_r+0x68>
 80083ba:	4621      	mov	r1, r4
 80083bc:	4630      	mov	r0, r6
 80083be:	f7fd ff7b 	bl	80062b8 <__swsetup_r>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d0ec      	beq.n	80083a0 <__swbuf_r+0x3c>
 80083c6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	6920      	ldr	r0, [r4, #16]
 80083d0:	1a18      	subs	r0, r3, r0
 80083d2:	6963      	ldr	r3, [r4, #20]
 80083d4:	4298      	cmp	r0, r3
 80083d6:	db05      	blt.n	80083e4 <__swbuf_r+0x80>
 80083d8:	4621      	mov	r1, r4
 80083da:	4630      	mov	r0, r6
 80083dc:	f7fe fe9c 	bl	8007118 <_fflush_r>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1f0      	bne.n	80083c6 <__swbuf_r+0x62>
 80083e4:	68a3      	ldr	r3, [r4, #8]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	60a3      	str	r3, [r4, #8]
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	6022      	str	r2, [r4, #0]
 80083f0:	701f      	strb	r7, [r3, #0]
 80083f2:	6962      	ldr	r2, [r4, #20]
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d004      	beq.n	8008404 <__swbuf_r+0xa0>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	07db      	lsls	r3, r3, #31
 80083fe:	d507      	bpl.n	8008410 <__swbuf_r+0xac>
 8008400:	2d0a      	cmp	r5, #10
 8008402:	d105      	bne.n	8008410 <__swbuf_r+0xac>
 8008404:	4621      	mov	r1, r4
 8008406:	4630      	mov	r0, r6
 8008408:	f7fe fe86 	bl	8007118 <_fflush_r>
 800840c:	2800      	cmp	r0, #0
 800840e:	d1da      	bne.n	80083c6 <__swbuf_r+0x62>
 8008410:	4628      	mov	r0, r5
 8008412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008414:	08008e18 	.word	0x08008e18
 8008418:	08008e38 	.word	0x08008e38
 800841c:	08008e58 	.word	0x08008e58

08008420 <_write_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4c07      	ldr	r4, [pc, #28]	; (8008440 <_write_r+0x20>)
 8008424:	4605      	mov	r5, r0
 8008426:	4608      	mov	r0, r1
 8008428:	4611      	mov	r1, r2
 800842a:	2200      	movs	r2, #0
 800842c:	6022      	str	r2, [r4, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	f7fc f9c6 	bl	80047c0 <_write>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d102      	bne.n	800843e <_write_r+0x1e>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	b103      	cbz	r3, 800843e <_write_r+0x1e>
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	20000ca8 	.word	0x20000ca8

08008444 <_calloc_r>:
 8008444:	b510      	push	{r4, lr}
 8008446:	4351      	muls	r1, r2
 8008448:	f7fc fc54 	bl	8004cf4 <_malloc_r>
 800844c:	4604      	mov	r4, r0
 800844e:	b320      	cbz	r0, 800849a <_calloc_r+0x56>
 8008450:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008454:	f022 0203 	bic.w	r2, r2, #3
 8008458:	3a04      	subs	r2, #4
 800845a:	2a24      	cmp	r2, #36	; 0x24
 800845c:	d81a      	bhi.n	8008494 <_calloc_r+0x50>
 800845e:	2a13      	cmp	r2, #19
 8008460:	d912      	bls.n	8008488 <_calloc_r+0x44>
 8008462:	2100      	movs	r1, #0
 8008464:	2a1b      	cmp	r2, #27
 8008466:	6001      	str	r1, [r0, #0]
 8008468:	6041      	str	r1, [r0, #4]
 800846a:	d802      	bhi.n	8008472 <_calloc_r+0x2e>
 800846c:	f100 0308 	add.w	r3, r0, #8
 8008470:	e00b      	b.n	800848a <_calloc_r+0x46>
 8008472:	2a24      	cmp	r2, #36	; 0x24
 8008474:	6081      	str	r1, [r0, #8]
 8008476:	60c1      	str	r1, [r0, #12]
 8008478:	bf11      	iteee	ne
 800847a:	f100 0310 	addne.w	r3, r0, #16
 800847e:	6101      	streq	r1, [r0, #16]
 8008480:	f100 0318 	addeq.w	r3, r0, #24
 8008484:	6141      	streq	r1, [r0, #20]
 8008486:	e000      	b.n	800848a <_calloc_r+0x46>
 8008488:	4603      	mov	r3, r0
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	605a      	str	r2, [r3, #4]
 8008490:	609a      	str	r2, [r3, #8]
 8008492:	e002      	b.n	800849a <_calloc_r+0x56>
 8008494:	2100      	movs	r1, #0
 8008496:	f7ff fa33 	bl	8007900 <memset>
 800849a:	4620      	mov	r0, r4
 800849c:	bd10      	pop	{r4, pc}
	...

080084a0 <_close_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4c06      	ldr	r4, [pc, #24]	; (80084bc <_close_r+0x1c>)
 80084a4:	2300      	movs	r3, #0
 80084a6:	4605      	mov	r5, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	f000 f922 	bl	80086f4 <_close>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_close_r+0x1a>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_close_r+0x1a>
 80084b8:	602b      	str	r3, [r5, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20000ca8 	.word	0x20000ca8

080084c0 <_fclose_r>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	4605      	mov	r5, r0
 80084c4:	460c      	mov	r4, r1
 80084c6:	b909      	cbnz	r1, 80084cc <_fclose_r+0xc>
 80084c8:	2000      	movs	r0, #0
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	b118      	cbz	r0, 80084d6 <_fclose_r+0x16>
 80084ce:	6983      	ldr	r3, [r0, #24]
 80084d0:	b90b      	cbnz	r3, 80084d6 <_fclose_r+0x16>
 80084d2:	f7fe fe8b 	bl	80071ec <__sinit>
 80084d6:	4b20      	ldr	r3, [pc, #128]	; (8008558 <_fclose_r+0x98>)
 80084d8:	429c      	cmp	r4, r3
 80084da:	d101      	bne.n	80084e0 <_fclose_r+0x20>
 80084dc:	686c      	ldr	r4, [r5, #4]
 80084de:	e008      	b.n	80084f2 <_fclose_r+0x32>
 80084e0:	4b1e      	ldr	r3, [pc, #120]	; (800855c <_fclose_r+0x9c>)
 80084e2:	429c      	cmp	r4, r3
 80084e4:	d101      	bne.n	80084ea <_fclose_r+0x2a>
 80084e6:	68ac      	ldr	r4, [r5, #8]
 80084e8:	e003      	b.n	80084f2 <_fclose_r+0x32>
 80084ea:	4b1d      	ldr	r3, [pc, #116]	; (8008560 <_fclose_r+0xa0>)
 80084ec:	429c      	cmp	r4, r3
 80084ee:	bf08      	it	eq
 80084f0:	68ec      	ldreq	r4, [r5, #12]
 80084f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0e6      	beq.n	80084c8 <_fclose_r+0x8>
 80084fa:	4621      	mov	r1, r4
 80084fc:	4628      	mov	r0, r5
 80084fe:	f7fe fd7b 	bl	8006ff8 <__sflush_r>
 8008502:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008504:	4606      	mov	r6, r0
 8008506:	b133      	cbz	r3, 8008516 <_fclose_r+0x56>
 8008508:	6a21      	ldr	r1, [r4, #32]
 800850a:	4628      	mov	r0, r5
 800850c:	4798      	blx	r3
 800850e:	2800      	cmp	r0, #0
 8008510:	bfb8      	it	lt
 8008512:	f04f 36ff 	movlt.w	r6, #4294967295
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	061b      	lsls	r3, r3, #24
 800851a:	d503      	bpl.n	8008524 <_fclose_r+0x64>
 800851c:	6921      	ldr	r1, [r4, #16]
 800851e:	4628      	mov	r0, r5
 8008520:	f7fe ff2c 	bl	800737c <_free_r>
 8008524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008526:	b141      	cbz	r1, 800853a <_fclose_r+0x7a>
 8008528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800852c:	4299      	cmp	r1, r3
 800852e:	d002      	beq.n	8008536 <_fclose_r+0x76>
 8008530:	4628      	mov	r0, r5
 8008532:	f7fe ff23 	bl	800737c <_free_r>
 8008536:	2300      	movs	r3, #0
 8008538:	6363      	str	r3, [r4, #52]	; 0x34
 800853a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800853c:	b121      	cbz	r1, 8008548 <_fclose_r+0x88>
 800853e:	4628      	mov	r0, r5
 8008540:	f7fe ff1c 	bl	800737c <_free_r>
 8008544:	2300      	movs	r3, #0
 8008546:	64a3      	str	r3, [r4, #72]	; 0x48
 8008548:	f7fe fec0 	bl	80072cc <__sfp_lock_acquire>
 800854c:	2300      	movs	r3, #0
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	f7fe febd 	bl	80072ce <__sfp_lock_release>
 8008554:	4630      	mov	r0, r6
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	08008e18 	.word	0x08008e18
 800855c:	08008e38 	.word	0x08008e38
 8008560:	08008e58 	.word	0x08008e58

08008564 <__fputwc>:
 8008564:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008568:	4680      	mov	r8, r0
 800856a:	460e      	mov	r6, r1
 800856c:	4614      	mov	r4, r2
 800856e:	f7ff f92f 	bl	80077d0 <__locale_mb_cur_max>
 8008572:	2801      	cmp	r0, #1
 8008574:	d106      	bne.n	8008584 <__fputwc+0x20>
 8008576:	1e73      	subs	r3, r6, #1
 8008578:	2bfe      	cmp	r3, #254	; 0xfe
 800857a:	d803      	bhi.n	8008584 <__fputwc+0x20>
 800857c:	f88d 6004 	strb.w	r6, [sp, #4]
 8008580:	4605      	mov	r5, r0
 8008582:	e00e      	b.n	80085a2 <__fputwc+0x3e>
 8008584:	4632      	mov	r2, r6
 8008586:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800858a:	a901      	add	r1, sp, #4
 800858c:	4640      	mov	r0, r8
 800858e:	f000 f87f 	bl	8008690 <_wcrtomb_r>
 8008592:	1c42      	adds	r2, r0, #1
 8008594:	4605      	mov	r5, r0
 8008596:	d104      	bne.n	80085a2 <__fputwc+0x3e>
 8008598:	89a3      	ldrh	r3, [r4, #12]
 800859a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800859e:	81a3      	strh	r3, [r4, #12]
 80085a0:	e01c      	b.n	80085dc <__fputwc+0x78>
 80085a2:	2700      	movs	r7, #0
 80085a4:	42af      	cmp	r7, r5
 80085a6:	d018      	beq.n	80085da <__fputwc+0x76>
 80085a8:	ab01      	add	r3, sp, #4
 80085aa:	5cf9      	ldrb	r1, [r7, r3]
 80085ac:	68a3      	ldr	r3, [r4, #8]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	60a3      	str	r3, [r4, #8]
 80085b4:	da04      	bge.n	80085c0 <__fputwc+0x5c>
 80085b6:	69a2      	ldr	r2, [r4, #24]
 80085b8:	4293      	cmp	r3, r2
 80085ba:	db06      	blt.n	80085ca <__fputwc+0x66>
 80085bc:	290a      	cmp	r1, #10
 80085be:	d004      	beq.n	80085ca <__fputwc+0x66>
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	6022      	str	r2, [r4, #0]
 80085c6:	7019      	strb	r1, [r3, #0]
 80085c8:	e005      	b.n	80085d6 <__fputwc+0x72>
 80085ca:	4622      	mov	r2, r4
 80085cc:	4640      	mov	r0, r8
 80085ce:	f7ff fec9 	bl	8008364 <__swbuf_r>
 80085d2:	1c43      	adds	r3, r0, #1
 80085d4:	d002      	beq.n	80085dc <__fputwc+0x78>
 80085d6:	3701      	adds	r7, #1
 80085d8:	e7e4      	b.n	80085a4 <__fputwc+0x40>
 80085da:	4630      	mov	r0, r6
 80085dc:	b002      	add	sp, #8
 80085de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085e2 <_fputwc_r>:
 80085e2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80085e6:	b410      	push	{r4}
 80085e8:	049c      	lsls	r4, r3, #18
 80085ea:	d406      	bmi.n	80085fa <_fputwc_r+0x18>
 80085ec:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80085ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085f2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80085f6:	8193      	strh	r3, [r2, #12]
 80085f8:	6654      	str	r4, [r2, #100]	; 0x64
 80085fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085fe:	f7ff bfb1 	b.w	8008564 <__fputwc>
	...

08008604 <_fstat_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4c07      	ldr	r4, [pc, #28]	; (8008624 <_fstat_r+0x20>)
 8008608:	2300      	movs	r3, #0
 800860a:	4605      	mov	r5, r0
 800860c:	4608      	mov	r0, r1
 800860e:	4611      	mov	r1, r2
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	f000 f877 	bl	8008704 <_fstat>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d102      	bne.n	8008620 <_fstat_r+0x1c>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	b103      	cbz	r3, 8008620 <_fstat_r+0x1c>
 800861e:	602b      	str	r3, [r5, #0]
 8008620:	bd38      	pop	{r3, r4, r5, pc}
 8008622:	bf00      	nop
 8008624:	20000ca8 	.word	0x20000ca8

08008628 <_isatty_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4c06      	ldr	r4, [pc, #24]	; (8008644 <_isatty_r+0x1c>)
 800862c:	2300      	movs	r3, #0
 800862e:	4605      	mov	r5, r0
 8008630:	4608      	mov	r0, r1
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	f000 f86e 	bl	8008714 <_isatty>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_isatty_r+0x1a>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	b103      	cbz	r3, 8008642 <_isatty_r+0x1a>
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	20000ca8 	.word	0x20000ca8

08008648 <_lseek_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4c07      	ldr	r4, [pc, #28]	; (8008668 <_lseek_r+0x20>)
 800864c:	4605      	mov	r5, r0
 800864e:	4608      	mov	r0, r1
 8008650:	4611      	mov	r1, r2
 8008652:	2200      	movs	r2, #0
 8008654:	6022      	str	r2, [r4, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	f000 f864 	bl	8008724 <_lseek>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_lseek_r+0x1e>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	b103      	cbz	r3, 8008666 <_lseek_r+0x1e>
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	20000ca8 	.word	0x20000ca8

0800866c <_read_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4c07      	ldr	r4, [pc, #28]	; (800868c <_read_r+0x20>)
 8008670:	4605      	mov	r5, r0
 8008672:	4608      	mov	r0, r1
 8008674:	4611      	mov	r1, r2
 8008676:	2200      	movs	r2, #0
 8008678:	6022      	str	r2, [r4, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	f000 f85a 	bl	8008734 <_read>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_read_r+0x1e>
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	b103      	cbz	r3, 800868a <_read_r+0x1e>
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	20000ca8 	.word	0x20000ca8

08008690 <_wcrtomb_r>:
 8008690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008694:	461d      	mov	r5, r3
 8008696:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <_wcrtomb_r+0x44>)
 8008698:	b086      	sub	sp, #24
 800869a:	4604      	mov	r4, r0
 800869c:	4690      	mov	r8, r2
 800869e:	460e      	mov	r6, r1
 80086a0:	681f      	ldr	r7, [r3, #0]
 80086a2:	b931      	cbnz	r1, 80086b2 <_wcrtomb_r+0x22>
 80086a4:	f7ff f890 	bl	80077c8 <__locale_charset>
 80086a8:	9500      	str	r5, [sp, #0]
 80086aa:	4603      	mov	r3, r0
 80086ac:	4632      	mov	r2, r6
 80086ae:	a903      	add	r1, sp, #12
 80086b0:	e005      	b.n	80086be <_wcrtomb_r+0x2e>
 80086b2:	f7ff f889 	bl	80077c8 <__locale_charset>
 80086b6:	9500      	str	r5, [sp, #0]
 80086b8:	4603      	mov	r3, r0
 80086ba:	4642      	mov	r2, r8
 80086bc:	4631      	mov	r1, r6
 80086be:	4620      	mov	r0, r4
 80086c0:	47b8      	blx	r7
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	bf01      	itttt	eq
 80086c6:	2300      	moveq	r3, #0
 80086c8:	602b      	streq	r3, [r5, #0]
 80086ca:	238a      	moveq	r3, #138	; 0x8a
 80086cc:	6023      	streq	r3, [r4, #0]
 80086ce:	b006      	add	sp, #24
 80086d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d4:	20000584 	.word	0x20000584

080086d8 <__ascii_wctomb>:
 80086d8:	b149      	cbz	r1, 80086ee <__ascii_wctomb+0x16>
 80086da:	2aff      	cmp	r2, #255	; 0xff
 80086dc:	bf85      	ittet	hi
 80086de:	238a      	movhi	r3, #138	; 0x8a
 80086e0:	6003      	strhi	r3, [r0, #0]
 80086e2:	700a      	strbls	r2, [r1, #0]
 80086e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80086e8:	bf98      	it	ls
 80086ea:	2001      	movls	r0, #1
 80086ec:	4770      	bx	lr
 80086ee:	4608      	mov	r0, r1
 80086f0:	4770      	bx	lr
	...

080086f4 <_close>:
 80086f4:	4b02      	ldr	r3, [pc, #8]	; (8008700 <_close+0xc>)
 80086f6:	2258      	movs	r2, #88	; 0x58
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	f04f 30ff 	mov.w	r0, #4294967295
 80086fe:	4770      	bx	lr
 8008700:	20000ca8 	.word	0x20000ca8

08008704 <_fstat>:
 8008704:	4b02      	ldr	r3, [pc, #8]	; (8008710 <_fstat+0xc>)
 8008706:	2258      	movs	r2, #88	; 0x58
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	f04f 30ff 	mov.w	r0, #4294967295
 800870e:	4770      	bx	lr
 8008710:	20000ca8 	.word	0x20000ca8

08008714 <_isatty>:
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <_isatty+0xc>)
 8008716:	2258      	movs	r2, #88	; 0x58
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	2000      	movs	r0, #0
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20000ca8 	.word	0x20000ca8

08008724 <_lseek>:
 8008724:	4b02      	ldr	r3, [pc, #8]	; (8008730 <_lseek+0xc>)
 8008726:	2258      	movs	r2, #88	; 0x58
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	f04f 30ff 	mov.w	r0, #4294967295
 800872e:	4770      	bx	lr
 8008730:	20000ca8 	.word	0x20000ca8

08008734 <_read>:
 8008734:	4b02      	ldr	r3, [pc, #8]	; (8008740 <_read+0xc>)
 8008736:	2258      	movs	r2, #88	; 0x58
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	f04f 30ff 	mov.w	r0, #4294967295
 800873e:	4770      	bx	lr
 8008740:	20000ca8 	.word	0x20000ca8

08008744 <_sbrk>:
 8008744:	4b04      	ldr	r3, [pc, #16]	; (8008758 <_sbrk+0x14>)
 8008746:	6819      	ldr	r1, [r3, #0]
 8008748:	4602      	mov	r2, r0
 800874a:	b909      	cbnz	r1, 8008750 <_sbrk+0xc>
 800874c:	4903      	ldr	r1, [pc, #12]	; (800875c <_sbrk+0x18>)
 800874e:	6019      	str	r1, [r3, #0]
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	4402      	add	r2, r0
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	4770      	bx	lr
 8008758:	200005dc 	.word	0x200005dc
 800875c:	20000cac 	.word	0x20000cac

08008760 <_init>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr

0800876c <_fini>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	bf00      	nop
 8008770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008772:	bc08      	pop	{r3}
 8008774:	469e      	mov	lr, r3
 8008776:	4770      	bx	lr
